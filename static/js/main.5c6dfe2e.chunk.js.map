{"version":3,"sources":["reportWebVitals.ts","components/ErrorsAlerts/ErrorsAlerts.tsx","state/bots/BotsReducer.tsx","state/deals/DealsReducer.tsx","utils/ApiUtils.tsx","components/NavBar/NavBar.tsx","state/gridBots/GridBotsReducer.tsx","App.tsx","utils/BotsUtils.tsx","utils/DealsUtils.tsx","state/deals/DealsSelectors.tsx","state/bots/BotsActions.tsx","state/bots/BotsEffects.tsx","state/deals/DealsActions.tsx","state/deals/DealsEffects.tsx","utils/GeneralUtils.tsx","utils/ChartsUtils.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsCharts/DCABotDetailsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsDealsTable/DCABotDetailsDealsTable.tsx","components/DCABots/BotsList/BotPreview/BotPreview.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsSettings/DCABotDetailsSettingsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsInfo/DCABotDetailsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetails.tsx","components/DCABots/BotsFilters/BotsFilters.tsx","components/DCABots/BotsList/BotsListCharts/BotsListCharts.tsx","components/DCABots/BotsList/BotsList.tsx","components/DCABots/DCABots.tsx","utils/GridBotsUtils.tsx","state/gridBots/GridBotsActions.tsx","state/gridBots/GridBotsEffects.tsx","components/CommonComponents/CurrencyIcon/CurrencyIcon.tsx","components/GridBots/GridBotsList/GridBotsListTable/GridBotsListTable.tsx","components/GridBots/GridBotDetails/GridBotDetailsCharts/GridBotDetailsCharts.tsx","components/GridBots/GridBotDetails/GridBotDetailsTable/GridBotDetailsTable.tsx","components/GridBots/GridBotDetails/GridBotDetails.tsx","components/GridBots/GridBotsList/GridBotListMetrics/GridBotListMetrics.tsx","components/GridBots/GridBotsList/GridBotsList.tsx","components/GridBots/GridBots.tsx","Router.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorsAlerts","useContext","ErrorsContext","errors","errorsState","errorsDispatch","className","length","Alert","variant","onClose","type","dismissible","Heading","map","error","Link","onClick","window","open","botsStateInitializer","initialValue","initialBotsState","storedFilters","JSON","parse","localStorage","getItem","filters","list","hasMore","limit","offset","scope","account","sorting","bots","botsReducer","state","action","newList","payload","bot","id","newBots","_","keyBy","botId","Error","initialDealsState","deals","dealsReducer","period","periodInDays","newDeals","omit","commonLimiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","DEAL_LIMITER_SETTINGS","minTime","maxConcurrent","clearDatastore","timeout","API_KEY","URLSearchParams","location","search","get","SECRET","dealsLimiter","setDealsLimiter","limiterId","getDealsLimiter","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","limiter","schedule","fetch","headers","APIKEY","Signature","getBots","accountId","a","resetOffset","split","sortBy","sortDirection","getBotsUrl","response","json","getGridBots","accountTypes","accountTypesParams","accountType","join","getBot","getGridBotsProfits","gridBotId","getGridBotsMarketOrders","getDeal","dealId","getAccounts","getDeals","order","getStrategies","getBotStats","NavBar","useState","activeKey","setActiveKey","navigate","useNavigate","useLocation","useEffect","pathname","src","alt","Nav","Item","active","gridBotsStateInitializer","initialGridBotsState","gridBots","gridBotsReducer","gridBot","newGridBots","ChartJS","register","CategoryScale","PointElement","LinearScale","BarElement","Title","Tooltip","LineElement","Legend","TimeScale","Filler","ArcElement","initialAccountsState","accounts","initialStrategiesState","strategies","initialErrorsState","errorsReducer","Set","add","Array","from","accountsReducer","strategiesReducer","AccountsContext","createContext","accountsState","accountsDispatch","StrategiesContext","strategiesState","strategiesDispatch","BotsContext","botsState","botsDispatch","GridBotsContext","gridBotsState","gridBotsDispatch","DealsContext","dealsState","dealsDispatch","App","useReducer","getAccountData","data","getStrategiesData","Provider","value","getMaxUsage","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","includes","Promise","resolve","marketInfo","last","currencyPriceInUsd","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","find","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getFundsLocked","fundsLocked","getCurrencyFormat","signDisplay","Intl","NumberFormat","maximumFractionDigits","format","maxUsageInUsd","getReturns","reduce","currDeal","nextDeal","usd_final_profit","differenceInHours","b","Math","ceil","diff","differenceInDays","getDealAgeInHours","deal","moment","closed_at","getAllDealsForOneBot","daysWithin","ofsetCallback","hoursWithin","fetchAllDealsInLoop","slice","lastDeal","filteredDeals","filter","getObjectOfProfitPerDay","result","groupBy","item","mapValues","sum","getLastNDays","n","i","idx","startOf","subtract","date","reverse","getProfitChartData","profitObject","nDays","lastDays","profits","day","labels","getAccumulativeProfitChartData","currentvalue","accProfits","profit","acc","getOneBotProfitsChartData","botsDeals","difference","getOneBotCurrencyLeaderbord","profitsByPair","getObjectOfProfitPerPair","sortedProfits","toPairs","orderBy","INFINITY_IN_DAYS","is30daysDealsLoaded","isAllDealsLoaded","selectAllDealsWithin30Days","selectAllDeals","setNewBotsList","botsList","setHasMore","addToBotsList","setBotsOffset","setBot","fetchBots","customLimit","offsetLimit","botItem","name","profits_in_usd","today_usd_profit","funds_locked_in_active_deals","todayUsdProfit","deals30daysForBot","returns","getDealsList","setOffset","resetDeals","fetchDealsForBotFor30Days","message","fetchAllDealsForBot","reset","getAllActiveDeals","usePrevious","ref","useRef","current","ProfitChartOptions","text","tooltipCustomVaueFormat","scales","x","time","unit","tooltipFormat","ticks","source","y","beginAtZero","responsive","plugins","legend","display","title","tooltip","intersect","mode","callbacks","label","AccumulativeChartOptions","lineTension","gridLines","offsetGridLines","filler","propagate","drawTime","LeaderbordChartOptions","indexAxis","stacked","callback","DealsCountBarChartOptions","isWeekUnit","stepSize","DCABotDetailsMainCharts","xLabel","yLabel","dateLabelsDays","timeRangeValue","countsValues","dates","delsGrouped","getDealsCountPerDay","dealsStatusData","countsObj","countBy","localized_status","keys","values","key","dealsStatusesCounts","dealsDurationHistogramData","dealDurations","start","created_at","end","getDealsDurationHistogramData","options","datasets","borderColor","backgroundColor","aspectRatio","tooltipItem","dataset","total","previousValue","currentValue","dataIndex","percentage","floor","legendItem","index","width","borderWidth","barPercentage","DCABotDetailsProfitsCharts","accumulativeProfitsData","setAccumulativeProfitsData","profitsData","setProfitsData","pairsLeaderbordData","setPairsLeaderbordData","getOneBotAccumulativeProfitsChartData","fill","DCABotDetailsCharts","infoKey","setDateLabelsDays","oldestDealAgeInDaysSinceOpened","pop","badgeVariant","Cancelled","StopLoss","Failed","Completed","Liquidated","Switched","DCABotDetailsDealsTable","columns","React","useMemo","Header","accessor","disableSortBy","originalRow","rowIndex","pair","Cell","cell","Badge","style","fontSize","bg","Date","sortType","utc","duration","days","asDays","daysFormatted","hours","hoursFormatted","minutes","minutesFormatted","bought_average_price","sold_average_price","amount","bought_amount","sold_amount","volume","bought_volume","sold_volume","completed_safety_orders_count","completed_manual_safety_orders_count","Number","original","numberValue","color","useTable","disableSortRemove","autoResetPage","autoResetSortBy","initialState","pageSize","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","pageCount","gotoPage","nextPage","previousPage","pageIndex","modalIsOpen","setModalIsOpen","selectedDeal","setSelectedDeal","Table","striped","bordered","hover","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","marginLeft","cursor","isSorted","isSortedDesc","row","getRowProps","cells","getCellProps","TablePagination","range","renderPaginationNumberItem","Pagination","renderPaginationBeginning","First","Prev","renderPaginationEnd","Next","Last","DealModal","setDeal","dl","Modal","show","onHide","scrollable","size","closeButton","Body","bot_events","event","Footer","Button","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","buy_or_strong_buy","strong_buy","sell_or_strong_sell","strong_sell","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","getBotsStrategyName","botsStrategy","marketsStrategy","marketStrategy","strategy_key","BotPreview","statsLoaded","setStatsLoaded","getFundsLockedAndTodaysProfit","getMaxUsageEffect","getReturnsEffect","random","age","formatter","strategy_list","botType","marketIcon","market_icon","is_enabled","marginBottom","fontWeight","active_deals_count","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","backgroundImage","String","BotName","BotInfo","BotReturns","minimumFractionDigits","returnsCalculated","OverlayTrigger","placement","delay","hide","overlay","DCABotDetailsMainInfo","setFundsLocked","fundsLockedShare","setFundsLockedShare","setMaxUsage","reservedFunds","setReservedFunds","percentFormatter","botPairs","botMarket","startCondition","percent","points","getMaxUsageInBotCurrency","mxUsg","activeDeals","reserved_base_funds","reserved_quote_funds","getReservedFundsInBotCurrency","getFundsLockedInBotCurrency","avgDealDuration","avgDealDurationInMilliseconds","getAverageDealDuration","DCABotDetailsProfitsInfo","averageTp","setAverageTp","averageProfitFromDeal","setAverageProfitFromDeal","averageDailyProfit","setAverageDailyProfit","setReturns","totalProfitUsd","setTotalProfitUsd","mean","status","final_profit_percentage","getAverageTp","getAverageProfitFromDeal","createdAt","startBotDate","unzip","zip","chartData","isBefore","getAverageDailyProfit","getTotalProfitUsd","DCABotDetailsSettingsInfo","additionalCurrency","baseOrderSize","setBaseOrderSize","safetyOrderSize","setSafetyOrderSize","getBaseOrderSize","safety_order_volume_type","getSafetyOrderSize","leverageType","leverage_type","profit_currency","take_profit","take_profit_type","trailing_enabled","trailing_deviation","stop_loss_percentage","stop_loss_timeout_in_seconds","start_order_type","active_safety_orders_count","safety_order_step_percentage","martingale_step_coefficient","DCABotDetailsInfo","setInfoKey","Tabs","onSelect","k","Tab","eventKey","tabClassName","statusFilterOptions","DCABotDetails","params","useParams","setTimeRangeValue","NaN","setBotId","previousBotId","setBotsDeals","isDataLoading","setIsDataLoading","isAllDataLoading","setIsAllDataLoading","setAccount","percentLoadedDeals","setPercentLoadedDeals","statusFilter","setStatusFilter","pairFilter","setPairFilter","pairFilterOptions","setPairFilterOptions","fromFilter","setFromFilter","toFilter","setToFilter","clearFilters","refreshData","fetchBot","dateFrom","isAfter","isSame","filterFrom","dateTo","filterTo","filterByStatus","filterByPair","loadedDeals","finished_deals_count","stop","dropWaitingJobs","disconnect","ProgressBar","now","animated","ButtonGroup","radio","ToggleButton","checked","onChange","e","currentTarget","option","theme","colors","primary25","primary","dateFormat","selected","selectsStart","startDate","endDate","strictParsing","selectsEnd","minDate","BotsFilters","updateFilter","filterItem","accountsOptions","label_id","scopeOptions","typeOptions","sortingOptions","setItem","stringify","filterOption","candidate","input","BotsListCharts","dealsLoaded","setDealsLoaded","botsLoaded","setBotsLoaded","numberHandled","setNumberHandled","profitsChartData","setProfitsChartData","accumulativeProfitsChartData","setAccumulativeProfitsChartData","botsLeaderboardChartData","setBotsLeaderboardChartData","getBotsList","getBoatsDeals","profitsObject","botsIds","currentObj","mergeWith","profit1","profit2","calculateProfitPerDayForListOfBots","sortedAndSelected10FirstBots","round","EPSILON","getBotsLeaderboardChartData","botsWithLoadedDeals","BotsList","showCharts","setShowCharts","isNothingFound","previousFilters","every","haveAllBotsDealsFor30Days","textAlign","dataLength","next","loader","Spinner","animation","endMessage","DCABots","cryptoCoins","BTC","ETH","BNB","USDT","USDC","XRP","TRX","BUSD","DOGE","getInitialInvestment","startPrice","start_price","quantityPerGrid","quantity_per_grid","pureInitialGrids","grid_lines","sort","abs","price","shift","baseInvestment","gridLine","quoteInvestment","allInQuote","allInUsd","createdOnDay","updated_at","marketData","market_data","current_price","usd","getCurrentInvestment","currentPrice","investment_base_currency","investment_quote_currency","getProfitsWithin30days","getProfitAgeInHours","getMarketOrdersWithin30days","marketOrders","grid_lines_orders","marketOrder","getMarketOrderAgeInHours","tradingFee","resultProfits","resultMarketOrders","objectProfits","objectMarketOrders","setNewGridBotsList","gridBotsList","addToGridBotsList","setGridBot","spotAccountsTypes","fetchInitialInvestments","gridBotItem","initialInvestments","fetchCurrentInvestments","currentInvestments","fetchProfits","fetchMarketOrders","fetchGridBotsMetrics","CurrencyIcon","height","toLowerCase","GridBotsListTable","investment","setModalGridBotId","upper_price","lower_price","grids_quantity","grigLinesNumber","sellOrdersNumber","line","order_placed","side","buyOrdersNumber","cur","val","invesmentChange","quoteProfit","profitPercent","usdProfit","usd_profit","pnl","pnlPercent","alignItems","justifyContent","rows","GridBotDetailsCharts","chartTooltipFormatLabel","parsed","botsProfits","max","getOneGridBotAccumulativeProfitsChartData","getOneGridBotProfitsChartData","GridBotDetailsTable","setProfit","avgProfit","setAvgProfit","running","setRunning","summarizedProfits","realProfit","realAvgProfit","realReturns","timeRangeRadios","GridBotDetails","setTradingFee","setMarketOrders","setProfits","fetchDetails","status_string","InputGroup","FormControl","target","Text","GridBotListMetrics","totalInvestments","setTotalInvestments","totalProfits","setTotalProfits","totaPnL","setTotalPnL","isLoading","setIsLoading","allHaveInvestments","allHaveCurrentInvestments","allHaveProfits","calculatedInitialInvestments","calculatedCurrentInvestments","calculatedProfits","investmentRadios","valuesRadios","GridBotsList","setInvestment","setValues","modalGridBotId","fetchGridBots","GridBots","Router","element","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c6dfe2e.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via{\" \"}\n          <Alert.Link\n            onClick={() => {\n              window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n            }}\n          >\n            Telegram\n          </Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import _ from \"lodash\";\nimport { IBot, IBotFilters } from \"../../interfaces/Bot\";\nimport { BotsAction } from \"./BotsActions\";\n\nexport interface IBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IBotFilters;\n  limit: number;\n  bots: { [key: number]: IBot };\n}\n\nexport const botsStateInitializer = (\n  initialValue = initialBotsState\n): IBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"botsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  scope: \"enabled\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 15,\n  offset: 0,\n  filters: initialFiltersState,\n  bots: {},\n};\n\nexport function botsReducer(\n  state: IBotsState = initialBotsState,\n  action: BotsAction\n): IBotsState {\n  switch (action.type) {\n    case \"setNewBotsList\":\n      const newList = action.payload.map((bot) => bot.id);\n      const newBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, bots: newBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToBotsList\":\n      const list = action.payload.map((bot) => bot.id);\n      const bots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        bots: { ...state.bots, ...bots },\n      };\n    case \"setBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setBot\":\n      return {\n        ...state,\n        bots: { ...state.bots, [action.payload.botId]: action.payload.bot },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { DealsAction } from \"./DealsActions\";\nimport { IDeal } from \"../../interfaces/Deal\";\nimport _ from \"lodash\";\n\nexport interface IDealsState {\n  deals: {\n    [key: string]: { list: Array<IDeal>; period: number; offset?: number };\n  };\n}\n\nexport const initialDealsState: IDealsState = {\n  deals: {},\n};\n\nexport function dealsReducer(\n  state: IDealsState = initialDealsState,\n  action: DealsAction\n): IDealsState {\n  switch (action.type) {\n    case \"getDealsList\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            list: action.payload.deals,\n            period: action.payload.periodInDays,\n          },\n        },\n      };\n    case \"setOffset\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            offset: action.payload.offset,\n          },\n        },\n      };\n    case \"resetDeals\":\n      if (action.payload.botId in state.deals) {\n        const newDeals = _.omit(state.deals, [action.payload.botId]);\n        return {\n          ...state,\n          deals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    default:\n      throw new Error();\n  }\n}\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\nimport { IBotApi } from \"../interfaces/Bot\";\nimport { IDealApi } from \"../interfaces/Deal\";\nimport { IGridBotApi } from \"../interfaces/GridBot\";\n\nconst commonLimiter = new Bottleneck({\n  reservoir: 13,\n  reservoirRefreshAmount: 13,\n  reservoirRefreshInterval: 1000,\n});\n\nexport const DEAL_LIMITER_SETTINGS = {\n  id: \"DEAL_LIMITER\",\n  reservoir: 0,\n  reservoirRefreshAmount: 1,\n  reservoirRefreshInterval: 1000,\n  minTime: 1000,\n  maxConcurrent: 1,\n  clearDatastore: true,\n  timeout: 2000,\n};\n\nconst API_KEY =\n  new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\nconst SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n//we need that hack for stopping loading heavy deals request\nexport let dealsLimiter = new Bottleneck(DEAL_LIMITER_SETTINGS);\n\nexport function setDealsLimiter(limiterId: any) {\n  dealsLimiter = new Bottleneck({ ...DEAL_LIMITER_SETTINGS, id: limiterId });\n}\n\nexport function getDealsLimiter() {\n  return dealsLimiter;\n}\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (\n  method: string,\n  path: string,\n  limiter: any = commonLimiter\n) => {\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n): Promise<Array<IBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      scope ? `&scope=${scope}` : \"\"\n    }${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getGridBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  accountId: string,\n  accountTypes: string[],\n  state = \"enabled\"\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const accountTypesParams = accountTypes\n    .map((accountType) => `&account_types[]=${accountType}`)\n    .join(\"\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/grid_bots?offset=${offset}&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      accountId ? `&account_ids[]=${accountId}` : accountTypesParams\n    }${state ? `&state=${state}` : \"\"}`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getBot = async (botId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/bots/${botId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBot = async (gridBotId: number): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsProfits = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}/profits`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsMarketOrders = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/grid_bots/${gridBotId}/market_orders`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeal = async (dealId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/deals/${dealId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccounts = async () => {\n  return callApi(\"GET\", `/public/api/ver1/accounts`).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getDeals = async (\n  botId: number,\n  offset: number,\n  limit: number,\n  scope: string,\n  order: string\n): Promise<Array<IDealApi>> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=${scope}&order=${order}`,\n    dealsLimiter\n  ).then((response: any) => response.json());\n};\n\nexport const getStrategies = async () => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/marketplace/items?&limit=1000`\n  ).then((response: any) => response.json());\n};\n\nexport const getBotStats = async (botId: number) => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/bots/stats?bot_id=${botId}`\n  ).then((response: any) => response.json());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"./NavBar.css\";\n\nexport const NavBar = () => {\n  const [activeKey, setActiveKey] = useState(\"DCA\");\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const goToGridbots = () => {\n    navigate({\n      pathname: `/gridbots`,\n      search: window.location.search,\n    });\n  };\n  const goToDCABots = () => {\n    navigate({\n      pathname: `/`,\n      search: window.location.search,\n    });\n  };\n\n  useEffect(() => {\n    if (location.pathname === \"/\") {\n      setActiveKey(\"DCA\");\n    } else if (location.pathname === \"/gridbots\") {\n      setActiveKey(\"grid\");\n    }\n  }, [location]);\n\n  return (\n    <div className=\"NavBar\">\n      <div className=\"NavBarContainer\">\n        <div className=\"LogoContainer\">\n          <img className=\"Logo\" src={`BotAn__icon.png`} alt=\"logo\" />\n        </div>\n        <div className=\"Navigation\">\n          <Nav>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"DCA\"} onClick={goToDCABots}>\n                DCA Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"grid\"} onClick={goToGridbots}>\n                Grid Bots\n              </Nav.Link>\n            </Nav.Item>\n            {/* <Nav.Item>\n              <Nav.Link eventKey=\"link-2\" disabled>\n                Smart Trades\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>\n                Accounts\n              </Nav.Link>\n            </Nav.Item> */}\n          </Nav>\n        </div>\n\n        <div\n          className=\"CommunityLink\"\n          onClick={() => {\n            window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n          }}\n        >\n          <span className=\"SupportLabel\">Community</span>\n          <img className=\"TelegramIcon\" src={`image 8.png`} alt=\"logo\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\nimport { GridBotsAction } from \"./GridBotsActions\";\n\nexport interface IGridBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IGridBotFilters;\n  limit: number;\n  gridBots: { [key: number]: IGridBot };\n}\n\nexport const gridBotsStateInitializer = (\n  initialValue = initialGridBotsState\n): IGridBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"GridBotsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountType: \"spot\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialGridBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 10,\n  offset: 0,\n  filters: initialFiltersState,\n  gridBots: {},\n};\n\nexport function gridBotsReducer(\n  state: IGridBotsState = initialGridBotsState,\n  action: GridBotsAction\n): IGridBotsState {\n  switch (action.type) {\n    case \"setNewGridBotsList\":\n      const newList = action.payload.map((gridBot) => gridBot.id);\n      const newGridBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, gridBots: newGridBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToGridBotsList\":\n      const list = action.payload.map((gridBot) => gridBot.id);\n      const gridBots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        gridBots: { ...state.gridBots, ...gridBots },\n      };\n    case \"setGridBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setGridBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setGridBot\":\n      return {\n        ...state,\n        gridBots: {\n          ...state.gridBots,\n          [action.payload.gridBotId]: action.payload.gridBot,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import React, { createContext, useEffect, useReducer, useState } from \"react\";\nimport \"./App.css\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport {\n  botsReducer,\n  botsStateInitializer,\n  initialBotsState,\n} from \"./state/bots/BotsReducer\";\nimport { dealsReducer, initialDealsState } from \"./state/deals/DealsReducer\";\nimport { getAccounts, getStrategies } from \"./utils/ApiUtils\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { Outlet } from \"react-router-dom\";\nimport {\n  gridBotsReducer,\n  gridBotsStateInitializer,\n  initialGridBotsState,\n} from \"./state/gridBots/GridBotsReducer\";\n\nChartJS.register(\n  CategoryScale,\n  PointElement,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement\n);\n\nconst initialAccountsState: any = {\n  accounts: [],\n};\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction accountsReducer(state = initialAccountsState, action: any) {\n  switch (action.type) {\n    case \"setAccounts\":\n      return { accounts: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nexport const BotsContext = createContext({\n  botsState: initialBotsState,\n  botsDispatch: (state: any) => {},\n});\nexport const GridBotsContext = createContext({\n  gridBotsState: initialGridBotsState,\n  gridBotsDispatch: (state: any) => {},\n});\nexport const DealsContext = createContext({\n  dealsState: initialDealsState,\n  dealsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [botsState, botsDispatch] = useReducer(\n    botsReducer,\n    initialBotsState,\n    botsStateInitializer\n  );\n  const [gridBotsState, gridBotsDispatch] = useReducer(\n    gridBotsReducer,\n    initialGridBotsState,\n    gridBotsStateInitializer\n  );\n\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n  const [dealsState, dealsDispatch] = useReducer(\n    dealsReducer,\n    initialDealsState\n  );\n\n  const getAccountData = async () => {\n    try {\n      const data = await getAccounts();\n      accountsDispatch({ type: \"setAccounts\", payload: data });\n    } catch {\n      accountsDispatch({ type: \"setAccounts\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching accounts list\",\n      });\n    }\n  };\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAccountData();\n    getStrategiesData();\n  }, []);\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <BotsContext.Provider value={{ botsState, botsDispatch }}>\n            <GridBotsContext.Provider\n              value={{ gridBotsState, gridBotsDispatch }}\n            >\n              <DealsContext.Provider value={{ dealsState, dealsDispatch }}>\n                <div className=\"App\">\n                  <NavBar />\n                  <Outlet />\n                  <ErrorsAlerts />\n                </div>\n              </DealsContext.Provider>\n            </GridBotsContext.Provider>\n          </BotsContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import _ from \"lodash\";\nimport { IBot } from \"../interfaces/Bot\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\nimport { callApi } from \"./ApiUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account || !account.id) {\n    return 0;\n  }\n\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    return await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nexport const isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nexport function getFundsLocked(bot: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? bot.fundsLocked / leverage : bot.fundsLocked;\n}\n\nexport function getFundsLockedInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let fundsLocked = 0;\n  let currency = quoteCurrency;\n\n  if (bot.strategy === \"long\") {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.bought_volume),\n      0\n    );\n    currency = quoteCurrency;\n  } else if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_amount),\n      0\n    );\n    currency = baseCurrency;\n  } else if (bot.strategy === \"short\" && !isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_volume),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  const leverage = parseFloat(bot.leverage_custom_value);\n\n  return {\n    value: leverage ? fundsLocked / leverage : fundsLocked,\n    currency,\n  };\n}\n\nexport const getBaseOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let additionalCurrency = \"\";\n\n  if (bot.base_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.base_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.base_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getSafetyOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n\n  let additionalCurrency = \"\";\n\n  if (bot.safety_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.safety_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.safety_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getCurrencyFormat = (\n  { value, currency }: any,\n  signDisplay: any = \"auto\"\n) => {\n  if (currency.includes(\"BTC\")) {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 6,\n      signDisplay,\n    }).format(value);\n  } else if (currency === \"marketPrice\") {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 8,\n      signDisplay,\n    }).format(value);\n  } else {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 2,\n      signDisplay,\n    }).format(value);\n  }\n};\n\nexport async function getMaxUsageInBotCurrency(bot: IBot, account: any) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let maxUsageInUsd = 0;\n\n  if (bot.maxUsage) {\n    maxUsageInUsd = bot.maxUsage;\n  } else {\n    maxUsageInUsd = await getMaxUsage(bot, account);\n  }\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    currency = baseCurrency;\n  } else {\n    currency = quoteCurrency;\n  }\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(\n    account.market_code,\n    currency\n  );\n  return {\n    value: maxUsageInUsd / currencyPriceInUsd,\n    currency,\n  };\n}\n\nexport function getReservedFundsInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let reservedFunds = 0;\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_base_funds.toString()),\n      0\n    );\n    currency = baseCurrency;\n  } else {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_quote_funds.toString()),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  return {\n    value: reservedFunds,\n    currency,\n  };\n}\n\nexport function getReturns(maxUsage: any, deals: any) {\n  if (maxUsage === 0) {\n    return 0;\n  }\n  const profit30Days = deals.reduce(\n    (currDeal: any, nextDeal: any) => ({\n      usd_final_profit:\n        parseFloat(currDeal.usd_final_profit) +\n        parseFloat(nextDeal.usd_final_profit),\n    }),\n    { usd_final_profit: 0 }\n  )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n\nexport function getBotsLeaderboardChartData(botsState: IBotsState) {\n  const bots = botsState.list.map((botId: number) => {\n    const bot = botsState.bots[botId];\n    return {\n      maxUsage: bot.maxUsage || 0,\n      name: bot.name,\n      fundsLocked: getFundsLocked(bot),\n    };\n  });\n  const sortedAndSelected10FirstBots = _.sortBy(bots, [\n    \"maxUsage\",\n    \"fundsLocked\",\n  ])\n    .reverse()\n    .slice(0, 10);\n  return [\n    sortedAndSelected10FirstBots.map((bot) => bot.name),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.fundsLocked + Number.EPSILON) * 100) / 100\n    ),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.maxUsage + Number.EPSILON) * 100) / 100\n    ),\n  ];\n}\n","import { getDeals } from \"./ApiUtils\";\nimport moment from \"moment\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport _ from \"lodash\";\nimport { IDealsState } from \"../state/deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../state/deals/DealsSelectors\";\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60));\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60 * 24));\n\nexport const getDealAgeInHours = (deal: any) =>\n  differenceInHours(moment(), moment(deal.closed_at));\n\nexport const getDealAgeInDaysSinceOpened = (deal: any) =>\n  differenceInDays(moment(), moment(deal.created_at));\n\nexport const getAllDealsForOneBot = async (\n  botId: number,\n  daysWithin = 30,\n  ofsetCallback = (offset: number) => {}\n) => {\n  const hoursWithin = 24 * daysWithin;\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsInLoop = async () => {\n    const newDeals = await getDeals(\n      botId,\n      offset,\n      limit,\n      \"finished\",\n      \"closed_at\"\n    );\n\n    if (newDeals.length === 0) {\n      return;\n    }\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= hoursWithin\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      ofsetCallback(offset);\n      await fetchAllDealsInLoop();\n    } else {\n      const filteredDeals = newDeals.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin\n      );\n      deals = [...deals, ...filteredDeals];\n    }\n  };\n\n  await fetchAllDealsInLoop();\n\n  return deals;\n};\n\nexport const getObjectOfProfitPerDay = (deals: Array<IDeal>) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  let result = _.groupBy(deals, dateString);\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfProfitPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const calculateProfitPerDayForListOfBots = (\n  dealsState: IDealsState,\n  botsIds: Array<number>\n) => {\n  return botsIds.reduce((currentObj: any, botId: number) => {\n    const botsDeals = getObjectOfProfitPerDay(\n      selectAllDealsWithin30Days(dealsState, botId)\n    );\n\n    return _.mergeWith(\n      botsDeals,\n      currentObj,\n      (profit1: number, profit2: number) => {\n        profit1 = profit1 || 0;\n        profit2 = profit2 || 0;\n        return profit1 + profit2;\n      }\n    );\n  }, {});\n};\n\nexport const getLastNDays = (n: number = 30) =>\n  [...new Array(n)]\n    .map((i, idx) => moment().startOf(\"day\").subtract(idx, \"days\"))\n    .map((date: any) => date.format(\"YYYY-MM-DD\"))\n    .reverse();\n\nexport const getProfitChartData = (profitObject: any, nDays = 30) => {\n  const lastDays = getLastNDays(nDays);\n\n  const profits = lastDays.map((day: string) => {\n    return day in profitObject ? profitObject[day] : 0;\n  });\n\n  const labels = lastDays.map((day: any) => moment(day, \"YYYY-MM-DD\"));\n  return [labels, profits];\n};\n\nexport const getAccumulativeProfitChartData = (\n  profitObject: any,\n  nDays = 30\n) => {\n  const profits = getProfitChartData(profitObject, nDays);\n  let currentvalue = 0;\n  const accProfits = profits[1].map((profit: any) => {\n    const acc = currentvalue + profit;\n    currentvalue = acc;\n    return acc;\n  });\n  return [profits[0], accProfits];\n};\n\nexport const getDealsCountPerDay = (deals: IDeal[], dates: string[]) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  const delsGrouped = _.groupBy(deals, dateString);\n  const result = _.mapValues(\n    delsGrouped,\n    (deals: Array<IDeal>) => deals.length\n  );\n\n  return dates.map((day: string) => {\n    return day in result ? result[day] : 0;\n  });\n};\n\nexport const dealsStatusesCounts = (deals: IDeal[]) => {\n  const countsObj = _.countBy(deals, (deal) => deal.localized_status);\n  const keys = [\n    \"Cancelled\",\n    \"StopLoss\",\n    \"Failed\",\n    \"Completed\",\n    \"Closed at Market Price\",\n    \"Liquidated\",\n    \"Switched\",\n  ];\n  const values = keys.map((key) => countsObj[key]);\n  return [keys, values];\n};\n\nexport const getDealsDurationHistogramData = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return differenceInHours(end, start);\n  });\n  const countsObj = _.countBy(dealDurations);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getAverageDealDuration = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return end.diff(start);\n  });\n\n  const avgDealDurationInMilliseconds =\n    _.sum(dealDurations) / dealDurations.length || 0;\n\n  return moment.utc(avgDealDurationInMilliseconds).format(\"HH:mm\");\n};\n\nexport const getOneBotAccumulativeProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getAccumulativeProfitChartData(botsDeals, 30)\n    : getAccumulativeProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getProfitChartData(botsDeals, 30)\n    : getProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotCurrencyLeaderbord = (deals: IDeal[]) => {\n  const profitsByPair = getObjectOfProfitPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getAverageTp = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.final_profit_percentage))\n      ) || 0,\n    currency: \"%\",\n  };\n};\n\nexport const getAverageProfitFromDeal = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.usd_final_profit))\n      ) || 0,\n    currency: \"$\",\n  };\n};\n\nexport const getTotalProfitUsd = (deals: IDeal[]) => {\n  return _.sum(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0;\n};\n\nexport const getAverageDailyProfit = (createdAt: string, deals: IDeal[]) => {\n  const startBotDate = moment.utc(createdAt);\n  const profitsData = _.unzip(\n    _.zip(...getOneBotProfitsChartData(deals)).filter(\n      (chartData) => !chartData[0].isBefore(startBotDate)\n    )\n  );\n  return {\n    value: _.mean(profitsData[1]),\n    currency: \"$\",\n  };\n};\n","import { getDealAgeInHours } from \"../../utils/DealsUtils\";\nimport { IDealsState } from \"./DealsReducer\";\n\nexport const INFINITY_IN_DAYS = 100000;\nconst hoursWithin30Days = 24 * 30;\n\nexport const is30daysDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals && state.deals[botId] && state.deals[botId].period >= 30;\n\nexport const isAllDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals &&\n  state.deals[botId] &&\n  state.deals[botId].period >= INFINITY_IN_DAYS;\n\nexport const selectAllDealsWithin30Days = (\n  state: IDealsState,\n  botId: number\n) => {\n  return is30daysDealsLoaded(state, botId)\n    ? state.deals[botId].list.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin30Days\n      )\n    : [];\n};\n\nexport const selectAllDeals = (state: IDealsState, botId: number) => {\n  return isAllDealsLoaded(state, botId) ? state.deals[botId].list : [];\n};\n","import { IBot, IBotFilters } from \"../../interfaces/Bot\";\n\ninterface ISetNewBotsList {\n  type: \"setNewBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const setNewBotsList = (botsList: Array<IBot>): ISetNewBotsList => ({\n  type: \"setNewBotsList\",\n  payload: botsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToBotsList {\n  type: \"addToBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const addToBotsList = (botsList: Array<IBot>): IAddToBotsList => ({\n  type: \"addToBotsList\",\n  payload: botsList,\n});\n\ninterface ISetBotsOffset {\n  type: \"setBotsOffset\";\n  payload: number;\n}\n\nexport const setBotsOffset = (offset: number): ISetBotsOffset => ({\n  type: \"setBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetBotsFilters {\n  type: \"setBotsFilters\";\n  payload: IBotFilters;\n}\n\nexport const setBotsFilters = (botsFilter: IBotFilters): ISetBotsFilters => ({\n  type: \"setBotsFilters\",\n  payload: botsFilter,\n});\n\ninterface ISetBot {\n  type: \"setBot\";\n  payload: { botId: number; bot: IBot };\n}\n\nexport const setBot = (botId: number, bot: IBot): ISetBot => ({\n  type: \"setBot\",\n  payload: { botId, bot },\n});\n\nexport type BotsAction =\n  | ISetNewBotsList\n  | ISetHasMore\n  | IAddToBotsList\n  | ISetBotsOffset\n  | ISetBotsFilters\n  | ISetBot;\n","import { getBot, getBots, getBotStats } from \"../../utils/ApiUtils\";\nimport { getMaxUsage, getReturns } from \"../../utils/BotsUtils\";\nimport { IDealsState } from \"../deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../deals/DealsSelectors\";\nimport {\n  addToBotsList,\n  setBotsOffset,\n  setHasMore,\n  setNewBotsList,\n  setBot,\n} from \"./BotsActions\";\nimport { IBotsState } from \"./BotsReducer\";\n\nexport async function fetchBots(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  resetOffset: boolean = false,\n  customLimit?: number\n) {\n  botsDispatch(setHasMore(true));\n  const {\n    offset,\n    limit,\n    filters: { sorting, scope, type, account },\n  } = botsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    const data = await getBots(\n      offset,\n      offsetLimit,\n      sorting,\n      scope,\n      type,\n      account,\n      resetOffset\n    );\n    if (resetOffset) {\n      botsDispatch(setBotsOffset(offsetLimit));\n      botsDispatch(setNewBotsList(data));\n    } else {\n      botsDispatch(setBotsOffset(offset + offsetLimit));\n      botsDispatch(addToBotsList(data));\n    }\n    if (data.length < offsetLimit) {\n      botsDispatch(setHasMore(false));\n    }\n  } catch {\n    botsDispatch(setNewBotsList([]));\n    botsDispatch(setBotsOffset(offsetLimit));\n    botsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching bots list\",\n    });\n  }\n}\n\nexport async function fetchBot(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    const bot = await getBot(botId);\n    botsDispatch(setBot(botId, bot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching bot ${botId}`,\n    });\n  }\n}\n\nexport async function getMaxUsageEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number,\n  account: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"maxUsage\" in bots[botId])) {\n      const maxUsage = await getMaxUsage(botItem, account);\n      const bot = { ...botItem, maxUsage: maxUsage };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = { ...botItem, maxUsage: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching max usage for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getFundsLockedAndTodaysProfit(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"fundsLocked\" in bots[botId])) {\n      const {\n        profits_in_usd: { today_usd_profit, funds_locked_in_active_deals },\n      } = await getBotStats(botId);\n\n      const bot = {\n        ...botItem,\n        fundsLocked: funds_locked_in_active_deals,\n        todayUsdProfit: today_usd_profit,\n      };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = {\n      ...botItem,\n      fundsLocked: 0,\n      todayUsdProfit: 0,\n    };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching stats for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getReturnsEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  dealsState: IDealsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    const deals30daysForBot = selectAllDealsWithin30Days(dealsState, botId);\n    const maxUsage = botItem.maxUsage;\n    const bot = {\n      ...botItem,\n      returns: getReturns(maxUsage, deals30daysForBot),\n    };\n    botsDispatch(setBot(botItem.id, bot));\n  } catch {\n    const bot = { ...botItem, returns: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when getting returns for bot ${botItem.name}`,\n    });\n  }\n}\n","import { IDeal } from \"../../interfaces/Deal\";\n\ninterface IGetDealsList {\n  type: \"getDealsList\";\n  payload: { deals: Array<IDeal>; botId: number; periodInDays: number };\n}\n\nexport const getDealsList = (\n  deals: Array<IDeal>,\n  botId: number,\n  periodInDays: number\n): IGetDealsList => ({\n  type: \"getDealsList\",\n  payload: { deals, botId, periodInDays },\n});\n\ninterface ISetOffset {\n  type: \"setOffset\";\n  payload: { botId: number; offset: number };\n}\n\nexport const setOffset = (botId: number, offset: number): ISetOffset => ({\n  type: \"setOffset\",\n  payload: { botId, offset },\n});\n\ninterface IResetDeals {\n  type: \"resetDeals\";\n  payload: { botId: number };\n}\n\nexport const resetDeals = (botId: number): IResetDeals => ({\n  type: \"resetDeals\",\n  payload: { botId },\n});\n\nexport type DealsAction = IGetDealsList | ISetOffset | IResetDeals;\n","import { getDeals } from \"../../utils/ApiUtils\";\nimport { getAllDealsForOneBot } from \"../../utils/DealsUtils\";\nimport { getDealsList, resetDeals, setOffset } from \"./DealsActions\";\nimport { IDealsState } from \"./DealsReducer\";\nimport {\n  INFINITY_IN_DAYS,\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n} from \"./DealsSelectors\";\n\nexport async function fetchDealsForBotFor30Days(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    if (is30daysDealsLoaded(dealsState, botId)) {\n      return;\n    }\n    const data = await getAllDealsForOneBot(botId, 30);\n    dealsDispatch(getDealsList(data, botId, 30));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport async function fetchAllDealsForBot(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) {\n  try {\n    if (isAllDealsLoaded(dealsState, botId) && !reset) {\n      return;\n    }\n\n    if (reset) {\n      dealsDispatch(resetDeals(botId));\n    }\n\n    await fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botId\n    );\n    const data = await getAllDealsForOneBot(\n      botId,\n      INFINITY_IN_DAYS,\n      (offset: number) => {\n        dealsDispatch(setOffset(botId, offset));\n      }\n    );\n    dealsDispatch(getDealsList(data, botId, INFINITY_IN_DAYS));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport const getAllActiveDeals = async (errorsDispatch: any, botId: number) => {\n  try {\n    return await getDeals(botId, 0, 1000, \"active\", \"closed_at\");\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching active deals for bot ${botId}`,\n      });\n    }\n    return Promise.resolve([]);\n  }\n};\n","import React, { useEffect, useRef } from \"react\";\n\nexport function usePrevious(value: any) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","export const ProfitChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const AccumulativeChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const LeaderbordChartOptions = (text: string, labels: any) => ({\n  indexAxis: \"y\" as const,\n  scales: {\n    x: {\n      stacked: false,\n      beginAtZero: true,\n    },\n    y: {\n      stacked: true,\n      beginAtZero: true,\n      ticks: {\n        callback: (value: any) => {\n          return labels[value].length > 35\n            ? labels[value].slice(0, 33) + \"...\"\n            : labels[value];\n        },\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"y\",\n    },\n  },\n});\n\nexport const DealsCountBarChartOptions = (\n  text: string,\n  isWeekUnit: boolean = true\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: isWeekUnit ? \"week\" : \"month\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const HistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  // crossAlign: \"near\",\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        label: (tooltipItem: any) => {\n          const dataset = tooltipItem.dataset;\n          const total = dataset.data.reduce(function (\n            previousValue: any,\n            currentValue: any\n          ) {\n            return previousValue + currentValue;\n          });\n          const currentValue = dataset.data[tooltipItem.dataIndex];\n          const percentage = Math.floor((currentValue / total) * 100 + 0.5);\n          return ` ${currentValue} deals (${percentage}%)`;\n        },\n        title: (tooltipItem: any) => {\n          const label = parseInt(tooltipItem[0].label);\n          return `Duration from ${label - 1} to ${label} hours`;\n        },\n      },\n    },\n  },\n});\n","import React from \"react\";\nimport { Bar, Doughnut } from \"react-chartjs-2\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  DealsCountBarChartOptions,\n  HistogramChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  dealsStatusesCounts,\n  getDealsCountPerDay,\n  getDealsDurationHistogramData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsMainCharts.css\";\n\nexport const DCABotDetailsMainCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n}) => {\n  const countsValues = getDealsCountPerDay(deals, dateLabelsDays);\n  const dealsStatusData = dealsStatusesCounts(deals);\n  const dealsDurationHistogramData = getDealsDurationHistogramData(deals);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            DealsCountBarChartOptions(\n              \"Finished deals per day\",\n              dateLabelsDays.length < 70\n            ) as any\n          }\n          data={{\n            labels: dateLabelsDays,\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: countsValues,\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Doughnut\n          options={\n            {\n              aspectRatio: 1.7,\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"Finished deals by Status\",\n                },\n                tooltip: {\n                  callbacks: {\n                    label: (tooltipItem: any) => {\n                      const dataset = tooltipItem.dataset;\n                      const total = dataset.data.reduce(function (\n                        previousValue: any,\n                        currentValue: any\n                      ) {\n                        return currentValue\n                          ? previousValue + currentValue\n                          : previousValue;\n                      },\n                      0);\n                      const currentValue = dataset.data[tooltipItem.dataIndex];\n                      const percentage = Math.floor(\n                        (currentValue / total) * 100 + 0.5\n                      );\n                      const label = tooltipItem.label;\n\n                      return `${label}: ${currentValue} (${percentage}%)`;\n                    },\n                  },\n                },\n                legend: {\n                  labels: {\n                    filter: (legendItem: any, data: any) => {\n                      return data.datasets[0].data[legendItem.index];\n                    },\n                  },\n                },\n              },\n            } as any\n          }\n          width={300}\n          data={{\n            labels: dealsStatusData[0] as any,\n            datasets: [\n              {\n                data: dealsStatusData[1],\n                backgroundColor: [\n                  \"rgba(54, 162, 235, 0.2)\",\n                  \"rgba(255, 99, 132, 0.2)\",\n                  \"rgba(255, 206, 86, 0.2)\",\n                  \"rgba(75, 192, 192, 0.2)\",\n                  \"rgba(153, 102, 255, 0.2)\",\n                  \"rgba(255, 159, 64, 0.2)\",\n                  \"rgba(39, 47, 148, 0.2)\",\n                ],\n                borderColor: [\n                  \"rgba(54, 162, 235, 1)\",\n                  \"rgba(255, 99, 132, 1)\",\n                  \"rgba(255, 206, 86, 1)\",\n                  \"rgba(75, 192, 192, 1)\",\n                  \"rgba(153, 102, 255, 1)\",\n                  \"rgba(255, 159, 64, 1)\",\n                  \"rgba(39, 47, 148, 1)\",\n                ],\n                borderWidth: 1,\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            HistogramChartOptions(\n              \"Finished deals duration histogram, hours\",\n              \"Duration, hours\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsDurationHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsDurationHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneBotCurrencyLeaderbord,\n  getOneBotAccumulativeProfitsChartData,\n  getOneBotProfitsChartData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsCharts.css\";\n\nexport const DCABotDetailsProfitsCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n\n  useEffect(() => {\n    setAccumulativeProfitsData(getOneBotAccumulativeProfitsChartData(deals));\n    setProfitsData(getOneBotProfitsChartData(deals));\n    setPairsLeaderbordData(getOneBotCurrencyLeaderbord(deals));\n  }, [deals]);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={AccumulativeChartOptions(\"Accumulative Profit, $\") as any}\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: \"Accumulative Profit, $\",\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={ProfitChartOptions(\"Daily Profit, $\") as any}\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      {bot.type !== \"Bot::SingleBot\" && (\n        <div className=\"DCABotDetailsChartContainer\">\n          <Bar\n            options={\n              LeaderbordChartOptions(\n                \"Pairs leaderboard by profit\",\n                pairsLeaderbordData[0]\n              ) as any\n            }\n            data={{\n              labels: pairsLeaderbordData[0],\n              datasets: [\n                {\n                  label: \"Profit, $\",\n                  data: pairsLeaderbordData[1],\n                  borderColor: \"rgb(53, 162, 235)\",\n                  backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                },\n              ],\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  getDealAgeInDaysSinceOpened,\n  getLastNDays,\n} from \"../../../../utils/DealsUtils\";\nimport { DCABotDetailsMainCharts } from \"../DCABotDetailsMain/DCABotDetailsMainCharts\";\nimport { DCABotDetailsProfitsCharts } from \"../DCABotDetailsProfits/DCABotDetailsProfitsCharts\";\nimport \"./DCABotDetailsCharts.css\";\n\nexport const DCABotDetailsCharts = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  timeRangeValue,\n}: {\n  account: any;\n  bot: IBot;\n  timeRangeValue: string;\n  infoKey: string;\n  deals: IDeal[];\n}) => {\n  const [dateLabelsDays, setDateLabelsDays] = useState<string[]>([]);\n  useEffect(() => {\n    if (deals) {\n      if (timeRangeValue === \"allTime\") {\n        const oldestDealAgeInDaysSinceOpened =\n          deals.length > 0\n            ? Math.ceil(getDealAgeInDaysSinceOpened(deals.slice(-1).pop()))\n            : 0;\n        setDateLabelsDays(\n          getLastNDays(\n            oldestDealAgeInDaysSinceOpened > 30\n              ? oldestDealAgeInDaysSinceOpened\n              : 30\n          )\n        );\n      } else if (timeRangeValue === \"30d\") {\n        setDateLabelsDays(getLastNDays(30));\n      }\n    }\n  }, [deals]);\n  return (\n    <>\n      {deals && dateLabelsDays && bot && account && (\n        <div className=\"DCABotDetailsCharts\">\n          {infoKey === \"main\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"settings\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"profits\" && (\n            <DCABotDetailsProfitsCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\n\nimport \"./DCABotDetailsDealsTable.css\";\nimport { Badge, Modal, Pagination, Table, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport { getDeal } from \"../../../../utils/ApiUtils\";\n\nconst badgeVariant = {\n  Cancelled: \"secondary\",\n  StopLoss: \"danger\",\n  Failed: \"warning\",\n  Completed: \"success\",\n  \"Closed at Market Price\": \"dark\",\n  Liquidated: \"dark\",\n  Switched: \"secondary\",\n};\n\nexport const DCABotDetailsDealsTable = ({\n  bot,\n  deals,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"ID\",\n          accessor: \"id\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Pair\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.pair.split(\"_\").reverse().join(\"/\");\n          },\n          id: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: \"localized_status\",\n          Cell: ({ cell: { value } }: any) => (\n            // @ts-ignore\n            <Badge style={{ fontSize: \"12px\" }} bg={badgeVariant[value]}>\n              {value}\n            </Badge>\n          ),\n          disableSortBy: true,\n        },\n        {\n          Header: \"Start\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.created_at);\n          },\n          id: \"created_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"End\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.closed_at);\n          },\n          id: \"closed_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"Duration\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            let start = moment.utc(originalRow.created_at);\n            let end = originalRow.closed_at\n              ? moment.utc(originalRow.closed_at)\n              : moment.utc();\n            return end.diff(start);\n          },\n          id: \"duration\",\n          Cell: ({ cell: { value } }: any) => {\n            const duration = moment.duration(value);\n            const days = Math.floor(duration.asDays());\n            const daysFormatted = days ? `${days}d ` : \"\";\n\n            //Get Hours\n            const hours = duration.hours();\n            const hoursFormatted = `${hours}h `;\n\n            //Get Minutes\n            const minutes = duration.minutes();\n            const minutesFormatted = `${minutes}m`;\n\n            return `${daysFormatted} ${hoursFormatted} ${minutesFormatted}`;\n          },\n        },\n        {\n          Header: \"Avg. entry price\",\n          id: \"bought_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.bought_average_price\n              : originalRow.sold_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Close price\",\n          id: \"sold_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.sold_average_price\n              : originalRow.bought_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n            const amount =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_amount,\n                    currency: baseCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_amount,\n                    currency: baseCurrency,\n                  });\n            const volume =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_volume,\n                    currency: quoteCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_volume,\n                    currency: quoteCurrency,\n                  });\n            return `${amount} ${baseCurrency}!${volume} ${quoteCurrency}`;\n          },\n          id: \"volume\",\n          Cell: ({ cell: { value } }: any) => {\n            const values = value.split(\"!\");\n            return (\n              <>\n                <div>{values[0]}</div>\n                <div>{values[1]}</div>\n              </>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Filled SO\",\n          id: \"completed_safety_orders_count\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${originalRow.completed_safety_orders_count}${\n              originalRow.completed_manual_safety_orders_count\n                ? ` (+${originalRow.completed_manual_safety_orders_count})`\n                : \"\"\n            }`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, %\",\n          accessor: \"final_profit_percentage\",\n          Cell: ({ cell: { value } }: any) => `${value}%`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, $\",\n          accessor: \"usd_final_profit\",\n          sortType: (a: any, b: any) => {\n            a = Number(a.original.usd_final_profit);\n            b = Number(b.original.usd_final_profit);\n            return a > b ? 1 : -1;\n          },\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value);\n            return (\n              <Badge\n                style={{ fontSize: \"13px\" }}\n                bg={numberValue >= 0 ? \"success\" : \"danger\"}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency: \"USD\",\n                },\n                \"always\"\n              )} $`}</Badge>\n            );\n          },\n        },\n        {\n          Header: \"Profit in Base\",\n          id: \"profitBase\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.bought_amount) -\n              parseFloat(originalRow.sold_amount)\n            }!${originalRow.pair.split(\"_\")[1]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit in Quote\",\n          id: \"profitQuote\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.sold_volume) -\n              parseFloat(originalRow.bought_volume)\n            }!${originalRow.pair.split(\"_\")[0]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data: deals,\n      disableSortRemove: true,\n      autoResetPage: true,\n      autoResetSortBy: false,\n      initialState: { pageSize: 50, sortBy: [{ id: \"closed_at\", desc: true }] },\n    },\n    useSortBy,\n    usePagination\n  );\n  const [modalIsOpen, setModalIsOpen] = React.useState(false);\n  const [selectedDeal, setSelectedDeal] = React.useState(null as any);\n\n  return (\n    <div className=\"DCABotDetailsDealsTable\">\n      <DealModal\n        modalIsOpen={modalIsOpen}\n        setModalIsOpen={setModalIsOpen}\n        dealId={selectedDeal}\n      />\n      {pageCount > 1 && (\n        <TablePagination\n          pageIndex={pageIndex}\n          pageCount={pageCount}\n          gotoPage={gotoPage}\n          nextPage={nextPage}\n          previousPage={previousPage}\n        />\n      )}\n      <Table striped bordered {...getTableProps()} hover>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                {...row.getRowProps()}\n                onClick={() => {\n                  setSelectedDeal(row.original.id);\n                  setModalIsOpen(true);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nconst TablePagination = ({\n  pageIndex,\n  pageCount,\n  gotoPage,\n  nextPage,\n  previousPage,\n}: any) => {\n  const range = (start: number, end: number) =>\n    Array(end - start + 1)\n      .fill(0)\n      .map((_, idx) => start + idx);\n\n  const renderPaginationNumberItem = (page: any, pageIndex: any) => (\n    <Pagination.Item\n      active={page === pageIndex}\n      onClick={() => {\n        gotoPage(page);\n      }}\n      key={page}\n    >\n      {page + 1}\n    </Pagination.Item>\n  );\n\n  const renderPaginationBeginning = () => (\n    <>\n      <Pagination.First\n        onClick={() => {\n          gotoPage(0);\n        }}\n      />\n      <Pagination.Prev\n        onClick={() => {\n          previousPage();\n        }}\n      />\n      {pageIndex - 2 < 4 &&\n        renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n      {pageIndex - 1 < 4 &&\n        renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n    </>\n  );\n  const renderPaginationEnd = () => (\n    <>\n      <Pagination.Next\n        onClick={() => {\n          nextPage();\n        }}\n      />\n      <Pagination.Last\n        onClick={() => {\n          gotoPage(pageCount - 1);\n        }}\n      />\n    </>\n  );\n\n  return (\n    <>\n      {pageCount <= 16 && (\n        <Pagination>\n          {range(0, pageCount - 1).map((page) =>\n            renderPaginationNumberItem(page, pageIndex)\n          )}\n        </Pagination>\n      )}\n      {pageCount > 16 && (\n        <Pagination>\n          {pageIndex < 7 && (\n            <>\n              {range(0, 6).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n              {renderPaginationEnd()}\n            </>\n          )}\n\n          {pageIndex >= 7 && pageIndex <= pageCount - 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n              {renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n              <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\n              {renderPaginationNumberItem(pageIndex + 1, pageIndex)}\n              {renderPaginationNumberItem(pageIndex + 2, pageIndex)}\n              {renderPaginationEnd()}\n            </>\n          )}\n          {pageCount - pageIndex < 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {range(pageCount - 7, pageCount - 1).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n            </>\n          )}\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nconst DealModal = ({ modalIsOpen, setModalIsOpen, dealId }: any) => {\n  const [deal, setDeal] = React.useState(null as any);\n\n  useEffect(() => {\n    if (dealId) {\n      getDeal(dealId).then((dl) => {\n        setDeal(dl);\n      });\n    }\n  }, [dealId]);\n  return (\n    <>\n      {deal && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(false);\n          }}\n          scrollable\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{deal.id}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {deal.bot_events.length > 0 && (\n              <Table striped hover>\n                <thead>\n                  <tr>\n                    <th>Date/Time</th>\n                    <th>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {deal.bot_events.map((event: any) => (\n                    <tr key={event.created_at}>\n                      <td>\n                        {moment(event.created_at).format(\"D MMM, YYYY HH:mm\")}\n                      </td>\n                      <td>{event.message}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )}\n            {deal.bot_events.length === 0 && (\n              <blockquote className=\"blockquote mb-0\">\n                <p>\n                  “Nothing can last forever. There isn't any memory, no matter\n                  how intense, that doesn't fade out at last.”{\" \"}\n                </p>\n                <footer className=\"blockquote-footer\">Juan Rulfo</footer>\n              </blockquote>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                window.open(`https://3commas.io/deals/${dealId}`, \"_blank\");\n              }}\n            >\n              Open in 3commas\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getFundsLocked } from \"../../../../utils/BotsUtils\";\nimport {\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport {\n  getFundsLockedAndTodaysProfit,\n  getMaxUsageEffect,\n  getReturnsEffect,\n} from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { useNavigate } from \"react-router-dom\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport moment from \"moment\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TV\",\n  buy_or_strong_buy: \"Buy\",\n  strong_buy: \"Strong Buy\",\n  sell_or_strong_sell: \"Sell\",\n  strong_sell: \"Strong Sell\",\n  rsi: \"RSI\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nexport const getBotsStrategyName = (\n  strategiesState: any,\n  botsStrategy: string\n) => {\n  if (botsStrategy in strategyMap) {\n    return strategyMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [statsLoaded, setStatsLoaded] = useState(false);\n\n  const navigate = useNavigate();\n\n  const { deals } = dealsState;\n\n  useEffect(() => {\n    getFundsLockedAndTodaysProfit(\n      botsDispatch,\n      botsState,\n      errorsDispatch,\n      botItem.id\n    ).then(() => {\n      setStatsLoaded(true);\n    });\n  }, [botItem]);\n\n  useEffect(() => {\n    if (statsLoaded) {\n      getMaxUsageEffect(\n        botsDispatch,\n        botsState,\n        errorsDispatch,\n        botItem.id,\n        account\n      ).then();\n    }\n  }, [account, botItem, statsLoaded]);\n\n  useEffect(() => {\n    if (\n      botItem &&\n      !(\"returns\" in botItem) &&\n      \"maxUsage\" in botItem &&\n      is30daysDealsLoaded(dealsState, botItem.id)\n    ) {\n      getReturnsEffect(\n        botsDispatch,\n        botsState,\n        dealsState,\n        errorsDispatch,\n        botItem.id\n      );\n    }\n  }, [deals, botItem]);\n\n  const getReturns = async () => {\n    setDealsLimiter(Math.random());\n    fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botItem.id\n    );\n  };\n\n  const age = differenceInDays(moment(), moment(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy =\n    botItem.strategy_list.length === 1\n      ? getBotsStrategyName(strategiesState, botItem.strategy_list[0].strategy)\n      : \"Combined\";\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          {\"market_icon\" in account && (\n            <IconsSet\n              botType={botItem.type}\n              strategy={botItem.strategy}\n              botId={botItem.id}\n              marketIcon={account.market_icon}\n            />\n          )}\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={botItem.returns}\n              getReturns={getReturns}\n              maxUsage={botItem.maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>{account.name}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>{formatter.format(botItem.todayUsdProfit)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(botItem)\n                )}/${formatter.format(botItem.maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n          <div className=\"BotPreviewButtons\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                navigate({\n                  pathname: `/${botItem.id}`,\n                  search: window.location.search,\n                });\n              }}\n            >\n              {`View`}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, getReturns }: any) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const returnsCalculated = returns || returns === 0;\n\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      delay={{ show: 100, hide: 200 }}\n      overlay={<Tooltip>30 days profit / Max usage</Tooltip>}\n    >\n      <div className=\"BotReturnsContainer\">\n        {returnsCalculated && (\n          <div\n            className=\"BotReturnsValue\"\n            style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${formatter.format(returns || 0)}`}\n          </div>\n        )}\n        <div className=\"BotReturnsLabel\">Returns (30d)</div>\n        {!returnsCalculated && (\n          <Button\n            onClick={() => {\n              getReturns();\n            }}\n            variant=\"link\"\n            size=\"sm\"\n            active\n          >\n            Calculate\n          </Button>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ErrorsContext, StrategiesContext } from \"../../../../App\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { getAllActiveDeals } from \"../../../../state/deals/DealsEffects\";\nimport {\n  getCurrencyFormat,\n  getFundsLockedInBotCurrency,\n  getMaxUsageInBotCurrency,\n  getReservedFundsInBotCurrency,\n} from \"../../../../utils/BotsUtils\";\nimport { getAverageDealDuration } from \"../../../../utils/DealsUtils\";\nimport { getBotsStrategyName } from \"../../BotsList/BotPreview/BotPreview\";\nimport \"./DCABotDetailsMainInfo.css\";\n\nexport const DCABotDetailsMainInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const { strategiesState } = useContext(StrategiesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [fundsLocked, setFundsLocked] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [fundsLockedShare, setFundsLockedShare] = useState(0);\n\n  const [maxUsage, setMaxUsage] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [reservedFunds, setReservedFunds] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n  });\n\n  const botPairs =\n    bot.pairs.length === 1\n      ? bot.pairs[0].split(\"_\").reverse().join(\"/\")\n      : `${bot.pairs.length} pairs`;\n  const botMarket =\n    bot.pairs.length === 1 ? \"\" : `${bot.pairs[0].split(\"_\")[0]} market`;\n\n  const startCondition = bot.strategy_list.map((strategy: any) => (\n    <div key={`${Math.random()}`}>{`${getBotsStrategyName(\n      strategiesState,\n      strategy.strategy\n    )}${\n      strategy.options.type\n        ? `, ${getBotsStrategyName(strategiesState, strategy.options.type)}`\n        : ``\n    }${strategy.options.percent ? `, ${strategy.options.percent}%` : ``}${\n      strategy.options.time ? `, ${strategy.options.time}` : ``\n    }${strategy.options.points ? `, ${strategy.options.points}` : ``}`}</div>\n  ));\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      getMaxUsageInBotCurrency(bot, account).then((mxUsg) => {\n        setMaxUsage(mxUsg);\n      });\n\n      getAllActiveDeals(errorsDispatch, bot.id).then((activeDeals: IDeal[]) => {\n        setReservedFunds(\n          getReservedFundsInBotCurrency(activeDeals, bot, account)\n        );\n        setFundsLocked(getFundsLockedInBotCurrency(activeDeals, bot, account));\n      });\n    }\n  }, [bot, account]);\n\n  useEffect(() => {\n    if (maxUsage.value && fundsLocked.value) {\n      setFundsLockedShare(fundsLocked.value / maxUsage.value);\n    }\n  }, [maxUsage, fundsLocked]);\n\n  const avgDealDuration = getAverageDealDuration(deals);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Account</div>\n        <div className=\"BotInfoTableRow\">{account.name}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Bot pairs</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{botPairs}</div>\n          <div>{botMarket}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Deal start condition</div>\n        <div className=\"BotInfoTableRow\">{startCondition}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Active deals/Max</div>\n        <div className=\"BotInfoTableRow\">{`${bot.active_deals_count}/${bot.max_active_deals}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Funds used</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{`${getCurrencyFormat(fundsLocked)} ${\n            fundsLocked.currency\n          }`}</div>\n          <div style={{ fontSize: \"10px\" }}>{`${percentFormatter.format(\n            fundsLockedShare\n          )} of max usage`}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max usage</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(maxUsage)} ${\n          maxUsage.currency\n        }`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Reserved funds</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(\n          reservedFunds\n        )} ${maxUsage.currency}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total finished deals</div>\n        <div className=\"BotInfoTableRow\">{deals.length}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Avg deal duration</div>\n        <div className=\"BotInfoTableRow\">{`${avgDealDuration} hrs`}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { getCurrencyFormat, getReturns } from \"../../../../utils/BotsUtils\";\nimport {\n  getAverageDailyProfit,\n  getAverageProfitFromDeal,\n  getAverageTp,\n  getTotalProfitUsd,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsInfo.css\";\n\nexport const DCABotDetailsProfitsInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    signDisplay: \"always\",\n  });\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const [averageTp, setAverageTp] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageProfitFromDeal, setAverageProfitFromDeal] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageDailyProfit, setAverageDailyProfit] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [returns, setReturns] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [totalProfitUsd, setTotalProfitUsd] = useState(0);\n\n  useEffect(() => {\n    setAverageTp(getAverageTp(deals));\n    setAverageProfitFromDeal(getAverageProfitFromDeal(deals));\n    setAverageDailyProfit(getAverageDailyProfit(bot.created_at, deals));\n    if (bot.maxUsage) {\n      setReturns({ value: getReturns(bot.maxUsage, deals), currency: \"%\" });\n    }\n    setTotalProfitUsd(getTotalProfitUsd(deals));\n  }, [deals, bot]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Today's profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            (bot.todayUsdProfit || 0) < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(bot.todayUsdProfit || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            totalProfitUsd < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(totalProfitUsd)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Current uPnL</div>\n        <div\n          className={`BotInfoTableRow ${\n            parseFloat(bot.active_deals_usd_profit) < 0\n              ? \"showRed\"\n              : \"showGreen\"\n          }`}\n        >\n          {formatter.format(parseFloat(bot.active_deals_usd_profit))}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average TP, %</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageTp.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {`${getCurrencyFormat(averageTp)}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average profit from deal</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageProfitFromDeal.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageProfitFromDeal.value || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average daily profit</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageDailyProfit.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageDailyProfit.value)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Returns</div>\n        <div\n          className={`BotInfoTableRow ${\n            returns.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {percentFormatter.format(returns.value)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport {\n  getBaseOrderSize,\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSettingsInfo.css\";\n\nexport const DCABotDetailsSettingsInfo = ({\n  account,\n  bot,\n}: {\n  account: any;\n  bot: IBot;\n}) => {\n  const [baseOrderSize, setBaseOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setBaseOrderSize(getBaseOrderSize(bot, account));\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n    }\n  }, [bot, account]);\n\n  const leverage = bot.leverage_custom_value\n    ? parseInt(bot.leverage_custom_value)\n    : \"\";\n  const leverageType =\n    bot.leverage_type !== \"not_specified\" ? bot.leverage_type : \"\";\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Profit currency</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.profit_currency === \"quote_currency\" ? \"Quote\" : \"Base\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Take profit (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            {`${getCurrencyFormat({\n              value: parseFloat(bot.take_profit),\n              currency: \"%\",\n            })}%`}\n          </div>\n          <div>\n            {bot.take_profit_type === \"total\"\n              ? \"(from total volume)\"\n              : \"(from base volume)\"}\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Trailing</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.trailing_enabled &&\n            `${getCurrencyFormat({\n              value: parseFloat(bot.trailing_deviation),\n              currency: \"%\",\n            })}%`}\n          {!bot.trailing_enabled && \"OFF\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Stop loss (timeout)</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat({\n          value: parseFloat(bot.stop_loss_percentage),\n          currency: \"%\",\n        })}% (${bot.stop_loss_timeout_in_seconds} s)`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Base order size (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            <div>{`${getCurrencyFormat(baseOrderSize)} ${\n              baseOrderSize.currency\n            }${\n              baseOrderSize.additionalCurrency\n                ? ` (${baseOrderSize.additionalCurrency})`\n                : \"\"\n            }`}</div>\n            <div>{`(${bot.start_order_type})`}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Leverage (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{leverage || \"0\"}</div>\n          <div>{leverageType}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max safety trades (active)</div>\n        <div className=\"BotInfoTableRow\">{`${bot.max_safety_orders} (${bot.active_safety_orders_count})`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Price devition to open SO</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: parseFloat(bot.safety_order_step_percentage),\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO size</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat(safetyOrderSize)} ${safetyOrderSize.currency}${\n            safetyOrderSize.additionalCurrency\n              ? ` (${safetyOrderSize.additionalCurrency})`\n              : \"\"\n          }`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO volume scale</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.martingale_volume_coefficient}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO step scale</div>\n        <div className=\"BotInfoTableRow\">{bot.martingale_step_coefficient}</div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { BotInfo, IconsSet } from \"../../BotsList/BotPreview/BotPreview\";\nimport { DCABotDetailsMainInfo } from \"../DCABotDetailsMain/DCABotDetailsMainInfo\";\nimport { DCABotDetailsProfitsInfo } from \"../DCABotDetailsProfits/DCABotDetailsProfitsInfo\";\nimport { DCABotDetailsSettingsInfo } from \"../DCABotDetailsSettings/DCABotDetailsSettingsInfo\";\nimport moment from \"moment\";\nimport \"./DCABotDetailsInfo.css\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\n\nexport const DCABotDetailsInfo = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  setInfoKey,\n  timeRangeValue,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  account: any;\n  infoKey: string;\n  setInfoKey: any;\n  timeRangeValue: string;\n}) => {\n  const age = differenceInDays(moment(), moment(bot.created_at));\n  return (\n    <div className=\"DCABotDetailsInfo\">\n      <div className=\"DCABotDetailsInfoLogo\">\n        <IconsSet\n          botType={bot.type}\n          strategy={bot.strategy}\n          botId={bot.id}\n          marketIcon={account.market_icon}\n        ></IconsSet>\n        <BotInfo\n          strategy={bot.strategy}\n          age={age}\n          is_enabled={bot.is_enabled}\n        />\n      </div>\n      <div className=\"DCABotDetailsInfoTable\">\n        <Tabs activeKey={infoKey} onSelect={(k) => setInfoKey(k)}>\n          <Tab eventKey=\"main\" title=\"Main\" tabClassName=\"InfoTab\">\n            <DCABotDetailsMainInfo account={account} bot={bot} deals={deals} />\n          </Tab>\n          <Tab eventKey=\"settings\" title=\"Settings\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSettingsInfo account={account} bot={bot} />\n          </Tab>\n          <Tab eventKey=\"profits\" title=\"Profits\" tabClassName=\"InfoTab\">\n            <DCABotDetailsProfitsInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n            />\n          </Tab>\n          {/* <Tab eventKey=\"safeties\" title=\"Safeties\" disabled></Tab>\n          <Tab eventKey=\"insights\" title=\"Insights\" disabled></Tab> */}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n","import moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  ProgressBar,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  AccountsContext,\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n} from \"../../../App\";\nimport { IBot } from \"../../../interfaces/Bot\";\nimport { IDeal } from \"../../../interfaces/Deal\";\nimport { fetchBot } from \"../../../state/bots/BotsEffects\";\nimport { fetchAllDealsForBot } from \"../../../state/deals/DealsEffects\";\nimport {\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n  selectAllDeals,\n  selectAllDealsWithin30Days,\n} from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\nimport \"./DCABotDetails.css\";\nimport { DCABotDetailsCharts } from \"./DCABotDetailsCharts/DCABotDetailsCharts\";\nimport { DCABotDetailsDealsTable } from \"./DCABotDetailsDealsTable/DCABotDetailsDealsTable\";\nimport { DCABotDetailsInfo } from \"./DCABotDetailsInfo/DCABotDetailsInfo\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst statusFilterOptions: any = [\n  { value: \"all\", label: \"All\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"StopLoss\", label: \"StopLoss\" },\n  { value: \"Failed\", label: \"Failed\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Closed at Market Price\", label: \"Closed at Market Price\" },\n  { value: \"Liquidated\", label: \"Liquidated\" },\n  { value: \"Switched\", label: \"Switched\" },\n];\n\nconst filterByStatus = (deals: IDeal[], status: string) => {\n  return status === \"all\"\n    ? deals\n    : deals.filter((deal) => deal.localized_status === status);\n};\n\nconst filterByPair = (deals: IDeal[], pair: string) => {\n  return pair === \"all\" ? deals : deals.filter((deal) => deal.pair === pair);\n};\n\nconst filterFrom = (deals: IDeal[], dateFrom: any) => {\n  return !dateFrom ||\n    moment(\"01-04-2018\", \"MM-DD-YYYY\").isAfter(dateFrom, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateFrom, \"day\") ||\n          moment(deal.closed_at).isAfter(dateFrom)\n      );\n};\n\nconst filterTo = (deals: IDeal[], dateTo: any) => {\n  return !dateTo || moment().isSame(dateTo, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateTo, \"day\") ||\n          moment(deal.closed_at).isBefore(dateTo)\n      );\n};\n\nexport const DCABotDetails = () => {\n  let params = useParams();\n  let navigate = useNavigate();\n\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const {\n    botsState: { bots },\n  } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n  const [botId, setBotId] = useState(NaN);\n  const previousBotId = usePrevious(botId);\n  const [bot, setBot] = useState<IBot | null>(null);\n  const [botsDeals, setBotsDeals] = useState<IDeal[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(false);\n  const [isAllDataLoading, setIsAllDataLoading] = useState(false);\n  const [account, setAccount] = useState({});\n  const [infoKey, setInfoKey] = useState(\"main\");\n  const [percentLoadedDeals, setPercentLoadedDeals] = useState(0);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [pairFilter, setPairFilter] = useState(\"all\");\n  const [pairFilterOptions, setPairFilterOptions] = useState([] as any);\n  const [fromFilter, setFromFilter] = useState(new Date(\"2018-04-02\"));\n  const [toFilter, setToFilter] = useState(new Date());\n\n  const clearFilters = () => {\n    setStatusFilter(\"all\");\n    setPairFilter(\"all\");\n    setFromFilter(new Date(\"2018-04-02\"));\n    setToFilter(new Date());\n  };\n\n  const timeRangeRadios = [\n    { name: \"30 days\", value: \"30d\" },\n    { name: \"All time\", value: \"allTime\" },\n  ];\n\n  const getAccountById = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const refreshData = () => {\n    setDealsLimiter(Math.random());\n    fetchBot(botsDispatch, botsState, errorsDispatch, botId);\n    fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId, true);\n  };\n\n  useEffect(() => {\n    if (params.botId) {\n      setBotId(parseInt(params.botId));\n    }\n  }, [params]);\n\n  useEffect(() => {\n    setDealsLimiter(Math.random());\n    if (botId && !previousBotId) {\n      fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId);\n    }\n  }, [botId]);\n\n  useEffect(() => {\n    if (bot && accounts.length > 0) {\n      setAccount(getAccountById(bot.account_id));\n    }\n  }, [bot, accounts]);\n\n  useEffect(() => {\n    if (botId) {\n      setBot(bots[botId]);\n    }\n  }, [botId, bots]);\n\n  useEffect(() => {\n    if (botId) {\n      if (timeRangeValue === \"30d\") {\n        setIsDataLoading(!is30daysDealsLoaded(dealsState, botId));\n      } else if (timeRangeValue === \"allTime\") {\n        setIsDataLoading(!isAllDealsLoaded(dealsState, botId));\n      }\n      setIsAllDataLoading(!isAllDealsLoaded(dealsState, botId));\n    }\n  }, [dealsState, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      clearFilters();\n      setBotsDeals(deals);\n    }\n  }, [isDataLoading, isAllDataLoading, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      deals = filterByPair(deals, pairFilter);\n      deals = filterByStatus(deals, statusFilter);\n      deals = filterTo(deals, toFilter);\n      deals = filterFrom(deals, fromFilter);\n      setBotsDeals(deals);\n    }\n  }, [pairFilter, statusFilter, fromFilter, toFilter]);\n\n  useEffect(() => {\n    if (\n      botId &&\n      bot &&\n      dealsState.deals[botId] &&\n      dealsState.deals[botId].offset\n    ) {\n      const loadedDeals = dealsState.deals[botId].offset || 0;\n      setPercentLoadedDeals(\n        Math.ceil((loadedDeals * 100) / parseFloat(bot.finished_deals_count))\n      );\n    }\n  }, [dealsState, botId, bot]);\n\n  useEffect(() => {\n    if (bot) {\n      setPairFilterOptions([\n        { value: \"all\", label: \"All\" },\n        ...bot.pairs.map((pair) => ({\n          value: pair,\n          label: pair.split(\"_\").reverse().join(\"/\"),\n        })),\n      ]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    return () => {\n      // reset limiter everytime to stop all the jobs\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  return (\n    <div className=\"DCABotDetails\">\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        className=\"DCABotDetailsGetBackButton\"\n        onClick={() => {\n          navigate(-1);\n        }}\n      >\n        {`< Back to bots list`}\n      </Button>\n      {!isAllDataLoading && (\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            refreshData();\n          }}\n        >\n          {`Refresh data`}\n        </Button>\n      )}\n      {isDataLoading && !percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar now={100} animated className=\"BotDetailsProgressBar\" />\n          </div>\n        </>\n      )}\n      {isDataLoading && !!percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar\n              now={percentLoadedDeals}\n              label={`${percentLoadedDeals}%`}\n              className=\"BotDetailsProgressBar\"\n            />\n          </div>\n        </>\n      )}\n      {!isDataLoading && bot && account && (\n        <>\n          <DCABotDetailsCharts\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          <div className=\"BotDetailsControlsContainer\">\n            <div className=\"BotDetailsControl\">\n              <ButtonGroup>\n                {timeRangeRadios.map((radio, idx) => (\n                  <ToggleButton\n                    key={idx}\n                    id={`radio-${idx}`}\n                    type=\"radio\"\n                    variant=\"outline-primary\"\n                    name=\"radio\"\n                    value={radio.value}\n                    checked={timeRangeValue === radio.value}\n                    onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                  >\n                    {radio.name}\n                  </ToggleButton>\n                ))}\n              </ButtonGroup>\n            </div>\n            <div className=\"BotDetailsControl\">\n              <div className=\"BotDetailsFilterTitle\">Status:</div>\n              <Select\n                onChange={(option: any): void => {\n                  setStatusFilter(option.value);\n                }}\n                value={\n                  statusFilterOptions.find(\n                    (option: any) => option.value === statusFilter\n                  ) as any\n                }\n                className=\"BotDetailsStatusFilter\"\n                theme={(theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary25: \"#00a59a\",\n                    primary: \"#00a59a\",\n                  },\n                })}\n                options={statusFilterOptions as any}\n              />\n            </div>\n            {bot && bot.pairs.length > 1 && (\n              <div className=\"BotDetailsControl\">\n                <div className=\"BotDetailsFilterTitle\">Pair:</div>\n                <Select\n                  onChange={(option: any): void => {\n                    setPairFilter(option.value);\n                  }}\n                  value={\n                    pairFilterOptions.find(\n                      (option: any) => option.value === pairFilter\n                    ) as any\n                  }\n                  className=\"BotDetailsPairFilter\"\n                  options={pairFilterOptions as any}\n                  theme={(theme) => ({\n                    ...theme,\n                    colors: {\n                      ...theme.colors,\n                      primary25: \"#00a59a\",\n                      primary: \"#00a59a\",\n                    },\n                  })}\n                />\n              </div>\n            )}\n            {timeRangeValue === \"allTime\" && (\n              <>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">From:</div>\n                  <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={fromFilter}\n                    onChange={(date) => {\n                      setFromFilter(date as any);\n                    }}\n                    selectsStart\n                    startDate={fromFilter}\n                    endDate={toFilter}\n                    className=\"BotDetailsDateFilter\"\n                    strictParsing\n                  />\n                </div>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">To:</div>\n                  <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={toFilter}\n                    onChange={(date) => setToFilter(date as any)}\n                    selectsEnd\n                    startDate={fromFilter}\n                    endDate={toFilter}\n                    minDate={fromFilter}\n                    className=\"BotDetailsDateFilter\"\n                    strictParsing\n                  />\n                </div>\n              </>\n            )}\n            <div className=\"BotDetailsControl\">\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  clearFilters();\n                }}\n              >\n                {`Clear filters`}\n              </Button>\n            </div>\n          </div>\n          <div className=\"DCABotInfoGroup\">\n            <div className=\"DCABotName\">{bot.name}</div>\n            <div className=\"DCABotId\">{`(Bot ID: ${bot.id})`}</div>\n            <div className=\"DCABotLinkTo3Commas\">\n              <Button\n                onClick={() => {\n                  window.open(`https://3commas.io/bots/${botId}`, \"_blank\");\n                }}\n                variant=\"link\"\n                size=\"sm\"\n                active\n              >\n                Open in 3Commas\n              </Button>\n            </div>\n          </div>\n          <DCABotDetailsInfo\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            setInfoKey={setInfoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          {botsDeals.length > 0 && (\n            <DCABotDetailsDealsTable bot={bot} deals={botsDeals} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, BotsContext } from \"../../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\nimport { setBotsFilters } from \"../../../state/bots/BotsActions\";\n\nconst BotsFilters = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const { filters } = botsState;\n\n  const updateFilter = async (filterItem: any) => {\n    botsDispatch(\n      setBotsFilters({\n        ...botsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accounts.map((account: any) => ({\n      value: account.id,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${account.market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{account.name}</span>\n        </div>\n      ),\n      label_id: account.name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ account: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filters.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ scope: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filters.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ type: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filters.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ sorting: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filters.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { BotsContext, DealsContext, ErrorsContext } from \"../../../../App\";\nimport { fetchBots } from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport \"./BotsListCharts.css\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  calculateProfitPerDayForListOfBots,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"../../../../utils/DealsUtils\";\nimport { getBotsLeaderboardChartData } from \"../../../../utils/BotsUtils\";\n\nconst BotsListCharts = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { deals } = dealsState;\n  const { list, hasMore, offset, bots } = botsState;\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [dealsLoaded, setDealsLoaded] = useState(false);\n  const [botsLoaded, setBotsLoaded] = useState(false);\n\n  const [numberHandled, setNumberHandled] = useState(0);\n  const [profitsChartData, setProfitsChartData] = useState<any>([[], []]);\n  const [accumulativeProfitsChartData, setAccumulativeProfitsChartData] =\n    useState<any>([[], []]);\n  const [botsLeaderboardChartData, setBotsLeaderboardChartData] = useState<any>(\n    [[], [], []]\n  );\n\n  //first get all bots\n  const getBotsList = async () => {\n    if (hasMore && offset !== 0) {\n      await fetchBots(botsDispatch, botsState, errorsDispatch, false, 100);\n    }\n  };\n\n  useEffect(() => {\n    getBotsList().then(() => {\n      if (!hasMore) {\n        setBotsLoaded(true);\n      }\n    });\n  }, [offset]);\n\n  // get deals\n  const getBoatsDeals = async () => {\n    setDealsLimiter(Math.random());\n\n    for (const botId of list) {\n      if (!is30daysDealsLoaded(dealsState, botId)) {\n        await fetchDealsForBotFor30Days(\n          dealsState,\n          dealsDispatch,\n          errorsDispatch,\n          botId\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (botsLoaded) {\n      getBoatsDeals().then(() => {\n        setDealsLoaded(true);\n      });\n    }\n  }, [botsLoaded]);\n\n  // then calculate data for charts\n  useEffect(() => {\n    if (dealsLoaded) {\n      const profitsObject = calculateProfitPerDayForListOfBots(\n        dealsState,\n        list\n      );\n      setProfitsChartData(getProfitChartData(profitsObject));\n      setAccumulativeProfitsChartData(\n        getAccumulativeProfitChartData(profitsObject)\n      );\n      setBotsLeaderboardChartData(getBotsLeaderboardChartData(botsState));\n    }\n  }, [dealsLoaded, bots]);\n\n  // reset limiter everytime to stop all the jobs\n  useEffect(() => {\n    return () => {\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  // update data for loader\n  useEffect(() => {\n    const botsWithLoadedDeals = list.filter((botId: number) =>\n      is30daysDealsLoaded(dealsState, botId)\n    );\n    setNumberHandled((botsWithLoadedDeals.length / list.length) * 100);\n  }, [deals]);\n\n  return (\n    <div className=\"BotsListCharts\">\n      {!dealsLoaded && (\n        <div className=\"ProgressBar\">\n          {!botsLoaded ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <ProgressBar\n              now={Math.ceil(numberHandled)}\n              label={`${Math.ceil(numberHandled)}%`}\n            />\n          )}\n        </div>\n      )}\n      {dealsLoaded && (\n        <>\n          <div className=\"ChartContainer\">\n            <Line\n              options={\n                AccumulativeChartOptions(\n                  \"Total Accumulative Profit (30 days), $\"\n                ) as any\n              }\n              data={{\n                labels: accumulativeProfitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Accumulative Profit, $\",\n                    data: accumulativeProfitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    fill: { value: 0 },\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={ProfitChartOptions(\"Total Profit (30 days), $\") as any}\n              data={{\n                labels: profitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Profit, $\",\n                    data: profitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={\n                LeaderbordChartOptions(\n                  \"Funds locked/Max usage, $\",\n                  botsLeaderboardChartData[0]\n                ) as any\n              }\n              data={{\n                labels: botsLeaderboardChartData[0],\n                datasets: [\n                  {\n                    label: \"Funds locked, $\",\n                    data: botsLeaderboardChartData[1],\n                    borderColor: \"rgb(255, 99, 132)\",\n                    backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                  },\n                  {\n                    label: \"Max usage, $\",\n                    data: botsLeaderboardChartData[2],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BotsListCharts;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  BotsContext,\n  DealsContext,\n} from \"../../../App\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { fetchBots } from \"../../../state/bots/BotsEffects\";\nimport BotsListCharts from \"./BotsListCharts/BotsListCharts\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\n\nconst haveAllBotsDealsFor30Days = (botsList: any, deals: any) =>\n  botsList.every((botId: any) => botId in deals);\n\nexport const BotsList = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    dealsState: { deals },\n  } = useContext(DealsContext);\n  const { list, hasMore, filters, bots } = botsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [showCharts, setShowCharts] = useState(false);\n\n  const getAccountByBotId = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const previousFilters = usePrevious(filters);\n\n  useEffect(() => {\n    if (!previousFilters && list.length) {\n      setShowCharts(haveAllBotsDealsFor30Days(list, deals));\n    } else {\n      setShowCharts(false);\n      fetchBots(botsDispatch, botsState, errorsDispatch, true).then();\n    }\n  }, [filters]);\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={list.length}\n      next={async () => {\n        if (list.length) {\n          await fetchBots(botsDispatch, botsState, errorsDispatch, false);\n        }\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      {showCharts ? (\n        <BotsListCharts />\n      ) : (\n        <div className=\"ShowChartsButtonContainer\">\n          <Button\n            className=\"ShowChartsButton\"\n            onClick={() => {\n              setShowCharts(true);\n            }}\n          >\n            Calculate profits\n          </Button>\n        </div>\n      )}\n      <div className=\"BotsList\">\n        {accounts.length > 0 &&\n          list.map((botId: number) => (\n            <BotPreview\n              botItem={bots[botId]}\n              key={botId}\n              account={getAccountByBotId(bots[botId].account_id)}\n            />\n          ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React from \"react\";\nimport BotsFilters from \"./BotsFilters/BotsFilters\";\nimport { BotsList } from \"./BotsList/BotsList\";\nimport \"./DCABots.css\";\n\nexport const DCABots = () => (\n  <>\n    <BotsFilters />\n    <BotsList />\n  </>\n);\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { IGridBot } from \"../interfaces/GridBot\";\nimport {\n  differenceInDays,\n  differenceInHours,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\n\nconst cryptoCoins: any = {\n  BTC: \"bitcoin\",\n  ETH: \"ethereum\",\n  BNB: \"binancecoin\",\n  USDT: \"tether\",\n  USDC: \"usd-coin\",\n  XRP: \"ripple\",\n  TRX: \"tron\",\n  BUSD: \"binance-usd\",\n  DOGE: \"dogecoin\",\n};\n\nexport const getInitialInvestment = async (gridBot: IGridBot) => {\n  const startPrice = parseFloat(gridBot.start_price);\n  const quantityPerGrid = parseFloat(gridBot.quantity_per_grid);\n\n  const pureInitialGrids = gridBot.grid_lines\n    .slice()\n    .sort((a: any, b: any) => {\n      return (\n        Math.abs(startPrice - parseFloat(a.price)) -\n        Math.abs(startPrice - parseFloat(b.price))\n      );\n    })\n    .slice();\n\n  pureInitialGrids.shift();\n\n  const baseInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) > startPrice)\n      .map((gridLine: any) => quantityPerGrid)\n  );\n\n  const quoteInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) < startPrice)\n      .map((gridLine: any) => parseFloat(gridLine.price) * quantityPerGrid)\n  );\n\n  const allInQuote = quoteInvestment + baseInvestment * startPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const createdOnDay = moment.utc(gridBot.updated_at);\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins) {\n    const marketData: any = await fetch(\n      `https://api.coingecko.com/api/v3/coins/${\n        cryptoCoins[quoteCurrency]\n      }/history?date=${createdOnDay.format(\"DD-MM-YYYY\")}&localization=false`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * marketData.market_data.current_price.usd;\n  } else {\n    if (moment().utc().diff(createdOnDay, \"days\") < 366) {\n      const marketData: any = await fetch(\n        `https://free.currconv.com/api/v7/convert?q=${quoteCurrency}_USD&compact=ultra&date=${createdOnDay.format(\n          \"YYYY-MM-DD\"\n        )}&apiKey=e4dcebf8eb9df2180846`\n      ).then((response: any) => response.json());\n\n      allInUsd =\n        allInQuote *\n        marketData[`${quoteCurrency}_USD`][createdOnDay.format(\"YYYY-MM-DD\")];\n    }\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nexport const getCurrentInvestment = async (gridBot: IGridBot) => {\n  const currentPrice = parseFloat(gridBot.current_price);\n\n  const baseInvestment = parseFloat(gridBot.investment_base_currency);\n\n  const quoteInvestment = parseFloat(gridBot.investment_quote_currency);\n\n  const allInQuote = quoteInvestment + baseInvestment * currentPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins || quoteCurrency === \"EUR\") {\n    const marketData: any = await fetch(\n      `https://api.3commas.io/public/api/ver1/accounts/currency_rates?market_code=binance&pair=USDT_${quoteCurrency}`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * parseFloat(marketData.last);\n  } else {\n    const marketData: any = await fetch(\n      `https://api.3commas.io/public/api/ver1/accounts/currency_rates?market_code=binance&pair=${quoteCurrency}_USDT`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote / parseFloat(marketData.last);\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nconst hoursWithin30Days = 24 * 30;\n\nexport const getProfitAgeInHours = (profit: any) =>\n  differenceInHours(moment(), moment(profit.created_at));\n\nexport const getProfitsWithin30days = (profits: any) =>\n  profits.filter(\n    (profit: any) => getProfitAgeInHours(profit) <= hoursWithin30Days\n  );\n\nexport const getMarketOrderAgeInHours = (marketOrder: any) =>\n  differenceInHours(moment(), moment(marketOrder.created_at));\n\nexport const getMarketOrdersWithin30days = (marketOrders: any) =>\n  marketOrders.grid_lines_orders.filter(\n    (marketOrder: any) =>\n      getMarketOrderAgeInHours(marketOrder) <= hoursWithin30Days\n  );\n\nexport const getObjectOfProfitPerDay = (\n  profits: Array<any>,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const dateStringProfits = (item: any) =>\n    moment(item.created_at).format(\"YYYY-MM-DD\");\n  let resultProfits = _.groupBy(profits, dateStringProfits);\n\n  const dateStringMarketOrders = (item: any) =>\n    moment(item.updated_at).format(\"YYYY-MM-DD\");\n  let resultMarketOrders = _.groupBy(marketOrders, dateStringMarketOrders);\n\n  const objectProfits = _.mapValues(resultProfits, (profits: Array<any>) =>\n    _.sum(profits.map((profit: any) => parseFloat(profit.profit)))\n  );\n\n  const objectMarketOrders = _.mapValues(\n    resultMarketOrders,\n    (marketOrders: Array<any>) =>\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01 *\n      -1\n  );\n\n  return _.mergeWith({}, objectProfits, objectMarketOrders, _.add);\n};\n\nexport const getOneGridBotAccumulativeProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getAccumulativeProfitChartData(botsProfits, difference);\n};\n\nexport const getOneGridBotProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getProfitChartData(botsProfits, difference);\n};\n","import { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\n\ninterface ISetNewGridBotsList {\n  type: \"setNewGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const setNewGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): ISetNewGridBotsList => ({\n  type: \"setNewGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToGridBotsList {\n  type: \"addToGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const addToGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): IAddToGridBotsList => ({\n  type: \"addToGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetGridBotsOffset {\n  type: \"setGridBotsOffset\";\n  payload: number;\n}\n\nexport const setGridBotsOffset = (offset: number): ISetGridBotsOffset => ({\n  type: \"setGridBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetGridBotsFilters {\n  type: \"setGridBotsFilters\";\n  payload: IGridBotFilters;\n}\n\nexport const setGridBotsFilters = (\n  gridBotsFilter: IGridBotFilters\n): ISetGridBotsFilters => ({\n  type: \"setGridBotsFilters\",\n  payload: gridBotsFilter,\n});\n\ninterface ISetGridBot {\n  type: \"setGridBot\";\n  payload: { gridBotId: number; gridBot: IGridBot };\n}\n\nexport const setGridBot = (\n  gridBotId: number,\n  gridBot: IGridBot\n): ISetGridBot => ({\n  type: \"setGridBot\",\n  payload: { gridBotId, gridBot },\n});\n\nexport type GridBotsAction =\n  | ISetNewGridBotsList\n  | ISetHasMore\n  | IAddToGridBotsList\n  | ISetGridBotsOffset\n  | ISetGridBotsFilters\n  | ISetGridBot;\n","import {\n  getGridBot,\n  getGridBots,\n  getGridBotsMarketOrders,\n  getGridBotsProfits,\n} from \"../../utils/ApiUtils\";\nimport {\n  getCurrentInvestment,\n  getInitialInvestment,\n} from \"../../utils/GridBotsUtils\";\nimport {\n  addToGridBotsList,\n  setHasMore,\n  setNewGridBotsList,\n  setGridBot,\n} from \"./GridBotsActions\";\nimport { IGridBotsState } from \"./GridBotsReducer\";\n\nconst spotAccountsTypes = [\n  \"Account::BinanceAccount\",\n  \"Accounts::Ftx\",\n  \"Account::HuobiAccount\",\n  \"Account::OkexAccount\",\n  \"Account::KucoinAccount\",\n  \"Account::GateIoAccount\",\n  \"Account::KrakenAccount\",\n  \"Account::BitfinexAccount\",\n  \"Account::BinanceUsAccount\",\n  \"Account::BitstampAccount\",\n  \"Accounts::GeminiAccount\",\n  \"Account::BittrexAccount\",\n  \"Account::GdaxAccount\",\n  \"Account::PaperTradingAccount\",\n];\n\nexport async function fetchGridBots(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  gridBotsDispatch(setHasMore(true));\n  gridBotsDispatch(setNewGridBotsList([]));\n  const {\n    limit,\n    filters: { sorting, account },\n  } = gridBotsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    let offset = 0;\n    let hasMore = true;\n\n    while (hasMore) {\n      const data = await getGridBots(\n        offset,\n        offsetLimit,\n        sorting,\n        account,\n        spotAccountsTypes\n      );\n      gridBotsDispatch(addToGridBotsList(data));\n      offset = offset + offsetLimit;\n      if (data.length < offsetLimit) {\n        hasMore = false;\n      }\n    }\n    gridBotsDispatch(setHasMore(false));\n  } catch {\n    gridBotsDispatch(setNewGridBotsList([]));\n    gridBotsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching grid bots list\",\n    });\n  }\n}\n\nexport async function fetchGridBot(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  try {\n    const gridBot = await getGridBot(gridBotId);\n    gridBotsDispatch(setGridBot(gridBotId, gridBot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching grid bot ${gridBotId}`,\n    });\n  }\n}\n\nexport async function fetchInitialInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"initialInvestments\" in gridBotItem) ||\n      !gridBotItem.initialInvestments\n    ) {\n      const initialInvestments = await getInitialInvestment(gridBotItem);\n      return initialInvestments;\n    } else {\n      return gridBotItem.initialInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching initial investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchCurrentInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"currentInvestments\" in gridBotItem) ||\n      !gridBotItem.currentInvestments\n    ) {\n      const currentInvestments = await getCurrentInvestment(gridBotItem);\n      return currentInvestments;\n    } else {\n      return gridBotItem.currentInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching current investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchProfits(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"profits\" in gridBotItem) || !gridBotItem.profits) {\n      const profits = await getGridBotsProfits(gridBotId);\n      return profits;\n    } else {\n      return gridBotItem.profits;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching profits for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchMarketOrders(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"marketOrders\" in gridBotItem) || !gridBotItem.marketOrders) {\n      const marketOrders = await getGridBotsMarketOrders(gridBotId);\n      return marketOrders;\n    } else {\n      return gridBotItem.marketOrders;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchGridBotsMetrics(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const initialInvestments = await fetchInitialInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const currentInvestments = await fetchCurrentInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const profits = await fetchProfits(gridBotsState, errorsDispatch, gridBotId);\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    initialInvestments,\n    currentInvestments,\n    profits,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n\nexport async function fetchDetails(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const marketOrders = await fetchMarketOrders(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    marketOrders,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n","import React from \"react\";\nimport \"./CurrencyIcon.css\";\n\nconst CurrencyIcon = ({ currency, size = 15 }: any) => (\n  <div\n    className=\"CurrencyIcon\"\n    style={{\n      width: size,\n      height: size,\n      backgroundImage: `url(https://botanapp.s3.amazonaws.com/coinicons/${size}/${currency.toLowerCase()}.png)`,\n    }}\n  ></div>\n);\n\nexport default CurrencyIcon;\n","import React, { useContext } from \"react\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\n\nimport \"./GridBotsListTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\n\nconst GridBotsListTable = ({\n  accounts,\n  values,\n  investment,\n  setModalGridBotId,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n  const { list, gridBots } = gridBotsState;\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account_id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const account = accounts.filter(\n              (account: any) => account.id === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${account.market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{account.name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Price range\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return `${originalRow.upper_price}_${originalRow.lower_price}_${originalRow.grids_quantity} levels`;\n          },\n          id: \"price_range\",\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const range = value.split(\"_\");\n            return (\n              <div>\n                <div\n                  style={{\n                    color: \"#00A59A\",\n                  }}\n                >\n                  {range[0]}\n                </div>\n                <div\n                  style={{\n                    color: \"#EE7D8B\",\n                  }}\n                >\n                  {range[1]}\n                </div>\n                <div\n                  style={{\n                    fontSize: \"12px\",\n                  }}\n                >\n                  {range[2]}\n                </div>\n              </div>\n            );\n          },\n        },\n        {\n          Header: \"Start price\",\n          accessor: \"start_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current price\",\n          accessor: \"current_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Active orders\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const grigLinesNumber = originalRow.grid_lines.length;\n            const sellOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"sell\"\n            ).length;\n            const buyOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"buy\"\n            ).length;\n\n            return (\n              <>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"danger\">\n                    {sellOrdersNumber}\n                  </Badge>\n                </div>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"success\">\n                    {buyOrdersNumber}\n                  </Badge>\n                </div>\n                {sellOrdersNumber + buyOrdersNumber !== grigLinesNumber - 1 && (\n                  <div style={{ marginBottom: \"3px\" }}>\n                    <OverlayTrigger\n                      key=\"right\"\n                      placement=\"right\"\n                      overlay={\n                        <Tooltip id={`tooltip-${originalRow.id}`}>\n                          Bot was unable to place all orders on the exchange.\n                          This may heavily impact your trading results and PnL\n                          reports on this page. Please contact 3commas support\n                          to check the error details.\n                        </Tooltip>\n                      }\n                    >\n                      <Badge style={{ fontSize: \"16px\" }} bg=\"warning\">\n                        {\"\\u26A0\"}\n                      </Badge>\n                    </OverlayTrigger>\n                  </div>\n                )}\n              </>\n            );\n          },\n          id: \"activeOrder\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Initial investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.initialInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.initialInvestments.allInUsd\n                  : originalRow.initialInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"initial_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.currentInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.currentInvestments.allInUsd\n                  : originalRow.currentInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"current_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Investment change\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const invesmentChange =\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.currentInvestments.allInQuote\n                      ? (invesmentChange /\n                          originalRow.currentInvestments.allInQuote) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const invesmentChange =\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: \"USD\",\n                    })} USD`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.currentInvestments.allInUsd\n                      ? (invesmentChange /\n                          originalRow.currentInvestments.allInUsd) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"investment_change\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Bot profit\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (!originalRow.profits) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const profitPercent =\n                (quoteProfit / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: quoteProfit,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const profitPercent =\n                (usdProfit / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: usdProfit,\n                    currency: \"USD\",\n                  })} USD`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"bot_profit\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Total PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.profits ||\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const pnl =\n                quoteProfit +\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const pnl =\n                usdProfit +\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: \"USD\",\n                    })} USD`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"total_PnL\",\n          disableSortBy: true,\n        },\n\n        {\n          Header: \"Stats\",\n          Cell: ({ cell: { value } }: any) => {\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <img className=\"stats\" src={`stats.png`} alt=\"stats\" />\n              </div>\n            );\n          },\n          id: \"stats\",\n          disableSortBy: true,\n        },\n      ] as any,\n    [investment, values]\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((gridBotId: number) => gridBots[gridBotId]),\n    });\n\n  return (\n    <div className=\"GridBotsListTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalGridBotId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default GridBotsListTable;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneGridBotAccumulativeProfitsChartData,\n  getOneGridBotProfitsChartData,\n} from \"../../../../utils/GridBotsUtils\";\nimport \"./GridBotDetailsCharts.css\";\n\nconst GridBotDetailsCharts = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getOneGridBotAccumulativeProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n    setProfitsData(\n      getOneGridBotProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n  }, [profits, marketOrders, tradingFee]);\n\n  return (\n    <div className=\"GridBotDetailsCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, ${quoteCurrency}`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, ${quoteCurrency}`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GridBotDetailsCharts;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotDetailsTable.css\";\n\nconst GridBotDetailsTable = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [profit, setProfit] = useState(0);\n  const [avgProfit, setAvgProfit] = useState(0);\n  const [returns, setReturns] = useState(0);\n  const [running, setRunning] = useState(0);\n\n  useEffect(() => {\n    const summarizedProfits = _.sum(\n      profits.map((profit: any) => parseFloat(profit.profit))\n    );\n    const summarizedMarketOrders =\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01;\n    const realProfit = summarizedProfits - summarizedMarketOrders;\n\n    let period = 1;\n\n    if (timeRangeValue === \"30d\") {\n      period = running > 30 ? 30 : running;\n    } else {\n      period = running;\n    }\n\n    const realAvgProfit = period ? realProfit / period : 0;\n    const quoteInvestment = gridBot.initialInvestments\n      ? gridBot.initialInvestments.allInQuote\n      : 0;\n    const realReturns = quoteInvestment\n      ? (realProfit * 100) / quoteInvestment\n      : 0;\n\n    const start = moment.utc(gridBot.created_at);\n    const end = gridBot.closed_at\n      ? moment.utc(gridBot.closed_at)\n      : moment.utc();\n\n    setProfit(realProfit);\n    setAvgProfit(realAvgProfit);\n    setReturns(realReturns);\n    setRunning(end.diff(start, \"days\"));\n  }, [gridBot, profits, marketOrders, tradingFee, timeRangeValue]);\n\n  return (\n    profits &&\n    marketOrders && (\n      <Table hover>\n        <thead>\n          <tr>\n            <th>Days running</th>\n            <th>Transactions</th>\n            <th>Avg. daily</th>\n            <th>Bot profit</th>\n            <th>Returns</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{running}</td>\n            <td>{profits ? profits.length : \"\"}</td>\n            <td>{`${getCurrencyFormat({\n              value: avgProfit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: profit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: returns,\n              currency: \"USD\",\n            })} %`}</td>\n          </tr>\n        </tbody>\n      </Table>\n    )\n  );\n};\n\nexport default GridBotDetailsTable;\n","import React, { useEffect, useContext, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  FormControl,\n  InputGroup,\n  Modal,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { ErrorsContext, GridBotsContext } from \"../../../App\";\nimport { fetchDetails } from \"../../../state/gridBots/GridBotsEffects\";\nimport {\n  getMarketOrdersWithin30days,\n  getProfitsWithin30days,\n} from \"../../../utils/GridBotsUtils\";\nimport \"./GridBotDetails.css\";\nimport GridBotDetailsCharts from \"./GridBotDetailsCharts/GridBotDetailsCharts\";\nimport GridBotDetailsTable from \"./GridBotDetailsTable/GridBotDetailsTable\";\n\nconst timeRangeRadios = [\n  { name: \"30 days\", value: \"30d\" },\n  { name: \"All time\", value: \"allTime\" },\n];\n\nconst GridBotDetails = ({ modalIsOpen, setModalIsOpen, gridBotId }: any) => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const [tradingFee, setTradingFee] = useState(0);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n\n  const [marketOrders, setMarketOrders] = useState([]);\n  const [profits, setProfits] = useState([]);\n\n  const inputTradingFee = (e: any) => {\n    if (e.target.value >= 0 && e.target.value <= 100) {\n      setTradingFee(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && !gridBot.marketOrders) {\n      fetchDetails(\n        gridBotsDispatch,\n        gridBotsState,\n        errorsDispatch,\n        gridBotId\n      ).then();\n    }\n  }, [gridBot]);\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && gridBot.marketOrders) {\n      if (timeRangeValue === \"30d\") {\n        setMarketOrders(\n          getMarketOrdersWithin30days(gridBot.marketOrders).filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(getProfitsWithin30days(gridBot.profits));\n      } else {\n        setMarketOrders(\n          gridBot.marketOrders.grid_lines_orders.filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(gridBot.profits);\n      }\n    }\n  }, [gridBot, timeRangeValue]);\n\n  return (\n    <>\n      {gridBot && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{`GridBot: ${gridBot.pair\n              .split(\"_\")\n              .reverse()\n              .join(\"/\")} (ID: ${gridBotId})`}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"GridBotsDetailsFilters\">\n              <div className=\"GridBotListControl\">\n                <div className=\"FilterTitle\">Time range</div>\n                <ButtonGroup>\n                  {timeRangeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio\"\n                      value={radio.value}\n                      checked={timeRangeValue === radio.value}\n                      onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n              <div\n                className=\"GridBotListControl\"\n                style={{ width: \"150px\", marginLeft: \"auto\" }}\n              >\n                <div className=\"FilterTitle\">Trading fee</div>\n                <InputGroup>\n                  <FormControl\n                    onChange={inputTradingFee}\n                    value={tradingFee}\n                    type=\"number\"\n                  />\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup>\n              </div>\n            </div>\n            <GridBotDetailsTable\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n            <GridBotDetailsCharts\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default GridBotDetails;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotListMetrics.css\";\n\nconst GridBotListMetrics = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, gridBots } = gridBotsState;\n\n  const [totalInvestments, setTotalInvestments] = useState(0);\n  const [totalProfits, setTotalProfits] = useState(0);\n  const [totaPnL, setTotalPnL] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!hasMore) {\n      const allHaveInvestments = list.every(\n        (id: any) => gridBots[id].initialInvestments\n      );\n      const allHaveCurrentInvestments = list.every(\n        (id: any) => gridBots[id].currentInvestments\n      );\n      const allHaveProfits = list.every((id: any) => gridBots[id].profits);\n      if (\n        list &&\n        allHaveInvestments &&\n        allHaveProfits &&\n        allHaveCurrentInvestments\n      ) {\n        const calculatedInitialInvestments = _.sum(\n          list.map((id: any) => gridBots[id].initialInvestments.allInUsd)\n        );\n        const calculatedCurrentInvestments = _.sum(\n          list.map((id: any) => gridBots[id].currentInvestments.allInUsd)\n        );\n        const calculatedProfits = _.sum(\n          list.map((id: any) =>\n            _.sum(\n              gridBots[id].profits.map((profit: any) =>\n                parseFloat(profit.usd_profit)\n              )\n            )\n          )\n        );\n\n        setIsLoading(false);\n        setTotalInvestments(calculatedInitialInvestments);\n        setTotalProfits(calculatedProfits);\n        setTotalPnL(\n          calculatedProfits +\n            calculatedCurrentInvestments -\n            calculatedInitialInvestments\n        );\n      }\n    }\n  }, [list, hasMore, gridBots]);\n\n  return !isLoading ? (\n    <div className=\"GridBotListMetrics\">\n      <div className=\"GridBotListMetricsContainer\">\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Investment</div>\n          <div className=\"GridBotListMetricBody\">{`${getCurrencyFormat({\n            value: totalInvestments,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Bot Profits</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totalProfits >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totalProfits,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total PnL</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totaPnL >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totaPnL,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"SpinnerContainer\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default GridBotListMetrics;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport {\n  fetchGridBotsMetrics,\n  fetchGridBots,\n} from \"../../../state/gridBots/GridBotsEffects\";\nimport Select from \"react-select\";\n\nimport \"./GridBotsList.css\";\nimport GridBotsListTable from \"./GridBotsListTable/GridBotsListTable\";\nimport { setGridBotsFilters } from \"../../../state/gridBots/GridBotsActions\";\nimport { isSpotAccount } from \"../../../utils/BotsUtils\";\nimport GridBotDetails from \"../GridBotDetails/GridBotDetails\";\nimport GridBotListMetrics from \"./GridBotListMetrics/GridBotListMetrics\";\n\nexport const investmentRadios = [\n  { name: \"Value\", value: \"value\" },\n  { name: \"Balances\", value: \"balances\" },\n];\nexport const valuesRadios = [\n  { name: \"USD\", value: \"usd\" },\n  { name: \"Quote\", value: \"quote\" },\n];\n\nconst GridBotsList = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, filters } = gridBotsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [investment, setInvestment] = useState(\"value\");\n  const [values, setValues] = useState(\"usd\");\n  const [modalGridBotId, setModalGridBotId] = useState(\"\");\n\n  const updateFilter = async (filterItem: any) => {\n    gridBotsDispatch(\n      setGridBotsFilters({\n        ...gridBotsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const accountsOptions = [\n    { value: \"\", label: \"All spot accounts\", label_id: \"All\" },\n    ...accounts\n      .filter((account: any) => isSpotAccount(account.market_code))\n      .map((account: any) => ({\n        value: account.id,\n        label: (\n          <div className=\"AccountFilterItem\">\n            <div>\n              <div\n                className=\"AccountMarketIcon\"\n                style={{\n                  backgroundImage: `url(${account.market_icon})`,\n                }}\n              ></div>\n            </div>\n            <span>{account.name}</span>\n          </div>\n        ),\n        label_id: account.name,\n      })),\n  ];\n\n  useEffect(() => {\n    fetchGridBots(gridBotsDispatch, gridBotsState, errorsDispatch).then();\n  }, [filters]);\n\n  useEffect(() => {\n    if (!hasMore) {\n      for (const gridBotId of list) {\n        fetchGridBotsMetrics(\n          gridBotsDispatch,\n          gridBotsState,\n          errorsDispatch,\n          gridBotId\n        ).then();\n      }\n    }\n  }, [hasMore, list]);\n\n  return (\n    <>\n      <GridBotListMetrics />\n      <div className=\"GridBotsFilters\">\n        <div className=\"GridBotsFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            onChange={(option: any) => {\n              updateFilter({ account: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.account\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"GridBotListControl\">\n          <div className=\"FilterTitle\">Investment</div>\n          <ButtonGroup id=\"foo\">\n            {investmentRadios.map((radio, idx) => (\n              <ToggleButton\n                key={radio.value}\n                id={`radio-${radio.value}`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioInvestment\"\n                value={radio.value}\n                checked={investment === radio.value}\n                onChange={(e) => {\n                  setInvestment(e.currentTarget.value);\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {investment === \"value\" && (\n          <div className=\"GridBotListControl\">\n            <div className=\"FilterTitle\">Show values in</div>\n            <ButtonGroup id=\"bar\">\n              {valuesRadios.map((radio, idx) => (\n                <ToggleButton\n                  key={radio.value}\n                  id={`radio-${radio.value}`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radioValues\"\n                  value={radio.value}\n                  checked={values === radio.value}\n                  onChange={(e) => setValues(e.currentTarget.value)}\n                >\n                  {radio.name}\n                </ToggleButton>\n              ))}\n            </ButtonGroup>\n          </div>\n        )}\n      </div>\n      {isNothingFound ? (\n        <div className=\"FallbackContainer\">\n          <p style={{ textAlign: \"center\" }}>\n            <b>No results found =(</b>\n          </p>\n        </div>\n      ) : (\n        <div className=\"GridBotsList\">\n          {accounts.length > 0 && (\n            <GridBotsListTable\n              accounts={accounts}\n              values={values}\n              investment={investment}\n              setModalGridBotId={setModalGridBotId}\n            />\n          )}\n          {!!modalGridBotId && (\n            <GridBotDetails\n              modalIsOpen={!!modalGridBotId}\n              setModalIsOpen={setModalGridBotId}\n              gridBotId={modalGridBotId}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GridBotsList;\n","import React from \"react\";\nimport \"./GridBots.css\";\nimport GridBotsList from \"./GridBotsList/GridBotsList\";\n\nconst GridBots = () => (\n  <>\n    {/* <BotsFilters /> */}\n    <GridBotsList />\n  </>\n);\n\nexport default GridBots;\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport { DCABotDetails } from \"./components/DCABots/DCABotDetails/DCABotDetails\";\nimport { DCABots } from \"./components/DCABots/DCABots\";\nimport GridBots from \"./components/GridBots/GridBots\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<DCABots />} />\n        <Route path=\":botId\" element={<DCABotDetails />} />\n        <Route path=\"/gridbots\" element={<GridBots />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default Router;\n\n{\n  /* <Route index element={<Home />} />\n        <Route path=\"teams\" element={<Teams />}>\n          <Route path=\":teamId\" element={<Team />} />\n          <Route path=\"new\" element={<NewTeamForm />} />\n          <Route index element={<LeagueStandings />} />\n        </Route> */\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"./Router\";\n\nconst ROUTE_BASENAME = \"/botanstage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <BrowserRouter basename={ROUTE_BASENAME}> */}\n    <BrowserRouter>\n      <Router />\n    </BrowserRouter>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}