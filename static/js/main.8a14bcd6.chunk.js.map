{"version":3,"sources":["components/BotsFilters/BotsFilters.tsx","utils/ApiUtils.tsx","utils/BotsUtils.tsx","components/BotsList/BotPreview/BotPreview.tsx","components/BotsList/BotsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BotsFilters","useContext","FiltersContext","filtersState","filtersDispatch","scopeOptions","value","label","typeOptions","className","onChange","option","type","payload","find","scope","options","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","API_KEY","URLSearchParams","window","location","search","get","SECRET","fetch","headers","APIKEY","Signature","bot","account","a","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","base_order_volume_type","market_code","pairs","then","response","json","marketInfo","lastPrice","last","account_id","accountBalances","botCurrency","split","balance","accountBalance","currency_code","available","equity","on_orders","maxUsage","safetyOrderVolumes","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","rsi","manual","ult","ta_preset","cqs_telegram","BotPreview","botItem","useState","profits_in_usd","funds_locked_in_active_deals","stats","setStats","useEffect","id","data","market_icon","setAccount","setMaxUsage","getMaxUsage","mxUsg","b","age","Date","created_at","Math","floor","getTime","formatter","Intl","NumberFormat","style","currency","strategy","strategy_list","length","botType","botId","marketIcon","is_enabled","name","Table","striped","size","fontSize","marginBottom","fontWeight","width","active_deals_count","format","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","backgroundImage","src","String","slice","alt","BotName","BotInfo","Badge","bg","text","BotReturns","color","BotsList","bots","setBots","offset","setOffset","hasMore","setHasMore","getBotsUrl","resetOffset","dataLength","next","os","loader","Spinner","animation","endMessage","textAlign","map","initialFiltersState","filtersReducer","state","action","Error","createContext","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a14bcd6.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { FiltersContext } from \"../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\n\nconst BotsFilters = () => {\n  const { filtersState, filtersDispatch } = useContext(FiltersContext);\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div>Status</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setScope\", payload: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filtersState.scope\n          )}\n          options={scopeOptions}\n          className=\"scopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div>Type</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setType\", payload: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filtersState.type\n          )}\n          options={typeOptions}\n          className=\"typeFilter\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import CryptoJS from \"crypto-js\";\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (method: string, path: string) => {\n  const API_KEY =\n    new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\n  const SECRET =\n    new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n  return fetch(`https://api.3commas.io${path}`, {\n    method: method,\n    headers: {\n      APIKEY: API_KEY,\n      Signature: getSig(path, SECRET),\n    },\n  });\n};\n","import { callApi } from \"./ApiUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account) {\n    return 0;\n  }\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  if (bot.base_order_volume_type === \"base_currency\") {\n    const marketInfo = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${account.market_code}&pair=${bot.pairs[0]}`\n    ).then((response) => response.json());\n    const lastPrice = parseFloat(marketInfo.last);\n\n    baseOrderVolume = baseOrderVolume * lastPrice;\n    safetyOrderVolume = safetyOrderVolume * lastPrice;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const accountBalances = await callApi(\n      \"POST\",\n      `/public/api/ver1/accounts/${bot.account_id}/account_table_data`\n    ).then((response) => response.json());\n    const botCurrency = bot.pairs[0].split(\"_\")[0];\n    const balance = accountBalances.find(\n      (accountBalance: any) => accountBalance.currency_code === botCurrency\n    );\n    const available =\n      parseFloat(balance.equity) - parseFloat(balance.on_orders);\n    baseOrderVolume = (baseOrderVolume * available) / 100;\n    safetyOrderVolume = (safetyOrderVolume * available) / 100;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { callApi } from \"../../../utils/ApiUtils\";\nimport { Table } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getMaxUsage } from \"../../../utils/BotsUtils\";\n\nconst differenceInDays = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60 * 24));\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TradingView Screener\",\n  rsi: \"RSI-3m-20\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n};\n\nexport const BotPreview = ({ botItem }: any) => {\n  const [stats, setStats] = useState({\n    profits_in_usd: { funds_locked_in_active_deals: 0 },\n  });\n  useEffect(() => {\n    callApi(\"GET\", `/public/api/ver1/bots/stats?bot_id=${botItem.id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setStats(data);\n      });\n  }, []);\n\n  const [account, setAccount] = useState({ market_icon: \"\" });\n  useEffect(() => {\n    callApi(\"GET\", `/public/api/ver1/accounts/${botItem.account_id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setAccount(data);\n      });\n  }, []);\n\n  const [maxUsage, setMaxUsage] = useState(0);\n  useEffect(() => {\n    getMaxUsage(botItem, account).then((mxUsg) => {\n      setMaxUsage(mxUsg);\n    });\n  }, [account, botItem]);\n\n  const age = differenceInDays(new Date(), new Date(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  let strategy = botItem.strategy_list[0].strategy;\n\n  if (botItem.strategy_list.length > 1) {\n    strategy = \"Combined\";\n  } else if (strategy in strategyMap) {\n    strategy = strategyMap[strategy];\n  }\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewTopRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet\n            botType={botItem.type}\n            strategy={botItem.strategy}\n            botId={botItem.id}\n            marketIcon={account.market_icon}\n          />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>ID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Startegy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  stats.profits_in_usd.funds_locked_in_active_deals\n                )}/${formatter.format(maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </div>\n      <div>\n        <BotReturns />\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = () => (\n  <div className=\"BotReturnsContainer\">\n    <div\n      className=\"BotReturnsValue\"\n      style={{ color: \"#198754\" }}\n    >{`+1000%`}</div>\n    <div className=\"BotReturnsLabel\">Returns (30d)</div>\n  </div>\n);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { callApi } from \"../../utils/ApiUtils\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport { FiltersContext } from \"../../App\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport const BotsList = () => {\n  const { filtersState } = useContext(FiltersContext);\n  const limit = 10;\n  const [bots, setBots] = useState<Array<any>>([]);\n  const [offset, setOffset] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const getBotsUrl = (resetOffset = false) =>\n    `/public/api/ver1/bots?offset=${resetOffset ? 0 : offset}&limit=${limit}${\n      filtersState.scope ? `&scope=${filtersState.scope}` : \"\"\n    }${filtersState.type ? `&strategy=${filtersState.type}` : \"\"}`;\n\n  const getMore = () => {\n    return callApi(\"GET\", getBotsUrl())\n      .then((response) => response.json())\n      .then((data: Array<any>) => {\n        if (data.length === 0) {\n          setHasMore(false);\n        }\n        setOffset((os) => os + limit);\n        setBots((bots) => [...bots, ...data]);\n      });\n  };\n\n  useEffect(() => {\n    setHasMore(true);\n    callApi(\"GET\", getBotsUrl(true))\n      .then((response) => response.json())\n      .then((data: Array<any>) => {\n        setBots(data);\n        setOffset(limit);\n        if (data.length < limit) {\n          setHasMore(false);\n        }\n      });\n  }, [filtersState]);\n\n  return (\n    <InfiniteScroll\n      dataLength={bots.length} //This is important field to render the next data\n      next={getMore}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      <div className=\"BotsList\">\n        {bots.map((bot: any) => (\n          <BotPreview botItem={bot} key={bot.id} />\n        ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React, { createContext, useReducer } from \"react\";\nimport \"./App.css\";\nimport BotsFilters from \"./components/BotsFilters/BotsFilters\";\nimport { BotsList } from \"./components/BotsList/BotsList\";\n\nconst initialFiltersState = {\n  scope: \"\",\n  type: \"\",\n};\n\nfunction filtersReducer(state = initialFiltersState, action: any) {\n  switch (action.type) {\n    case \"setScope\":\n      return { ...state, scope: action.payload };\n    case \"setType\":\n      return { ...state, type: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nexport const FiltersContext = createContext({\n  filtersState: initialFiltersState,\n  filtersDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [filtersState, filtersDispatch] = useReducer(\n    filtersReducer,\n    initialFiltersState\n  );\n  return (\n    <FiltersContext.Provider value={{ filtersState, filtersDispatch }}>\n      <div className=\"App\">\n        <BotsFilters />\n        <BotsList />\n      </div>\n    </FiltersContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}