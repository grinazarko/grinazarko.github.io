{"version":3,"sources":["reportWebVitals.ts","components/ErrorsAlerts/ErrorsAlerts.tsx","state/bots/BotsReducer.tsx","state/deals/DealsReducer.tsx","utils/ApiUtils.tsx","components/NavBar/NavBar.tsx","App.tsx","utils/BotsUtils.tsx","utils/DealsUtils.tsx","state/deals/DealsSelectors.tsx","state/bots/BotsActions.tsx","state/bots/BotsEffects.tsx","state/deals/DealsActions.tsx","state/deals/DealsEffects.tsx","utils/GeneralUtils.tsx","utils/ChartsUtils.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainCharts.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsCharts.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsCharts/DCABotDetailsCharts.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsDealsTable/DCABotDetailsDealsTable.tsx","components/BotsList/BotPreview/BotPreview.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainInfo.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsInfo.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsSettings/DCABotDetailsSettingsInfo.tsx","components/DCABotsList/DCABotDetails/DCABotDetailsInfo/DCABotDetailsInfo.tsx","components/DCABotsList/DCABotDetails/DCABotDetails.tsx","components/BotsFilters/BotsFilters.tsx","components/BotsList/BotsListCharts/BotsListCharts.tsx","components/BotsList/BotsList.tsx","components/DCABotsList/DCABotsList.tsx","Router.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorsAlerts","useContext","ErrorsContext","errors","errorsState","errorsDispatch","className","length","Alert","variant","onClose","type","dismissible","Heading","map","error","Link","onClick","window","open","botsStateInitializer","initialValue","initialBotsState","storedFilters","JSON","parse","localStorage","getItem","filters","list","hasMore","limit","offset","scope","account","sorting","bots","botsReducer","state","action","newList","payload","bot","id","newBots","_","keyBy","botId","Error","initialDealsState","deals","dealsReducer","period","periodInDays","newDeals","omit","commonLimiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","DEAL_LIMITER_SETTINGS","minTime","maxConcurrent","clearDatastore","timeout","API_KEY","URLSearchParams","location","search","get","SECRET","dealsLimiter","setDealsLimiter","limiterId","getDealsLimiter","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","limiter","schedule","fetch","headers","APIKEY","Signature","getBots","accountId","a","resetOffset","split","sortBy","sortDirection","getBotsUrl","response","json","getBot","getDeal","dealId","getAccounts","getDeals","order","getStrategies","getBotStats","NavBar","src","alt","Nav","activeKey","Item","eventKey","disabled","ChartJS","register","CategoryScale","PointElement","LinearScale","BarElement","Title","Tooltip","LineElement","Legend","TimeScale","Filler","ArcElement","initialAccountsState","accounts","initialStrategiesState","strategies","initialErrorsState","errorsReducer","Set","add","Array","from","accountsReducer","strategiesReducer","AccountsContext","createContext","accountsState","accountsDispatch","StrategiesContext","strategiesState","strategiesDispatch","BotsContext","botsState","botsDispatch","DealsContext","dealsState","dealsDispatch","App","useReducer","getAccountData","data","getStrategiesData","useEffect","Provider","value","getMaxUsage","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","includes","Promise","resolve","marketInfo","last","currencyPriceInUsd","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","find","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getFundsLocked","fundsLocked","getCurrencyFormat","signDisplay","Intl","NumberFormat","maximumFractionDigits","format","maxUsageInUsd","getReturns","reduce","currDeal","nextDeal","usd_final_profit","differenceInHours","b","Math","ceil","diff","differenceInDays","getDealAgeInHours","deal","moment","closed_at","getAllDealsForOneBot","daysWithin","ofsetCallback","hoursWithin","fetchAllDealsInLoop","slice","lastDeal","filteredDeals","filter","getObjectOfProfitPerDay","result","groupBy","item","mapValues","sum","getLastNDays","n","i","idx","startOf","subtract","date","reverse","getProfitChartData","profitObject","nDays","lastDays","profits","day","labels","getAccumulativeProfitChartData","currentvalue","accProfits","profit","acc","getOneBotProfitsChartData","botsDeals","difference","getOneBotCurrencyLeaderbord","profitsByPair","getObjectOfProfitPerPair","sortedProfits","toPairs","orderBy","join","INFINITY_IN_DAYS","is30daysDealsLoaded","isAllDealsLoaded","selectAllDealsWithin30Days","selectAllDeals","setNewBotsList","botsList","setHasMore","addToBotsList","setBotsOffset","setBot","fetchBots","customLimit","offsetLimit","botItem","name","profits_in_usd","today_usd_profit","funds_locked_in_active_deals","todayUsdProfit","deals30daysForBot","returns","getDealsList","setOffset","resetDeals","fetchDealsForBotFor30Days","message","fetchAllDealsForBot","reset","getAllActiveDeals","usePrevious","ref","useRef","current","ProfitChartOptions","text","scales","x","time","unit","tooltipFormat","ticks","source","y","beginAtZero","responsive","plugins","legend","display","title","tooltip","intersect","mode","AccumulativeChartOptions","lineTension","gridLines","offsetGridLines","filler","propagate","drawTime","LeaderbordChartOptions","indexAxis","stacked","callback","DealsCountBarChartOptions","isWeekUnit","stepSize","DCABotDetailsMainCharts","xLabel","yLabel","dateLabelsDays","timeRangeValue","countsValues","dates","delsGrouped","getDealsCountPerDay","dealsStatusData","countsObj","countBy","localized_status","keys","values","key","dealsStatusesCounts","dealsDurationHistogramData","dealDurations","start","created_at","end","getDealsDurationHistogramData","options","datasets","label","borderColor","backgroundColor","aspectRatio","callbacks","tooltipItem","dataset","total","previousValue","currentValue","dataIndex","percentage","floor","legendItem","index","width","borderWidth","barPercentage","DCABotDetailsProfitsCharts","useState","accumulativeProfitsData","setAccumulativeProfitsData","profitsData","setProfitsData","pairsLeaderbordData","setPairsLeaderbordData","getOneBotAccumulativeProfitsChartData","fill","DCABotDetailsCharts","infoKey","setDateLabelsDays","oldestDealAgeInDaysSinceOpened","pop","badgeVariant","Cancelled","StopLoss","Failed","Completed","Liquidated","Switched","DCABotDetailsDealsTable","columns","React","useMemo","Header","accessor","disableSortBy","originalRow","rowIndex","pair","Cell","cell","Badge","style","fontSize","bg","Date","sortType","utc","bought_average_price","sold_average_price","amount","bought_amount","sold_amount","volume","bought_volume","sold_volume","Number","original","numberValue","color","useTable","disableSortRemove","autoResetPage","autoResetSortBy","initialState","pageSize","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","pageCount","gotoPage","nextPage","previousPage","pageIndex","modalIsOpen","setModalIsOpen","selectedDeal","setSelectedDeal","Table","striped","bordered","hover","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","marginLeft","cursor","isSorted","isSortedDesc","row","getRowProps","cells","getCellProps","TablePagination","range","renderPaginationNumberItem","Pagination","active","renderPaginationBeginning","First","Prev","renderPaginationEnd","Next","Last","DealModal","setDeal","dl","Modal","show","onHide","scrollable","size","closeButton","Body","bot_events","event","Footer","Button","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","buy_or_strong_buy","strong_buy","sell_or_strong_sell","strong_sell","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","getBotsStrategyName","botsStrategy","marketsStrategy","marketStrategy","strategy_key","BotPreview","statsLoaded","setStatsLoaded","navigate","useNavigate","getFundsLockedAndTodaysProfit","getMaxUsageEffect","getReturnsEffect","random","age","formatter","strategy_list","botType","marketIcon","market_icon","is_enabled","marginBottom","fontWeight","active_deals_count","finished_deals_profit_usd","active_deals_usd_profit","pathname","IconsSet","backgroundImage","String","BotName","BotInfo","BotReturns","minimumFractionDigits","returnsCalculated","OverlayTrigger","placement","delay","hide","overlay","DCABotDetailsMainInfo","setFundsLocked","fundsLockedShare","setFundsLockedShare","setMaxUsage","reservedFunds","setReservedFunds","percentFormatter","botPairs","botMarket","startCondition","percent","points","getMaxUsageInBotCurrency","mxUsg","activeDeals","reserved_base_funds","reserved_quote_funds","getReservedFundsInBotCurrency","getFundsLockedInBotCurrency","avgDealDuration","avgDealDurationInMilliseconds","getAverageDealDuration","DCABotDetailsProfitsInfo","averageTp","setAverageTp","averageProfitFromDeal","setAverageProfitFromDeal","averageDailyProfit","setAverageDailyProfit","setReturns","totalProfitUsd","setTotalProfitUsd","mean","status","final_profit_percentage","getAverageTp","getAverageProfitFromDeal","getAverageDailyProfit","getTotalProfitUsd","DCABotDetailsSettingsInfo","additionalCurrency","baseOrderSize","setBaseOrderSize","safetyOrderSize","setSafetyOrderSize","getBaseOrderSize","safety_order_volume_type","getSafetyOrderSize","leverageType","leverage_type","profit_currency","take_profit","take_profit_type","trailing_enabled","trailing_deviation","stop_loss_percentage","stop_loss_timeout_in_seconds","start_order_type","active_safety_orders_count","safety_order_step_percentage","martingale_step_coefficient","DCABotDetailsInfo","setInfoKey","Tabs","onSelect","k","Tab","tabClassName","statusFilterOptions","DCABotDetails","params","useParams","setTimeRangeValue","NaN","setBotId","previousBotId","setBotsDeals","isDataLoading","setIsDataLoading","isAllDataLoading","setIsAllDataLoading","setAccount","percentLoadedDeals","setPercentLoadedDeals","statusFilter","setStatusFilter","pairFilter","setPairFilter","pairFilterOptions","setPairFilterOptions","fromFilter","setFromFilter","toFilter","setToFilter","clearFilters","refreshData","fetchBot","dateFrom","isAfter","isSame","filterFrom","dateTo","isBefore","filterTo","filterByStatus","filterByPair","loadedDeals","finished_deals_count","stop","dropWaitingJobs","disconnect","ProgressBar","now","animated","ButtonGroup","radio","ToggleButton","checked","onChange","e","currentTarget","option","theme","colors","primary25","primary","dateFormat","selected","selectsStart","startDate","endDate","strictParsing","selectsEnd","minDate","BotsFilters","updateFilter","filterItem","accountsOptions","label_id","scopeOptions","typeOptions","sortingOptions","setItem","stringify","filterOption","candidate","input","BotsListCharts","dealsLoaded","setDealsLoaded","botsLoaded","setBotsLoaded","numberHandled","setNumberHandled","profitsChartData","setProfitsChartData","accumulativeProfitsChartData","setAccumulativeProfitsChartData","botsLeaderboardChartData","setBotsLeaderboardChartData","getBotsList","getBoatsDeals","profitsObject","botsIds","currentObj","mergeWith","profit1","profit2","calculateProfitPerDayForListOfBots","sortedAndSelected10FirstBots","round","EPSILON","getBotsLeaderboardChartData","botsWithLoadedDeals","BotsList","showCharts","setShowCharts","isNothingFound","previousFilters","every","haveAllBotsDealsFor30Days","textAlign","dataLength","next","loader","Spinner","animation","endMessage","DCABotsList","Router","element","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6f31eac.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via{\" \"}\n          <Alert.Link\n            onClick={() => {\n              window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n            }}\n          >\n            Telegram\n          </Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import _ from \"lodash\";\nimport { IBot, IBotFilters } from \"../../interfaces/Bot\";\nimport { BotsAction } from \"./BotsActions\";\n\nexport interface IBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IBotFilters;\n  limit: number;\n  bots: { [key: number]: IBot };\n}\n\nexport const botsStateInitializer = (\n  initialValue = initialBotsState\n): IBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"botsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  scope: \"enabled\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 15,\n  offset: 0,\n  filters: initialFiltersState,\n  bots: {},\n};\n\nexport function botsReducer(\n  state: IBotsState = initialBotsState,\n  action: BotsAction\n): IBotsState {\n  switch (action.type) {\n    case \"setNewBotsList\":\n      const newList = action.payload.map((bot) => bot.id);\n      const newBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, bots: newBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToBotsList\":\n      const list = action.payload.map((bot) => bot.id);\n      const bots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        bots: { ...state.bots, ...bots },\n      };\n    case \"setBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setBot\":\n      return {\n        ...state,\n        bots: { ...state.bots, [action.payload.botId]: action.payload.bot },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { DealsAction } from \"./DealsActions\";\nimport { IDeal } from \"../../interfaces/Deal\";\nimport _ from \"lodash\";\n\nexport interface IDealsState {\n  deals: {\n    [key: string]: { list: Array<IDeal>; period: number; offset?: number };\n  };\n}\n\nexport const initialDealsState: IDealsState = {\n  deals: {},\n};\n\nexport function dealsReducer(\n  state: IDealsState = initialDealsState,\n  action: DealsAction\n): IDealsState {\n  switch (action.type) {\n    case \"getDealsList\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            list: action.payload.deals,\n            period: action.payload.periodInDays,\n          },\n        },\n      };\n    case \"setOffset\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            offset: action.payload.offset,\n          },\n        },\n      };\n    case \"resetDeals\":\n      if (action.payload.botId in state.deals) {\n        const newDeals = _.omit(state.deals, [action.payload.botId]);\n        return {\n          ...state,\n          deals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    default:\n      throw new Error();\n  }\n}\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\nimport { IBotApi } from \"../interfaces/Bot\";\nimport { IDealApi } from \"../interfaces/Deal\";\n\nconst commonLimiter = new Bottleneck({\n  reservoir: 13,\n  reservoirRefreshAmount: 13,\n  reservoirRefreshInterval: 1000,\n});\n\nexport const DEAL_LIMITER_SETTINGS = {\n  id: \"DEAL_LIMITER\",\n  reservoir: 0,\n  reservoirRefreshAmount: 1,\n  reservoirRefreshInterval: 1000,\n  minTime: 1000,\n  maxConcurrent: 1,\n  clearDatastore: true,\n  timeout: 2000,\n};\n\nconst API_KEY =\n  new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\nconst SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n//we need that hack for stopping loading heavy deals request\nexport let dealsLimiter = new Bottleneck(DEAL_LIMITER_SETTINGS);\n\nexport function setDealsLimiter(limiterId: any) {\n  dealsLimiter = new Bottleneck({ ...DEAL_LIMITER_SETTINGS, id: limiterId });\n}\n\nexport function getDealsLimiter() {\n  return dealsLimiter;\n}\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (\n  method: string,\n  path: string,\n  limiter: any = commonLimiter\n) => {\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n): Promise<Array<IBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      scope ? `&scope=${scope}` : \"\"\n    }${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getBot = async (botId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/bots/${botId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getDeal = async (dealId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/deals/${dealId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccounts = async () => {\n  return callApi(\"GET\", `/public/api/ver1/accounts`).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getDeals = async (\n  botId: number,\n  offset: number,\n  limit: number,\n  scope: string,\n  order: string\n): Promise<Array<IDealApi>> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=${scope}&order=${order}`,\n    dealsLimiter\n  ).then((response: any) => response.json());\n};\n\nexport const getStrategies = async () => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/marketplace/items?&limit=1000`\n  ).then((response: any) => response.json());\n};\n\nexport const getBotStats = async (botId: number) => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/bots/stats?bot_id=${botId}`\n  ).then((response: any) => response.json());\n};\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport \"./NavBar.css\";\n\nexport const NavBar = () => {\n  return (\n    <div className=\"NavBar\">\n      <div className=\"NavBarContainer\">\n        <div className=\"LogoContainer\">\n          <img className=\"Logo\" src={`BotAn__icon.png`} alt=\"logo\" />\n        </div>\n        <div className=\"Navigation\">\n          <Nav activeKey=\"/\">\n            <Nav.Item>\n              <Nav.Link>DCA Bots</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"link-1\" disabled>\n                Grid Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"link-2\" disabled>\n                Smart Trades\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>\n                Accounts\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </div>\n\n        <div\n          className=\"CommunityLink\"\n          onClick={() => {\n            window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n          }}\n        >\n          <span className=\"SupportLabel\">Community</span>\n          <img className=\"TelegramIcon\" src={`image 8.png`} alt=\"logo\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { createContext, useEffect, useReducer, useState } from \"react\";\nimport \"./App.css\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport {\n  botsReducer,\n  botsStateInitializer,\n  initialBotsState,\n} from \"./state/bots/BotsReducer\";\nimport { dealsReducer, initialDealsState } from \"./state/deals/DealsReducer\";\nimport { getAccounts, getStrategies } from \"./utils/ApiUtils\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { Outlet } from \"react-router-dom\";\n\nChartJS.register(\n  CategoryScale,\n  PointElement,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement\n);\n\nconst initialAccountsState: any = {\n  accounts: [],\n};\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction accountsReducer(state = initialAccountsState, action: any) {\n  switch (action.type) {\n    case \"setAccounts\":\n      return { accounts: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nexport const BotsContext = createContext({\n  botsState: initialBotsState,\n  botsDispatch: (state: any) => {},\n});\nexport const DealsContext = createContext({\n  dealsState: initialDealsState,\n  dealsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [botsState, botsDispatch] = useReducer(\n    botsReducer,\n    initialBotsState,\n    botsStateInitializer\n  );\n\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n  const [dealsState, dealsDispatch] = useReducer(\n    dealsReducer,\n    initialDealsState\n  );\n\n  const getAccountData = async () => {\n    try {\n      const data = await getAccounts();\n      accountsDispatch({ type: \"setAccounts\", payload: data });\n    } catch {\n      accountsDispatch({ type: \"setAccounts\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching accounts list\",\n      });\n    }\n  };\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAccountData();\n    getStrategiesData();\n  }, []);\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <BotsContext.Provider value={{ botsState, botsDispatch }}>\n            <DealsContext.Provider value={{ dealsState, dealsDispatch }}>\n              <div className=\"App\">\n                <NavBar />\n                <Outlet />\n                <ErrorsAlerts />\n              </div>\n            </DealsContext.Provider>\n          </BotsContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import _ from \"lodash\";\nimport { IBot } from \"../interfaces/Bot\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\nimport { callApi } from \"./ApiUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account || !account.id) {\n    return 0;\n  }\n\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    return await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nconst isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nexport function getFundsLocked(bot: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? bot.fundsLocked / leverage : bot.fundsLocked;\n}\n\nexport function getFundsLockedInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let fundsLocked = 0;\n  let currency = quoteCurrency;\n\n  if (bot.strategy === \"long\") {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.bought_volume),\n      0\n    );\n    currency = quoteCurrency;\n  } else if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_amount),\n      0\n    );\n    currency = baseCurrency;\n  } else if (bot.strategy === \"short\" && !isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_volume),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  const leverage = parseFloat(bot.leverage_custom_value);\n\n  return {\n    value: leverage ? fundsLocked / leverage : fundsLocked,\n    currency,\n  };\n}\n\nexport const getBaseOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let additionalCurrency = \"\";\n\n  if (bot.base_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.base_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.base_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getSafetyOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n\n  let additionalCurrency = \"\";\n\n  if (bot.safety_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.safety_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.safety_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getCurrencyFormat = (\n  { value, currency }: any,\n  signDisplay: any = \"auto\"\n) => {\n  if (currency.includes(\"BTC\")) {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 6,\n      signDisplay,\n    }).format(value);\n  } else if (currency === \"marketPrice\") {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 8,\n      signDisplay,\n    }).format(value);\n  } else {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 2,\n      signDisplay,\n    }).format(value);\n  }\n};\n\nexport async function getMaxUsageInBotCurrency(bot: IBot, account: any) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let maxUsageInUsd = 0;\n\n  if (bot.maxUsage) {\n    maxUsageInUsd = bot.maxUsage;\n  } else {\n    maxUsageInUsd = await getMaxUsage(bot, account);\n  }\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    currency = baseCurrency;\n  } else {\n    currency = quoteCurrency;\n  }\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(\n    account.market_code,\n    currency\n  );\n  return {\n    value: maxUsageInUsd / currencyPriceInUsd,\n    currency,\n  };\n}\n\nexport function getReservedFundsInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let reservedFunds = 0;\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_base_funds.toString()),\n      0\n    );\n    currency = baseCurrency;\n  } else {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_quote_funds.toString()),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  return {\n    value: reservedFunds,\n    currency,\n  };\n}\n\nexport function getReturns(maxUsage: any, deals: any) {\n  if (maxUsage === 0) {\n    return 0;\n  }\n  const profit30Days = deals.reduce(\n    (currDeal: any, nextDeal: any) => ({\n      usd_final_profit:\n        parseFloat(currDeal.usd_final_profit) +\n        parseFloat(nextDeal.usd_final_profit),\n    }),\n    { usd_final_profit: 0 }\n  )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n\nexport function getBotsLeaderboardChartData(botsState: IBotsState) {\n  const bots = botsState.list.map((botId: number) => {\n    const bot = botsState.bots[botId];\n    return {\n      maxUsage: bot.maxUsage || 0,\n      name: bot.name,\n      fundsLocked: getFundsLocked(bot),\n    };\n  });\n  const sortedAndSelected10FirstBots = _.sortBy(bots, [\n    \"maxUsage\",\n    \"fundsLocked\",\n  ])\n    .reverse()\n    .slice(0, 10);\n  return [\n    sortedAndSelected10FirstBots.map((bot) => bot.name),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.fundsLocked + Number.EPSILON) * 100) / 100\n    ),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.maxUsage + Number.EPSILON) * 100) / 100\n    ),\n  ];\n}\n","import { getDeals } from \"./ApiUtils\";\nimport moment from \"moment\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport _ from \"lodash\";\nimport { IDealsState } from \"../state/deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../state/deals/DealsSelectors\";\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60));\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60 * 24));\n\nexport const getDealAgeInHours = (deal: any) =>\n  differenceInHours(moment(), moment(deal.closed_at));\n\nexport const getDealAgeInDaysSinceOpened = (deal: any) =>\n  differenceInDays(moment(), moment(deal.created_at));\n\nexport const getAllDealsForOneBot = async (\n  botId: number,\n  daysWithin = 30,\n  ofsetCallback = (offset: number) => {}\n) => {\n  const hoursWithin = 24 * daysWithin;\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsInLoop = async () => {\n    const newDeals = await getDeals(\n      botId,\n      offset,\n      limit,\n      \"finished\",\n      \"closed_at\"\n    );\n\n    if (newDeals.length === 0) {\n      return;\n    }\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= hoursWithin\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      ofsetCallback(offset);\n      await fetchAllDealsInLoop();\n    } else {\n      const filteredDeals = newDeals.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin\n      );\n      deals = [...deals, ...filteredDeals];\n    }\n  };\n\n  await fetchAllDealsInLoop();\n\n  return deals;\n};\n\nexport const getObjectOfProfitPerDay = (deals: Array<IDeal>) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  let result = _.groupBy(deals, dateString);\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfProfitPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const calculateProfitPerDayForListOfBots = (\n  dealsState: IDealsState,\n  botsIds: Array<number>\n) => {\n  return botsIds.reduce((currentObj: any, botId: number) => {\n    const botsDeals = getObjectOfProfitPerDay(\n      selectAllDealsWithin30Days(dealsState, botId)\n    );\n\n    return _.mergeWith(\n      botsDeals,\n      currentObj,\n      (profit1: number, profit2: number) => {\n        profit1 = profit1 || 0;\n        profit2 = profit2 || 0;\n        return profit1 + profit2;\n      }\n    );\n  }, {});\n};\n\nexport const getLastNDays = (n: number = 30) =>\n  [...new Array(n)]\n    .map((i, idx) => moment().startOf(\"day\").subtract(idx, \"days\"))\n    .map((date: any) => date.format(\"YYYY-MM-DD\"))\n    .reverse();\n\nexport const getProfitChartData = (profitObject: any, nDays = 30) => {\n  const lastDays = getLastNDays(nDays);\n\n  const profits = lastDays.map((day: string) => {\n    return day in profitObject ? profitObject[day] : 0;\n  });\n\n  const labels = lastDays.map((day: any) => moment(day, \"YYYY-MM-DD\"));\n  return [labels, profits];\n};\n\nexport const getAccumulativeProfitChartData = (\n  profitObject: any,\n  nDays = 30\n) => {\n  const profits = getProfitChartData(profitObject, nDays);\n  let currentvalue = 0;\n  const accProfits = profits[1].map((profit: any) => {\n    const acc = currentvalue + profit;\n    currentvalue = acc;\n    return acc;\n  });\n  return [profits[0], accProfits];\n};\n\nexport const getDealsCountPerDay = (deals: IDeal[], dates: string[]) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  const delsGrouped = _.groupBy(deals, dateString);\n  const result = _.mapValues(\n    delsGrouped,\n    (deals: Array<IDeal>) => deals.length\n  );\n\n  return dates.map((day: string) => {\n    return day in result ? result[day] : 0;\n  });\n};\n\nexport const dealsStatusesCounts = (deals: IDeal[]) => {\n  const countsObj = _.countBy(deals, (deal) => deal.localized_status);\n  const keys = [\n    \"Cancelled\",\n    \"StopLoss\",\n    \"Failed\",\n    \"Completed\",\n    \"Closed at Market Price\",\n    \"Liquidated\",\n    \"Switched\",\n  ];\n  const values = keys.map((key) => countsObj[key]);\n  return [keys, values];\n};\n\nexport const getDealsDurationHistogramData = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return differenceInHours(end, start);\n  });\n  const countsObj = _.countBy(dealDurations);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getAverageDealDuration = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return end.diff(start);\n  });\n\n  const avgDealDurationInMilliseconds =\n    _.sum(dealDurations) / dealDurations.length || 0;\n\n  return moment.utc(avgDealDurationInMilliseconds).format(\"HH:mm\");\n};\n\nexport const getOneBotAccumulativeProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getAccumulativeProfitChartData(botsDeals, 30)\n    : getAccumulativeProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getProfitChartData(botsDeals, 30)\n    : getProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotCurrencyLeaderbord = (deals: IDeal[]) => {\n  const profitsByPair = getObjectOfProfitPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getAverageTp = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.final_profit_percentage))\n      ) || 0,\n    currency: \"%\",\n  };\n};\n\nexport const getAverageProfitFromDeal = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.usd_final_profit))\n      ) || 0,\n    currency: \"$\",\n  };\n};\n\nexport const getTotalProfitUsd = (deals: IDeal[]) => {\n  return _.sum(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0;\n};\n\nexport const getAverageDailyProfit = (deals: IDeal[]) => {\n  const profitsData = getOneBotProfitsChartData(deals);\n  return {\n    value: _.mean(profitsData[1]),\n    currency: \"$\",\n  };\n};\n","import { getDealAgeInHours } from \"../../utils/DealsUtils\";\nimport { IDealsState } from \"./DealsReducer\";\n\nexport const INFINITY_IN_DAYS = 100000;\nconst hoursWithin30Days = 24 * 30;\n\nexport const is30daysDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals && state.deals[botId] && state.deals[botId].period >= 30;\n\nexport const isAllDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals &&\n  state.deals[botId] &&\n  state.deals[botId].period >= INFINITY_IN_DAYS;\n\nexport const selectAllDealsWithin30Days = (\n  state: IDealsState,\n  botId: number\n) => {\n  return is30daysDealsLoaded(state, botId)\n    ? state.deals[botId].list.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin30Days\n      )\n    : [];\n};\n\nexport const selectAllDeals = (state: IDealsState, botId: number) => {\n  return isAllDealsLoaded(state, botId) ? state.deals[botId].list : [];\n};\n","import { IBot, IBotFilters } from \"../../interfaces/Bot\";\n\ninterface ISetNewBotsList {\n  type: \"setNewBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const setNewBotsList = (botsList: Array<IBot>): ISetNewBotsList => ({\n  type: \"setNewBotsList\",\n  payload: botsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToBotsList {\n  type: \"addToBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const addToBotsList = (botsList: Array<IBot>): IAddToBotsList => ({\n  type: \"addToBotsList\",\n  payload: botsList,\n});\n\ninterface ISetBotsOffset {\n  type: \"setBotsOffset\";\n  payload: number;\n}\n\nexport const setBotsOffset = (offset: number): ISetBotsOffset => ({\n  type: \"setBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetBotsFilters {\n  type: \"setBotsFilters\";\n  payload: IBotFilters;\n}\n\nexport const setBotsFilters = (botsFilter: IBotFilters): ISetBotsFilters => ({\n  type: \"setBotsFilters\",\n  payload: botsFilter,\n});\n\ninterface ISetBot {\n  type: \"setBot\";\n  payload: { botId: number; bot: IBot };\n}\n\nexport const setBot = (botId: number, bot: IBot): ISetBot => ({\n  type: \"setBot\",\n  payload: { botId, bot },\n});\n\nexport type BotsAction =\n  | ISetNewBotsList\n  | ISetHasMore\n  | IAddToBotsList\n  | ISetBotsOffset\n  | ISetBotsFilters\n  | ISetBot;\n","import { getBot, getBots, getBotStats } from \"../../utils/ApiUtils\";\nimport { getMaxUsage, getReturns } from \"../../utils/BotsUtils\";\nimport { IDealsState } from \"../deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../deals/DealsSelectors\";\nimport {\n  addToBotsList,\n  setBotsOffset,\n  setHasMore,\n  setNewBotsList,\n  setBot,\n} from \"./BotsActions\";\nimport { IBotsState } from \"./BotsReducer\";\n\nexport async function fetchBots(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  resetOffset: boolean = false,\n  customLimit?: number\n) {\n  botsDispatch(setHasMore(true));\n  const {\n    offset,\n    limit,\n    filters: { sorting, scope, type, account },\n  } = botsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    const data = await getBots(\n      offset,\n      offsetLimit,\n      sorting,\n      scope,\n      type,\n      account,\n      resetOffset\n    );\n    if (resetOffset) {\n      botsDispatch(setBotsOffset(offsetLimit));\n      botsDispatch(setNewBotsList(data));\n    } else {\n      botsDispatch(setBotsOffset(offset + offsetLimit));\n      botsDispatch(addToBotsList(data));\n    }\n    if (data.length < offsetLimit) {\n      botsDispatch(setHasMore(false));\n    }\n  } catch {\n    botsDispatch(setNewBotsList([]));\n    botsDispatch(setBotsOffset(offsetLimit));\n    botsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching bots list\",\n    });\n  }\n}\n\nexport async function fetchBot(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    const bot = await getBot(botId);\n    botsDispatch(setBot(botId, bot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching bot ${botId}`,\n    });\n  }\n}\n\nexport async function getMaxUsageEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number,\n  account: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"maxUsage\" in bots[botId])) {\n      const maxUsage = await getMaxUsage(botItem, account);\n      const bot = { ...botItem, maxUsage: maxUsage };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = { ...botItem, maxUsage: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching max usage for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getFundsLockedAndTodaysProfit(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"fundsLocked\" in bots[botId])) {\n      const {\n        profits_in_usd: { today_usd_profit, funds_locked_in_active_deals },\n      } = await getBotStats(botId);\n\n      const bot = {\n        ...botItem,\n        fundsLocked: funds_locked_in_active_deals,\n        todayUsdProfit: today_usd_profit,\n      };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = {\n      ...botItem,\n      fundsLocked: 0,\n      todayUsdProfit: 0,\n    };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching stats for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getReturnsEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  dealsState: IDealsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    const deals30daysForBot = selectAllDealsWithin30Days(dealsState, botId);\n    const maxUsage = botItem.maxUsage;\n    const bot = {\n      ...botItem,\n      returns: getReturns(maxUsage, deals30daysForBot),\n    };\n    botsDispatch(setBot(botItem.id, bot));\n  } catch {\n    const bot = { ...botItem, returns: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when getting returns for bot ${botItem.name}`,\n    });\n  }\n}\n","import { IDeal } from \"../../interfaces/Deal\";\n\ninterface IGetDealsList {\n  type: \"getDealsList\";\n  payload: { deals: Array<IDeal>; botId: number; periodInDays: number };\n}\n\nexport const getDealsList = (\n  deals: Array<IDeal>,\n  botId: number,\n  periodInDays: number\n): IGetDealsList => ({\n  type: \"getDealsList\",\n  payload: { deals, botId, periodInDays },\n});\n\ninterface ISetOffset {\n  type: \"setOffset\";\n  payload: { botId: number; offset: number };\n}\n\nexport const setOffset = (botId: number, offset: number): ISetOffset => ({\n  type: \"setOffset\",\n  payload: { botId, offset },\n});\n\ninterface IResetDeals {\n  type: \"resetDeals\";\n  payload: { botId: number };\n}\n\nexport const resetDeals = (botId: number): IResetDeals => ({\n  type: \"resetDeals\",\n  payload: { botId },\n});\n\nexport type DealsAction = IGetDealsList | ISetOffset | IResetDeals;\n","import { getDeals } from \"../../utils/ApiUtils\";\nimport { getAllDealsForOneBot } from \"../../utils/DealsUtils\";\nimport { getDealsList, resetDeals, setOffset } from \"./DealsActions\";\nimport { IDealsState } from \"./DealsReducer\";\nimport {\n  INFINITY_IN_DAYS,\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n} from \"./DealsSelectors\";\n\nexport async function fetchDealsForBotFor30Days(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    if (is30daysDealsLoaded(dealsState, botId)) {\n      return;\n    }\n    const data = await getAllDealsForOneBot(botId, 30);\n    dealsDispatch(getDealsList(data, botId, 30));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport async function fetchAllDealsForBot(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) {\n  try {\n    if (isAllDealsLoaded(dealsState, botId) && !reset) {\n      return;\n    }\n\n    if (reset) {\n      dealsDispatch(resetDeals(botId));\n    }\n\n    await fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botId\n    );\n    const data = await getAllDealsForOneBot(\n      botId,\n      INFINITY_IN_DAYS,\n      (offset: number) => {\n        dealsDispatch(setOffset(botId, offset));\n      }\n    );\n    dealsDispatch(getDealsList(data, botId, INFINITY_IN_DAYS));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport const getAllActiveDeals = async (errorsDispatch: any, botId: number) => {\n  try {\n    return await getDeals(botId, 0, 1000, \"active\", \"closed_at\");\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching active deals for bot ${botId}`,\n      });\n    }\n    return Promise.resolve([]);\n  }\n};\n","import React, { useEffect, useRef } from \"react\";\n\nexport function usePrevious(value: any) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","export const ProfitChartOptions = (text: string) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const AccumulativeChartOptions = (text: string) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const LeaderbordChartOptions = (text: string, labels: any) => ({\n  indexAxis: \"y\" as const,\n  scales: {\n    x: {\n      stacked: false,\n      beginAtZero: true,\n    },\n    y: {\n      stacked: true,\n      beginAtZero: true,\n      ticks: {\n        callback: (value: any) => {\n          return labels[value].length > 35\n            ? labels[value].slice(0, 33) + \"...\"\n            : labels[value];\n        },\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"y\",\n    },\n  },\n});\n\nexport const DealsCountBarChartOptions = (\n  text: string,\n  isWeekUnit: boolean = true\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: isWeekUnit ? \"week\" : \"month\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const HistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  // crossAlign: \"near\",\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        label: (tooltipItem: any) => {\n          const dataset = tooltipItem.dataset;\n          const total = dataset.data.reduce(function (\n            previousValue: any,\n            currentValue: any\n          ) {\n            return previousValue + currentValue;\n          });\n          const currentValue = dataset.data[tooltipItem.dataIndex];\n          const percentage = Math.floor((currentValue / total) * 100 + 0.5);\n          return ` ${currentValue} deals (${percentage}%)`;\n        },\n        title: (tooltipItem: any) => {\n          const label = parseInt(tooltipItem[0].label);\n          return `Duration from ${label - 1} to ${label} hours`;\n        },\n      },\n    },\n  },\n});\n","import React from \"react\";\nimport { Bar, Doughnut } from \"react-chartjs-2\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  DealsCountBarChartOptions,\n  HistogramChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  dealsStatusesCounts,\n  getDealsCountPerDay,\n  getDealsDurationHistogramData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsMainCharts.css\";\n\nexport const DCABotDetailsMainCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n}) => {\n  const countsValues = getDealsCountPerDay(deals, dateLabelsDays);\n  const dealsStatusData = dealsStatusesCounts(deals);\n  const dealsDurationHistogramData = getDealsDurationHistogramData(deals);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            DealsCountBarChartOptions(\n              \"Finished deals per day\",\n              dateLabelsDays.length < 70\n            ) as any\n          }\n          data={{\n            labels: dateLabelsDays,\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: countsValues,\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Doughnut\n          options={\n            {\n              aspectRatio: 1.7,\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"Finished deals by Status\",\n                },\n                tooltip: {\n                  callbacks: {\n                    label: (tooltipItem: any) => {\n                      const dataset = tooltipItem.dataset;\n                      const total = dataset.data.reduce(function (\n                        previousValue: any,\n                        currentValue: any\n                      ) {\n                        return currentValue\n                          ? previousValue + currentValue\n                          : previousValue;\n                      },\n                      0);\n                      const currentValue = dataset.data[tooltipItem.dataIndex];\n                      const percentage = Math.floor(\n                        (currentValue / total) * 100 + 0.5\n                      );\n                      const label = tooltipItem.label;\n\n                      return `${label}: ${currentValue} (${percentage}%)`;\n                    },\n                  },\n                },\n                legend: {\n                  labels: {\n                    filter: (legendItem: any, data: any) => {\n                      return data.datasets[0].data[legendItem.index];\n                    },\n                  },\n                },\n              },\n            } as any\n          }\n          width={300}\n          data={{\n            labels: dealsStatusData[0] as any,\n            datasets: [\n              {\n                data: dealsStatusData[1],\n                backgroundColor: [\n                  \"rgba(54, 162, 235, 0.2)\",\n                  \"rgba(255, 99, 132, 0.2)\",\n                  \"rgba(255, 206, 86, 0.2)\",\n                  \"rgba(75, 192, 192, 0.2)\",\n                  \"rgba(153, 102, 255, 0.2)\",\n                  \"rgba(255, 159, 64, 0.2)\",\n                  \"rgba(39, 47, 148, 0.2)\",\n                ],\n                borderColor: [\n                  \"rgba(54, 162, 235, 1)\",\n                  \"rgba(255, 99, 132, 1)\",\n                  \"rgba(255, 206, 86, 1)\",\n                  \"rgba(75, 192, 192, 1)\",\n                  \"rgba(153, 102, 255, 1)\",\n                  \"rgba(255, 159, 64, 1)\",\n                  \"rgba(39, 47, 148, 1)\",\n                ],\n                borderWidth: 1,\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            HistogramChartOptions(\n              \"Finished deals duration histogram, hours\",\n              \"Duration, hours\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsDurationHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsDurationHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneBotCurrencyLeaderbord,\n  getOneBotAccumulativeProfitsChartData,\n  getOneBotProfitsChartData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsCharts.css\";\n\nexport const DCABotDetailsProfitsCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n\n  useEffect(() => {\n    setAccumulativeProfitsData(getOneBotAccumulativeProfitsChartData(deals));\n    setProfitsData(getOneBotProfitsChartData(deals));\n    setPairsLeaderbordData(getOneBotCurrencyLeaderbord(deals));\n  }, [deals]);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={AccumulativeChartOptions(\"Accumulative Profit, $\") as any}\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: \"Accumulative Profit, $\",\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={ProfitChartOptions(\"Daily Profit, $\") as any}\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      {bot.type !== \"Bot::SingleBot\" && (\n        <div className=\"DCABotDetailsChartContainer\">\n          <Bar\n            options={\n              LeaderbordChartOptions(\n                \"Pairs leaderboard by profit\",\n                pairsLeaderbordData[0]\n              ) as any\n            }\n            data={{\n              labels: pairsLeaderbordData[0],\n              datasets: [\n                {\n                  label: \"Profit, $\",\n                  data: pairsLeaderbordData[1],\n                  borderColor: \"rgb(53, 162, 235)\",\n                  backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                },\n              ],\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  getDealAgeInDaysSinceOpened,\n  getLastNDays,\n} from \"../../../../utils/DealsUtils\";\nimport { DCABotDetailsMainCharts } from \"../DCABotDetailsMain/DCABotDetailsMainCharts\";\nimport { DCABotDetailsProfitsCharts } from \"../DCABotDetailsProfits/DCABotDetailsProfitsCharts\";\nimport \"./DCABotDetailsCharts.css\";\n\nexport const DCABotDetailsCharts = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  timeRangeValue,\n}: {\n  account: any;\n  bot: IBot;\n  timeRangeValue: string;\n  infoKey: string;\n  deals: IDeal[];\n}) => {\n  const [dateLabelsDays, setDateLabelsDays] = useState<string[]>([]);\n  useEffect(() => {\n    if (deals) {\n      if (timeRangeValue === \"allTime\") {\n        const oldestDealAgeInDaysSinceOpened =\n          deals.length > 0\n            ? Math.ceil(getDealAgeInDaysSinceOpened(deals.slice(-1).pop()))\n            : 0;\n        setDateLabelsDays(\n          getLastNDays(\n            oldestDealAgeInDaysSinceOpened > 30\n              ? oldestDealAgeInDaysSinceOpened\n              : 30\n          )\n        );\n      } else if (timeRangeValue === \"30d\") {\n        setDateLabelsDays(getLastNDays(30));\n      }\n    }\n  }, [deals]);\n  return (\n    <>\n      {deals && dateLabelsDays && bot && account && (\n        <div className=\"DCABotDetailsCharts\">\n          {infoKey === \"main\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"settings\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"profits\" && (\n            <DCABotDetailsProfitsCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\n\nimport \"./DCABotDetailsDealsTable.css\";\nimport { Badge, Modal, Pagination, Table, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport { getDeal } from \"../../../../utils/ApiUtils\";\n\nconst badgeVariant = {\n  Cancelled: \"secondary\",\n  StopLoss: \"danger\",\n  Failed: \"warning\",\n  Completed: \"success\",\n  \"Closed at Market Price\": \"dark\",\n  Liquidated: \"dark\",\n  Switched: \"secondary\",\n};\n\nexport const DCABotDetailsDealsTable = ({\n  bot,\n  deals,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"ID\",\n          accessor: \"id\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Pair\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.pair.split(\"_\").reverse().join(\"/\");\n          },\n          id: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: \"localized_status\",\n          Cell: ({ cell: { value } }: any) => (\n            // @ts-ignore\n            <Badge style={{ fontSize: \"12px\" }} bg={badgeVariant[value]}>\n              {value}\n            </Badge>\n          ),\n          disableSortBy: true,\n        },\n        {\n          Header: \"Start\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.created_at);\n          },\n          id: \"created_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"End\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.closed_at);\n          },\n          id: \"closed_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"Duration, hrs\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            let start = moment.utc(originalRow.created_at);\n            let end = originalRow.closed_at\n              ? moment.utc(originalRow.closed_at)\n              : moment.utc();\n            return end.diff(start);\n          },\n          id: \"duration\",\n          Cell: ({ cell: { value } }: any) =>\n            `${moment.utc(value).format(\"HH:mm\")}`,\n        },\n        {\n          Header: \"Avg. entry price\",\n          id: \"bought_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.bought_average_price\n              : originalRow.sold_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Close price\",\n          id: \"sold_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.sold_average_price\n              : originalRow.bought_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n            const amount =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_amount,\n                    currency: baseCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_amount,\n                    currency: baseCurrency,\n                  });\n            const volume =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_volume,\n                    currency: quoteCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_volume,\n                    currency: quoteCurrency,\n                  });\n            return `${amount} ${baseCurrency}!${volume} ${quoteCurrency}`;\n          },\n          id: \"volume\",\n          Cell: ({ cell: { value } }: any) => {\n            const values = value.split(\"!\");\n            return (\n              <>\n                <div>{values[0]}</div>\n                <div>{values[1]}</div>\n              </>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Filled SO\",\n          accessor: \"completed_safety_orders_count\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, %\",\n          accessor: \"final_profit_percentage\",\n          Cell: ({ cell: { value } }: any) => `${value}%`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, $\",\n          accessor: \"usd_final_profit\",\n          sortType: (a: any, b: any) => {\n            a = Number(a.original.usd_final_profit);\n            b = Number(b.original.usd_final_profit);\n            return a > b ? 1 : -1;\n          },\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value);\n            return (\n              <Badge\n                style={{ fontSize: \"13px\" }}\n                bg={numberValue >= 0 ? \"success\" : \"danger\"}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency: \"USD\",\n                },\n                \"always\"\n              )} $`}</Badge>\n            );\n          },\n        },\n        {\n          Header: \"Profit in Base\",\n          id: \"profitBase\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.bought_amount) -\n              parseFloat(originalRow.sold_amount)\n            }!${originalRow.pair.split(\"_\")[1]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit in Quote\",\n          id: \"profitQuote\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.sold_volume) -\n              parseFloat(originalRow.bought_volume)\n            }!${originalRow.pair.split(\"_\")[0]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data: deals,\n      disableSortRemove: true,\n      autoResetPage: true,\n      autoResetSortBy: false,\n      initialState: { pageSize: 50, sortBy: [{ id: \"closed_at\", desc: true }] },\n    },\n    useSortBy,\n    usePagination\n  );\n  const [modalIsOpen, setModalIsOpen] = React.useState(false);\n  const [selectedDeal, setSelectedDeal] = React.useState(null as any);\n\n  return (\n    <div className=\"DCABotDetailsDealsTable\">\n      <DealModal\n        modalIsOpen={modalIsOpen}\n        setModalIsOpen={setModalIsOpen}\n        dealId={selectedDeal}\n      />\n      {pageCount > 1 && (\n        <TablePagination\n          pageIndex={pageIndex}\n          pageCount={pageCount}\n          gotoPage={gotoPage}\n          nextPage={nextPage}\n          previousPage={previousPage}\n        />\n      )}\n      <Table striped bordered {...getTableProps()} hover>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                {...row.getRowProps()}\n                onClick={() => {\n                  setSelectedDeal(row.original.id);\n                  setModalIsOpen(true);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nconst TablePagination = ({\n  pageIndex,\n  pageCount,\n  gotoPage,\n  nextPage,\n  previousPage,\n}: any) => {\n  const range = (start: number, end: number) =>\n    Array(end - start + 1)\n      .fill(0)\n      .map((_, idx) => start + idx);\n\n  const renderPaginationNumberItem = (page: any, pageIndex: any) => (\n    <Pagination.Item\n      active={page === pageIndex}\n      onClick={() => {\n        gotoPage(page);\n      }}\n      key={page}\n    >\n      {page + 1}\n    </Pagination.Item>\n  );\n\n  const renderPaginationBeginning = () => (\n    <>\n      <Pagination.First\n        onClick={() => {\n          gotoPage(0);\n        }}\n      />\n      <Pagination.Prev\n        onClick={() => {\n          previousPage();\n        }}\n      />\n      {pageIndex - 2 < 4 &&\n        renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n      {pageIndex - 1 < 4 &&\n        renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n    </>\n  );\n  const renderPaginationEnd = () => (\n    <>\n      <Pagination.Next\n        onClick={() => {\n          nextPage();\n        }}\n      />\n      <Pagination.Last\n        onClick={() => {\n          gotoPage(pageCount - 1);\n        }}\n      />\n    </>\n  );\n\n  return (\n    <>\n      {pageCount <= 16 && (\n        <Pagination>\n          {range(0, pageCount - 1).map((page) =>\n            renderPaginationNumberItem(page, pageIndex)\n          )}\n        </Pagination>\n      )}\n      {pageCount > 16 && (\n        <Pagination>\n          {pageIndex < 7 && (\n            <>\n              {range(0, 6).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n              {renderPaginationEnd()}\n            </>\n          )}\n\n          {pageIndex >= 7 && pageIndex <= pageCount - 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n              {renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n              <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\n              {renderPaginationNumberItem(pageIndex + 1, pageIndex)}\n              {renderPaginationNumberItem(pageIndex + 2, pageIndex)}\n              {renderPaginationEnd()}\n            </>\n          )}\n          {pageCount - pageIndex < 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {range(pageCount - 7, pageCount - 1).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n            </>\n          )}\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nconst DealModal = ({ modalIsOpen, setModalIsOpen, dealId }: any) => {\n  const [deal, setDeal] = React.useState(null as any);\n\n  useEffect(() => {\n    if (dealId) {\n      getDeal(dealId).then((dl) => {\n        setDeal(dl);\n      });\n    }\n  }, [dealId]);\n  return (\n    <>\n      {deal && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(false);\n          }}\n          scrollable\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{deal.id}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {deal.bot_events.length > 0 && (\n              <Table striped hover>\n                <thead>\n                  <tr>\n                    <th>Date/Time</th>\n                    <th>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {deal.bot_events.map((event: any) => (\n                    <tr key={event.created_at}>\n                      <td>\n                        {moment(event.created_at).format(\"D MMM, YYYY HH:mm\")}\n                      </td>\n                      <td>{event.message}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )}\n            {deal.bot_events.length === 0 && (\n              <blockquote className=\"blockquote mb-0\">\n                <p>\n                  “Nothing can last forever. There isn't any memory, no matter\n                  how intense, that doesn't fade out at last.”{\" \"}\n                </p>\n                <footer className=\"blockquote-footer\">Juan Rulfo</footer>\n              </blockquote>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                window.open(`https://3commas.io/deals/${dealId}`, \"_blank\");\n              }}\n            >\n              Open in 3commas\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getFundsLocked } from \"../../../utils/BotsUtils\";\nimport {\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../App\";\nimport {\n  getFundsLockedAndTodaysProfit,\n  getMaxUsageEffect,\n  getReturnsEffect,\n} from \"../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../state/deals/DealsEffects\";\nimport { useNavigate } from \"react-router-dom\";\nimport { is30daysDealsLoaded } from \"../../../state/deals/DealsSelectors\";\nimport { setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport moment from \"moment\";\nimport { differenceInDays } from \"../../../utils/DealsUtils\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TV\",\n  buy_or_strong_buy: \"Buy\",\n  strong_buy: \"Strong Buy\",\n  sell_or_strong_sell: \"Sell\",\n  strong_sell: \"Strong Sell\",\n  rsi: \"RSI\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nexport const getBotsStrategyName = (\n  strategiesState: any,\n  botsStrategy: string\n) => {\n  if (botsStrategy in strategyMap) {\n    return strategyMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [statsLoaded, setStatsLoaded] = useState(false);\n\n  const navigate = useNavigate();\n\n  const { deals } = dealsState;\n\n  useEffect(() => {\n    getFundsLockedAndTodaysProfit(\n      botsDispatch,\n      botsState,\n      errorsDispatch,\n      botItem.id\n    ).then(() => {\n      setStatsLoaded(true);\n    });\n  }, [botItem]);\n\n  useEffect(() => {\n    if (statsLoaded) {\n      getMaxUsageEffect(\n        botsDispatch,\n        botsState,\n        errorsDispatch,\n        botItem.id,\n        account\n      ).then();\n    }\n  }, [account, botItem, statsLoaded]);\n\n  useEffect(() => {\n    if (\n      botItem &&\n      !(\"returns\" in botItem) &&\n      \"maxUsage\" in botItem &&\n      is30daysDealsLoaded(dealsState, botItem.id)\n    ) {\n      getReturnsEffect(\n        botsDispatch,\n        botsState,\n        dealsState,\n        errorsDispatch,\n        botItem.id\n      );\n    }\n  }, [deals, botItem]);\n\n  const getReturns = async () => {\n    setDealsLimiter(Math.random());\n    fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botItem.id\n    );\n  };\n\n  const age = differenceInDays(moment(), moment(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy =\n    botItem.strategy_list.length === 1\n      ? getBotsStrategyName(strategiesState, botItem.strategy_list[0].strategy)\n      : \"Combined\";\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          {\"market_icon\" in account && (\n            <IconsSet\n              botType={botItem.type}\n              strategy={botItem.strategy}\n              botId={botItem.id}\n              marketIcon={account.market_icon}\n            />\n          )}\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={botItem.returns}\n              getReturns={getReturns}\n              maxUsage={botItem.maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>{account.name}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>{formatter.format(botItem.todayUsdProfit)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(botItem)\n                )}/${formatter.format(botItem.maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n          <div className=\"BotPreviewButtons\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                navigate({\n                  pathname: `/${botItem.id}`,\n                  search: window.location.search,\n                });\n              }}\n            >\n              {`View`}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, getReturns }: any) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const returnsCalculated = returns || returns === 0;\n\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      delay={{ show: 100, hide: 200 }}\n      overlay={<Tooltip>30 days profit / Max usage</Tooltip>}\n    >\n      <div className=\"BotReturnsContainer\">\n        {returnsCalculated && (\n          <div\n            className=\"BotReturnsValue\"\n            style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${formatter.format(returns || 0)}`}\n          </div>\n        )}\n        <div className=\"BotReturnsLabel\">Returns (30d)</div>\n        {!returnsCalculated && (\n          <Button\n            onClick={() => {\n              getReturns();\n            }}\n            variant=\"link\"\n            size=\"sm\"\n            active\n          >\n            Calculate\n          </Button>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ErrorsContext, StrategiesContext } from \"../../../../App\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { getAllActiveDeals } from \"../../../../state/deals/DealsEffects\";\nimport {\n  getCurrencyFormat,\n  getFundsLockedInBotCurrency,\n  getMaxUsageInBotCurrency,\n  getReservedFundsInBotCurrency,\n} from \"../../../../utils/BotsUtils\";\nimport { getAverageDealDuration } from \"../../../../utils/DealsUtils\";\nimport { getBotsStrategyName } from \"../../../BotsList/BotPreview/BotPreview\";\nimport \"./DCABotDetailsMainInfo.css\";\n\nexport const DCABotDetailsMainInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const { strategiesState } = useContext(StrategiesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [fundsLocked, setFundsLocked] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [fundsLockedShare, setFundsLockedShare] = useState(0);\n\n  const [maxUsage, setMaxUsage] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [reservedFunds, setReservedFunds] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n  });\n\n  const botPairs =\n    bot.pairs.length === 1\n      ? bot.pairs[0].split(\"_\").reverse().join(\"/\")\n      : `${bot.pairs.length} pairs`;\n  const botMarket =\n    bot.pairs.length === 1 ? \"\" : `${bot.pairs[0].split(\"_\")[0]} market`;\n\n  const startCondition = bot.strategy_list.map((strategy: any) => (\n    <div key={`${Math.random()}`}>{`${getBotsStrategyName(\n      strategiesState,\n      strategy.strategy\n    )}${\n      strategy.options.type\n        ? `, ${getBotsStrategyName(strategiesState, strategy.options.type)}`\n        : ``\n    }${strategy.options.percent ? `, ${strategy.options.percent}%` : ``}${\n      strategy.options.time ? `, ${strategy.options.time}` : ``\n    }${strategy.options.points ? `, ${strategy.options.points}` : ``}`}</div>\n  ));\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      getMaxUsageInBotCurrency(bot, account).then((mxUsg) => {\n        setMaxUsage(mxUsg);\n      });\n\n      getAllActiveDeals(errorsDispatch, bot.id).then((activeDeals: IDeal[]) => {\n        setReservedFunds(\n          getReservedFundsInBotCurrency(activeDeals, bot, account)\n        );\n        setFundsLocked(getFundsLockedInBotCurrency(activeDeals, bot, account));\n      });\n    }\n  }, [bot, account]);\n\n  useEffect(() => {\n    if (maxUsage.value && fundsLocked.value) {\n      setFundsLockedShare(fundsLocked.value / maxUsage.value);\n    }\n  }, [maxUsage, fundsLocked]);\n\n  const avgDealDuration = getAverageDealDuration(deals);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Account</div>\n        <div className=\"BotInfoTableRow\">{account.name}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Bot pairs</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{botPairs}</div>\n          <div>{botMarket}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Deal start condition</div>\n        <div className=\"BotInfoTableRow\">{startCondition}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Active deals/Max</div>\n        <div className=\"BotInfoTableRow\">{`${bot.active_deals_count}/${bot.max_active_deals}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Funds used</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{`${getCurrencyFormat(fundsLocked)} ${\n            fundsLocked.currency\n          }`}</div>\n          <div style={{ fontSize: \"10px\" }}>{`${percentFormatter.format(\n            fundsLockedShare\n          )} of max usage`}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max usage</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(maxUsage)} ${\n          maxUsage.currency\n        }`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Reserved funds</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(\n          reservedFunds\n        )} ${maxUsage.currency}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total finished deals</div>\n        <div className=\"BotInfoTableRow\">{deals.length}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Avg deal duration</div>\n        <div className=\"BotInfoTableRow\">{`${avgDealDuration} hrs`}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { getCurrencyFormat, getReturns } from \"../../../../utils/BotsUtils\";\nimport {\n  getAverageDailyProfit,\n  getAverageProfitFromDeal,\n  getAverageTp,\n  getTotalProfitUsd,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsInfo.css\";\n\nexport const DCABotDetailsProfitsInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    signDisplay: \"always\",\n  });\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const [averageTp, setAverageTp] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageProfitFromDeal, setAverageProfitFromDeal] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageDailyProfit, setAverageDailyProfit] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [returns, setReturns] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [totalProfitUsd, setTotalProfitUsd] = useState(0);\n\n  useEffect(() => {\n    if (bot.maxUsage) {\n      setAverageTp(getAverageTp(deals));\n      setAverageProfitFromDeal(getAverageProfitFromDeal(deals));\n      setAverageDailyProfit(getAverageDailyProfit(deals));\n      setReturns({ value: getReturns(bot.maxUsage, deals), currency: \"%\" });\n    }\n    setTotalProfitUsd(getTotalProfitUsd(deals));\n  }, [deals, bot]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Today's profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            (bot.todayUsdProfit || 0) < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(bot.todayUsdProfit || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            totalProfitUsd < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(totalProfitUsd)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Current uPnL</div>\n        <div\n          className={`BotInfoTableRow ${\n            parseFloat(bot.active_deals_usd_profit) < 0\n              ? \"showRed\"\n              : \"showGreen\"\n          }`}\n        >\n          {formatter.format(parseFloat(bot.active_deals_usd_profit))}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average TP, %</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageTp.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {`${getCurrencyFormat(averageTp)}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average profit from deal</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageProfitFromDeal.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageProfitFromDeal.value || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average daily profit</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageDailyProfit.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageDailyProfit.value)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Returns</div>\n        <div\n          className={`BotInfoTableRow ${\n            returns.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {percentFormatter.format(returns.value)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport {\n  getBaseOrderSize,\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSettingsInfo.css\";\n\nexport const DCABotDetailsSettingsInfo = ({\n  account,\n  bot,\n}: {\n  account: any;\n  bot: IBot;\n}) => {\n  const [baseOrderSize, setBaseOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setBaseOrderSize(getBaseOrderSize(bot, account));\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n    }\n  }, [bot, account]);\n\n  const leverage = bot.leverage_custom_value\n    ? parseInt(bot.leverage_custom_value)\n    : \"\";\n  const leverageType =\n    bot.leverage_type !== \"not_specified\" ? bot.leverage_type : \"\";\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Profit currency</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.profit_currency === \"quote_currency\" ? \"Quote\" : \"Base\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Take profit (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            {`${getCurrencyFormat({\n              value: parseFloat(bot.take_profit),\n              currency: \"%\",\n            })}%`}\n          </div>\n          <div>\n            {bot.take_profit_type === \"total\"\n              ? \"(from total volume)\"\n              : \"(from base volume)\"}\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Trailing</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.trailing_enabled &&\n            `${getCurrencyFormat({\n              value: parseFloat(bot.trailing_deviation),\n              currency: \"%\",\n            })}%`}\n          {!bot.trailing_enabled && \"OFF\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Stop loss (timeout)</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat({\n          value: parseFloat(bot.stop_loss_percentage),\n          currency: \"%\",\n        })}% (${bot.stop_loss_timeout_in_seconds} s)`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Base order size (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            <div>{`${getCurrencyFormat(baseOrderSize)} ${\n              baseOrderSize.currency\n            }${\n              baseOrderSize.additionalCurrency\n                ? ` (${baseOrderSize.additionalCurrency})`\n                : \"\"\n            }`}</div>\n            <div>{`(${bot.start_order_type})`}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Leverage (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{leverage || \"0\"}</div>\n          <div>{leverageType}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max safety trades (active)</div>\n        <div className=\"BotInfoTableRow\">{`${bot.max_safety_orders} (${bot.active_safety_orders_count})`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Price devition to open SO</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: parseFloat(bot.safety_order_step_percentage),\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO size</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat(safetyOrderSize)} ${safetyOrderSize.currency}${\n            safetyOrderSize.additionalCurrency\n              ? ` (${safetyOrderSize.additionalCurrency})`\n              : \"\"\n          }`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO volume scale</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.martingale_volume_coefficient}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO step scale</div>\n        <div className=\"BotInfoTableRow\">{bot.martingale_step_coefficient}</div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { BotInfo, IconsSet } from \"../../../BotsList/BotPreview/BotPreview\";\nimport { DCABotDetailsMainInfo } from \"../DCABotDetailsMain/DCABotDetailsMainInfo\";\nimport { DCABotDetailsProfitsInfo } from \"../DCABotDetailsProfits/DCABotDetailsProfitsInfo\";\nimport { DCABotDetailsSettingsInfo } from \"../DCABotDetailsSettings/DCABotDetailsSettingsInfo\";\nimport moment from \"moment\";\nimport \"./DCABotDetailsInfo.css\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\n\nexport const DCABotDetailsInfo = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  setInfoKey,\n  timeRangeValue,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  account: any;\n  infoKey: string;\n  setInfoKey: any;\n  timeRangeValue: string;\n}) => {\n  const age = differenceInDays(moment(), moment(bot.created_at));\n  return (\n    <div className=\"DCABotDetailsInfo\">\n      <div className=\"DCABotDetailsInfoLogo\">\n        <IconsSet\n          botType={bot.type}\n          strategy={bot.strategy}\n          botId={bot.id}\n          marketIcon={account.market_icon}\n        ></IconsSet>\n        <BotInfo\n          strategy={bot.strategy}\n          age={age}\n          is_enabled={bot.is_enabled}\n        />\n      </div>\n      <div className=\"DCABotDetailsInfoTable\">\n        <Tabs activeKey={infoKey} onSelect={(k) => setInfoKey(k)}>\n          <Tab eventKey=\"main\" title=\"Main\" tabClassName=\"InfoTab\">\n            <DCABotDetailsMainInfo account={account} bot={bot} deals={deals} />\n          </Tab>\n          <Tab eventKey=\"settings\" title=\"Settings\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSettingsInfo account={account} bot={bot} />\n          </Tab>\n          <Tab eventKey=\"profits\" title=\"Profits\" tabClassName=\"InfoTab\">\n            <DCABotDetailsProfitsInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n            />\n          </Tab>\n          {/* <Tab eventKey=\"safeties\" title=\"Safeties\" disabled></Tab>\n          <Tab eventKey=\"insights\" title=\"Insights\" disabled></Tab> */}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n","import moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  ProgressBar,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  AccountsContext,\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n} from \"../../../App\";\nimport { IBot } from \"../../../interfaces/Bot\";\nimport { IDeal } from \"../../../interfaces/Deal\";\nimport { fetchBot } from \"../../../state/bots/BotsEffects\";\nimport { fetchAllDealsForBot } from \"../../../state/deals/DealsEffects\";\nimport {\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n  selectAllDeals,\n  selectAllDealsWithin30Days,\n} from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\nimport \"./DCABotDetails.css\";\nimport { DCABotDetailsCharts } from \"./DCABotDetailsCharts/DCABotDetailsCharts\";\nimport { DCABotDetailsDealsTable } from \"./DCABotDetailsDealsTable/DCABotDetailsDealsTable\";\nimport { DCABotDetailsInfo } from \"./DCABotDetailsInfo/DCABotDetailsInfo\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst statusFilterOptions: any = [\n  { value: \"all\", label: \"All\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"StopLoss\", label: \"StopLoss\" },\n  { value: \"Failed\", label: \"Failed\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Closed at Market Price\", label: \"Closed at Market Price\" },\n  { value: \"Liquidated\", label: \"Liquidated\" },\n  { value: \"Switched\", label: \"Switched\" },\n];\n\nconst filterByStatus = (deals: IDeal[], status: string) => {\n  return status === \"all\"\n    ? deals\n    : deals.filter((deal) => deal.localized_status === status);\n};\n\nconst filterByPair = (deals: IDeal[], pair: string) => {\n  return pair === \"all\" ? deals : deals.filter((deal) => deal.pair === pair);\n};\n\nconst filterFrom = (deals: IDeal[], dateFrom: any) => {\n  return !dateFrom ||\n    moment(\"01-04-2018\", \"MM-DD-YYYY\").isAfter(dateFrom, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateFrom, \"day\") ||\n          moment(deal.closed_at).isAfter(dateFrom)\n      );\n};\n\nconst filterTo = (deals: IDeal[], dateTo: any) => {\n  return !dateTo || moment().isSame(dateTo, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateTo, \"day\") ||\n          moment(deal.closed_at).isBefore(dateTo)\n      );\n};\n\nexport const DCABotDetails = () => {\n  let params = useParams();\n  let navigate = useNavigate();\n\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const {\n    botsState: { bots },\n  } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n  const [botId, setBotId] = useState(NaN);\n  const previousBotId = usePrevious(botId);\n  const [bot, setBot] = useState<IBot | null>(null);\n  const [botsDeals, setBotsDeals] = useState<IDeal[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(false);\n  const [isAllDataLoading, setIsAllDataLoading] = useState(false);\n  const [account, setAccount] = useState({});\n  const [infoKey, setInfoKey] = useState(\"main\");\n  const [percentLoadedDeals, setPercentLoadedDeals] = useState(0);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [pairFilter, setPairFilter] = useState(\"all\");\n  const [pairFilterOptions, setPairFilterOptions] = useState([] as any);\n  const [fromFilter, setFromFilter] = useState(new Date(\"2018-04-02\"));\n  const [toFilter, setToFilter] = useState(new Date());\n\n  const clearFilters = () => {\n    setStatusFilter(\"all\");\n    setPairFilter(\"all\");\n    setFromFilter(new Date(\"2018-04-02\"));\n    setToFilter(new Date());\n  };\n\n  const timeRangeRadios = [\n    { name: \"30 days\", value: \"30d\" },\n    { name: \"All time\", value: \"allTime\" },\n  ];\n\n  const getAccountById = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const refreshData = () => {\n    setDealsLimiter(Math.random());\n    fetchBot(botsDispatch, botsState, errorsDispatch, botId);\n    fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId, true);\n  };\n\n  useEffect(() => {\n    if (params.botId) {\n      setBotId(parseInt(params.botId));\n    }\n  }, [params]);\n\n  useEffect(() => {\n    setDealsLimiter(Math.random());\n    if (botId && !previousBotId) {\n      fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId);\n    }\n  }, [botId]);\n\n  useEffect(() => {\n    if (bot && accounts.length > 0) {\n      setAccount(getAccountById(bot.account_id));\n    }\n  }, [bot, accounts]);\n\n  useEffect(() => {\n    if (botId) {\n      setBot(bots[botId]);\n    }\n  }, [botId, bots]);\n\n  useEffect(() => {\n    if (botId) {\n      if (timeRangeValue === \"30d\") {\n        setIsDataLoading(!is30daysDealsLoaded(dealsState, botId));\n      } else if (timeRangeValue === \"allTime\") {\n        setIsDataLoading(!isAllDealsLoaded(dealsState, botId));\n      }\n      setIsAllDataLoading(!isAllDealsLoaded(dealsState, botId));\n    }\n  }, [dealsState, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      clearFilters();\n      setBotsDeals(deals);\n    }\n  }, [isDataLoading, isAllDataLoading, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      deals = filterByPair(deals, pairFilter);\n      deals = filterByStatus(deals, statusFilter);\n      deals = filterTo(deals, toFilter);\n      deals = filterFrom(deals, fromFilter);\n      setBotsDeals(deals);\n    }\n  }, [pairFilter, statusFilter, fromFilter, toFilter]);\n\n  useEffect(() => {\n    if (\n      botId &&\n      bot &&\n      dealsState.deals[botId] &&\n      dealsState.deals[botId].offset\n    ) {\n      const loadedDeals = dealsState.deals[botId].offset || 0;\n      setPercentLoadedDeals(\n        Math.ceil((loadedDeals * 100) / parseFloat(bot.finished_deals_count))\n      );\n    }\n  }, [dealsState, botId, bot]);\n\n  useEffect(() => {\n    if (bot) {\n      setPairFilterOptions([\n        { value: \"all\", label: \"All\" },\n        ...bot.pairs.map((pair) => ({\n          value: pair,\n          label: pair.split(\"_\").reverse().join(\"/\"),\n        })),\n      ]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    return () => {\n      // reset limiter everytime to stop all the jobs\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  return (\n    <div className=\"DCABotDetails\">\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        className=\"DCABotDetailsGetBackButton\"\n        onClick={() => {\n          navigate(-1);\n        }}\n      >\n        {`< Back to bots list`}\n      </Button>\n      {!isAllDataLoading && (\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            refreshData();\n          }}\n        >\n          {`Refresh data`}\n        </Button>\n      )}\n      {isDataLoading && !percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar now={100} animated className=\"BotDetailsProgressBar\" />\n          </div>\n        </>\n      )}\n      {isDataLoading && !!percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar\n              now={percentLoadedDeals}\n              label={`${percentLoadedDeals}%`}\n              className=\"BotDetailsProgressBar\"\n            />\n          </div>\n        </>\n      )}\n      {!isDataLoading && bot && account && (\n        <>\n          <DCABotDetailsCharts\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          <div className=\"BotDetailsControlsContainer\">\n            <div className=\"BotDetailsControl\">\n              <ButtonGroup>\n                {timeRangeRadios.map((radio, idx) => (\n                  <ToggleButton\n                    key={idx}\n                    id={`radio-${idx}`}\n                    type=\"radio\"\n                    variant=\"outline-primary\"\n                    name=\"radio\"\n                    value={radio.value}\n                    checked={timeRangeValue === radio.value}\n                    onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                  >\n                    {radio.name}\n                  </ToggleButton>\n                ))}\n              </ButtonGroup>\n            </div>\n            <div className=\"BotDetailsControl\">\n              <div className=\"BotDetailsFilterTitle\">Status:</div>\n              <Select\n                onChange={(option: any): void => {\n                  setStatusFilter(option.value);\n                }}\n                value={\n                  statusFilterOptions.find(\n                    (option: any) => option.value === statusFilter\n                  ) as any\n                }\n                className=\"BotDetailsStatusFilter\"\n                theme={(theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary25: \"#00a59a\",\n                    primary: \"#00a59a\",\n                  },\n                })}\n                options={statusFilterOptions as any}\n              />\n            </div>\n            {bot && bot.pairs.length > 1 && (\n              <div className=\"BotDetailsControl\">\n                <div className=\"BotDetailsFilterTitle\">Pair:</div>\n                <Select\n                  onChange={(option: any): void => {\n                    setPairFilter(option.value);\n                  }}\n                  value={\n                    pairFilterOptions.find(\n                      (option: any) => option.value === pairFilter\n                    ) as any\n                  }\n                  className=\"BotDetailsPairFilter\"\n                  options={pairFilterOptions as any}\n                  theme={(theme) => ({\n                    ...theme,\n                    colors: {\n                      ...theme.colors,\n                      primary25: \"#00a59a\",\n                      primary: \"#00a59a\",\n                    },\n                  })}\n                />\n              </div>\n            )}\n            {timeRangeValue === \"allTime\" && (\n              <>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">From:</div>\n                  <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={fromFilter}\n                    onChange={(date) => {\n                      setFromFilter(date as any);\n                    }}\n                    selectsStart\n                    startDate={fromFilter}\n                    endDate={toFilter}\n                    className=\"BotDetailsDateFilter\"\n                    strictParsing\n                  />\n                </div>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">To:</div>\n                  <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={toFilter}\n                    onChange={(date) => setToFilter(date as any)}\n                    selectsEnd\n                    startDate={fromFilter}\n                    endDate={toFilter}\n                    minDate={fromFilter}\n                    className=\"BotDetailsDateFilter\"\n                    strictParsing\n                  />\n                </div>\n              </>\n            )}\n            <div className=\"BotDetailsControl\">\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  clearFilters();\n                }}\n              >\n                {`Clear filters`}\n              </Button>\n            </div>\n          </div>\n          <div className=\"DCABotInfoGroup\">\n            <div className=\"DCABotName\">{bot.name}</div>\n            <div className=\"DCABotId\">{`(Bot ID: ${bot.id})`}</div>\n            <div className=\"DCABotLinkTo3Commas\">\n              <Button\n                onClick={() => {\n                  window.open(`https://3commas.io/bots/${botId}`, \"_blank\");\n                }}\n                variant=\"link\"\n                size=\"sm\"\n                active\n              >\n                Open in 3Commas\n              </Button>\n            </div>\n          </div>\n          <DCABotDetailsInfo\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            setInfoKey={setInfoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          {botsDeals.length > 0 && (\n            <DCABotDetailsDealsTable bot={bot} deals={botsDeals} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, BotsContext } from \"../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\nimport { setBotsFilters } from \"../../state/bots/BotsActions\";\n\nconst BotsFilters = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const { filters } = botsState;\n\n  const updateFilter = async (filterItem: any) => {\n    botsDispatch(\n      setBotsFilters({\n        ...botsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accounts.map((account: any) => ({\n      value: account.id,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${account.market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{account.name}</span>\n        </div>\n      ),\n      label_id: account.name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ account: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filters.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ scope: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filters.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ type: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filters.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ sorting: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filters.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { BotsContext, DealsContext, ErrorsContext } from \"../../../App\";\nimport { fetchBots } from \"../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../state/deals/DealsEffects\";\nimport { is30daysDealsLoaded } from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport \"./BotsListCharts.css\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../utils/ChartsUtils\";\nimport {\n  calculateProfitPerDayForListOfBots,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"../../../utils/DealsUtils\";\nimport { getBotsLeaderboardChartData } from \"../../../utils/BotsUtils\";\n\nconst BotsListCharts = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { deals } = dealsState;\n  const { list, hasMore, offset, bots } = botsState;\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [dealsLoaded, setDealsLoaded] = useState(false);\n  const [botsLoaded, setBotsLoaded] = useState(false);\n\n  const [numberHandled, setNumberHandled] = useState(0);\n  const [profitsChartData, setProfitsChartData] = useState<any>([[], []]);\n  const [accumulativeProfitsChartData, setAccumulativeProfitsChartData] =\n    useState<any>([[], []]);\n  const [botsLeaderboardChartData, setBotsLeaderboardChartData] = useState<any>(\n    [[], [], []]\n  );\n\n  //first get all bots\n  const getBotsList = async () => {\n    if (hasMore && offset !== 0) {\n      await fetchBots(botsDispatch, botsState, errorsDispatch, false, 100);\n    }\n  };\n\n  useEffect(() => {\n    getBotsList().then(() => {\n      if (!hasMore) {\n        setBotsLoaded(true);\n      }\n    });\n  }, [offset]);\n\n  // get deals\n  const getBoatsDeals = async () => {\n    setDealsLimiter(Math.random());\n\n    for (const botId of list) {\n      if (!is30daysDealsLoaded(dealsState, botId)) {\n        await fetchDealsForBotFor30Days(\n          dealsState,\n          dealsDispatch,\n          errorsDispatch,\n          botId\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (botsLoaded) {\n      getBoatsDeals().then(() => {\n        setDealsLoaded(true);\n      });\n    }\n  }, [botsLoaded]);\n\n  // then calculate data for charts\n  useEffect(() => {\n    if (dealsLoaded) {\n      const profitsObject = calculateProfitPerDayForListOfBots(\n        dealsState,\n        list\n      );\n      setProfitsChartData(getProfitChartData(profitsObject));\n      setAccumulativeProfitsChartData(\n        getAccumulativeProfitChartData(profitsObject)\n      );\n      setBotsLeaderboardChartData(getBotsLeaderboardChartData(botsState));\n    }\n  }, [dealsLoaded, bots]);\n\n  // reset limiter everytime to stop all the jobs\n  useEffect(() => {\n    return () => {\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  // update data for loader\n  useEffect(() => {\n    const botsWithLoadedDeals = list.filter((botId: number) =>\n      is30daysDealsLoaded(dealsState, botId)\n    );\n    setNumberHandled((botsWithLoadedDeals.length / list.length) * 100);\n  }, [deals]);\n\n  return (\n    <div className=\"BotsListCharts\">\n      {!dealsLoaded && (\n        <div className=\"ProgressBar\">\n          {!botsLoaded ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <ProgressBar\n              now={Math.ceil(numberHandled)}\n              label={`${Math.ceil(numberHandled)}%`}\n            />\n          )}\n        </div>\n      )}\n      {dealsLoaded && (\n        <>\n          <div className=\"ChartContainer\">\n            <Line\n              options={\n                AccumulativeChartOptions(\n                  \"Total Accumulative Profit (30 days), $\"\n                ) as any\n              }\n              data={{\n                labels: accumulativeProfitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Accumulative Profit, $\",\n                    data: accumulativeProfitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    fill: { value: 0 },\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={ProfitChartOptions(\"Total Profit (30 days), $\") as any}\n              data={{\n                labels: profitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Profit, $\",\n                    data: profitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={\n                LeaderbordChartOptions(\n                  \"Funds locked/Max usage, $\",\n                  botsLeaderboardChartData[0]\n                ) as any\n              }\n              data={{\n                labels: botsLeaderboardChartData[0],\n                datasets: [\n                  {\n                    label: \"Funds locked, $\",\n                    data: botsLeaderboardChartData[1],\n                    borderColor: \"rgb(255, 99, 132)\",\n                    backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                  },\n                  {\n                    label: \"Max usage, $\",\n                    data: botsLeaderboardChartData[2],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BotsListCharts;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  BotsContext,\n  DealsContext,\n} from \"../../App\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { fetchBots } from \"../../state/bots/BotsEffects\";\nimport BotsListCharts from \"./BotsListCharts/BotsListCharts\";\nimport { usePrevious } from \"../../utils/GeneralUtils\";\n\nconst haveAllBotsDealsFor30Days = (botsList: any, deals: any) =>\n  botsList.every((botId: any) => botId in deals);\n\nexport const BotsList = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    dealsState: { deals },\n  } = useContext(DealsContext);\n  const { list, hasMore, filters, bots } = botsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [showCharts, setShowCharts] = useState(false);\n\n  const getAccountByBotId = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const previousFilters = usePrevious(filters);\n\n  useEffect(() => {\n    if (!previousFilters && list.length) {\n      setShowCharts(haveAllBotsDealsFor30Days(list, deals));\n    } else {\n      setShowCharts(false);\n      fetchBots(botsDispatch, botsState, errorsDispatch, true).then();\n    }\n  }, [filters]);\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={list.length}\n      next={async () => {\n        if (list.length) {\n          await fetchBots(botsDispatch, botsState, errorsDispatch, false);\n        }\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      {showCharts ? (\n        <BotsListCharts />\n      ) : (\n        <div className=\"ShowChartsButtonContainer\">\n          <Button\n            className=\"ShowChartsButton\"\n            onClick={() => {\n              setShowCharts(true);\n            }}\n          >\n            Calculate profits\n          </Button>\n        </div>\n      )}\n      <div className=\"BotsList\">\n        {accounts.length > 0 &&\n          list.map((botId: number) => (\n            <BotPreview\n              botItem={bots[botId]}\n              key={botId}\n              account={getAccountByBotId(bots[botId].account_id)}\n            />\n          ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React from \"react\";\nimport BotsFilters from \"../BotsFilters/BotsFilters\";\nimport { BotsList } from \"../BotsList/BotsList\";\nimport \"./DCABotsList.css\";\n\nexport const DCABotsList = () => (\n  <>\n    <BotsFilters />\n    <BotsList />\n  </>\n);\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport { DCABotDetails } from \"./components/DCABotsList/DCABotDetails/DCABotDetails\";\nimport { DCABotsList } from \"./components/DCABotsList/DCABotsList\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<DCABotsList />} />\n        <Route path=\":botId\" element={<DCABotDetails />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default Router;\n\n{\n  /* <Route index element={<Home />} />\n        <Route path=\"teams\" element={<Teams />}>\n          <Route path=\":teamId\" element={<Team />} />\n          <Route path=\"new\" element={<NewTeamForm />} />\n          <Route index element={<LeagueStandings />} />\n        </Route> */\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"./Router\";\n\nconst ROUTE_BASENAME = \"/botanstage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <BrowserRouter basename={ROUTE_BASENAME}> */}\n    <BrowserRouter>\n      <Router />\n    </BrowserRouter>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}