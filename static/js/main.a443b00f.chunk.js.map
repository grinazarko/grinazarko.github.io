{"version":3,"sources":["components/BotsFilters/BotsFilters.tsx","utils/ApiUtils.tsx","utils/BotsUtils.tsx","components/BotsList/BotPreview/BotPreview.tsx","components/BotsList/BotsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BotsFilters","useContext","FiltersContext","filtersState","filtersDispatch","scopeOptions","value","label","typeOptions","className","onChange","option","type","payload","find","scope","options","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","API_KEY","URLSearchParams","window","location","search","get","SECRET","fetch","headers","APIKEY","Signature","bot","account","a","id","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","split","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","includes","Promise","resolve","then","response","json","marketInfo","last","currencyPriceInUsd","accountId","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","rsi","manual","ult","ta_preset","cqs_telegram","BotPreview","botItem","useState","profits_in_usd","funds_locked_in_active_deals","today_usd_profit","overall_usd_profit","stats","setStats","useEffect","data","market_icon","name","setAccount","setMaxUsage","getMaxUsage","mxUsg","b","age","Date","created_at","Math","floor","getTime","formatter","Intl","NumberFormat","style","strategy_list","length","botType","botId","marketIcon","is_enabled","Table","striped","size","fontSize","marginBottom","fontWeight","width","active_deals_count","format","active_deals_usd_profit","IconsSet","backgroundImage","src","String","slice","alt","BotName","BotInfo","Badge","bg","text","BotReturns","color","BotsList","bots","setBots","offset","setOffset","hasMore","setHasMore","getBotsUrl","resetOffset","dataLength","next","os","loader","Spinner","animation","endMessage","textAlign","map","initialFiltersState","filtersReducer","state","action","Error","createContext","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a443b00f.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { FiltersContext } from \"../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\n\nconst BotsFilters = () => {\n  const { filtersState, filtersDispatch } = useContext(FiltersContext);\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setScope\", payload: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filtersState.scope\n          )}\n          options={scopeOptions}\n          className=\"scopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setType\", payload: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filtersState.type\n          )}\n          options={typeOptions}\n          className=\"typeFilter\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import CryptoJS from \"crypto-js\";\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (method: string, path: string) => {\n  const API_KEY =\n    new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\n  const SECRET =\n    new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n  return fetch(`https://api.3commas.io${path}`, {\n    method: method,\n    headers: {\n      APIKEY: API_KEY,\n      Signature: getSig(path, SECRET),\n    },\n  });\n};\n","import { callApi } from \"./ApiUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account.id) {\n    return 0;\n  }\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    return await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response) => response.json())\n      .then((marketInfo) => parseFloat(marketInfo.last));\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nconst isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\n// export async function getReturns(maxUsage: any, botId: any) {\n//   if (!maxUsage) {\n//     return 0;\n//   }\n//   const limit = 100;\n//   let offset = 0;\n//   let deals = [];\n\n//   const newDeals = await callApi(\n//     \"GET\",\n//     `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=completed&order=closed_at`\n//   ).then((response) => response.json());\n// }\n","import React, { useEffect, useState } from \"react\";\nimport { callApi } from \"../../../utils/ApiUtils\";\nimport { Table } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getMaxUsage } from \"../../../utils/BotsUtils\";\n\nconst differenceInDays = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60 * 24));\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TradingView Screener\",\n  rsi: \"RSI-3m-20\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n};\n\nexport const BotPreview = ({ botItem }: any) => {\n  const [stats, setStats] = useState({\n    profits_in_usd: {\n      funds_locked_in_active_deals: 0,\n      today_usd_profit: 0,\n      overall_usd_profit: 0,\n    },\n  });\n  useEffect(() => {\n    callApi(\"GET\", `/public/api/ver1/bots/stats?bot_id=${botItem.id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setStats(data);\n      });\n  }, []);\n\n  const [account, setAccount] = useState({ id: \"\", market_icon: \"\", name: \"\" });\n  useEffect(() => {\n    callApi(\"GET\", `/public/api/ver1/accounts/${botItem.account_id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setAccount(data);\n      });\n  }, []);\n\n  const [maxUsage, setMaxUsage] = useState(0);\n  useEffect(() => {\n    getMaxUsage(botItem, account).then((mxUsg) => {\n      setMaxUsage(mxUsg);\n    });\n  }, [account, botItem]);\n\n  // const [returns, setReturns] = useState(0);\n  // useEffect(() => {\n  //   getReturns(maxUsage, botItem.id).then((returns: any) => {\n  //     setReturns(returns);\n  //   });\n  // }, [maxUsage]);\n\n  const age = differenceInDays(new Date(), new Date(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  let strategy = botItem.strategy_list[0].strategy;\n\n  if (botItem.strategy_list.length > 1) {\n    strategy = \"Combined\";\n  } else if (strategy in strategyMap) {\n    strategy = strategyMap[strategy];\n  }\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet\n            botType={botItem.type}\n            strategy={botItem.strategy}\n            botId={botItem.id}\n            marketIcon={account.market_icon}\n          />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>{account.name}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>\n                  {formatter.format(stats.profits_in_usd.today_usd_profit)}\n                </td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>\n                  {formatter.format(stats.profits_in_usd.overall_usd_profit)}\n                </td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  stats.profits_in_usd.funds_locked_in_active_deals\n                )}/${formatter.format(maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = () => (\n  <div className=\"BotReturnsContainer\">\n    <div\n      className=\"BotReturnsValue\"\n      style={{ color: \"#198754\" }}\n    >{`+1000%`}</div>\n    <div className=\"BotReturnsLabel\">Returns (30d)</div>\n  </div>\n);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { callApi } from \"../../utils/ApiUtils\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport { FiltersContext } from \"../../App\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport const BotsList = () => {\n  const { filtersState } = useContext(FiltersContext);\n  const limit = 10;\n  const [bots, setBots] = useState<Array<any>>([]);\n  const [offset, setOffset] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const getBotsUrl = (resetOffset = false) =>\n    `/public/api/ver1/bots?offset=${resetOffset ? 0 : offset}&limit=${limit}${\n      filtersState.scope ? `&scope=${filtersState.scope}` : \"\"\n    }${filtersState.type ? `&strategy=${filtersState.type}` : \"\"}`;\n\n  const getMore = () => {\n    return callApi(\"GET\", getBotsUrl())\n      .then((response) => response.json())\n      .then((data: Array<any>) => {\n        if (data.length === 0) {\n          setHasMore(false);\n        }\n        setOffset((os) => os + limit);\n        setBots((bots) => [...bots, ...data]);\n      });\n  };\n\n  useEffect(() => {\n    setHasMore(true);\n    callApi(\"GET\", getBotsUrl(true))\n      .then((response) => response.json())\n      .then((data: Array<any>) => {\n        setBots(data);\n        setOffset(limit);\n        if (data.length < limit) {\n          setHasMore(false);\n        }\n      });\n  }, [filtersState]);\n\n  return (\n    <InfiniteScroll\n      dataLength={bots.length} //This is important field to render the next data\n      next={getMore}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      <div className=\"BotsList\">\n        {bots.map((bot: any) => (\n          <BotPreview botItem={bot} key={bot.id} />\n        ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React, { createContext, useReducer } from \"react\";\nimport \"./App.css\";\nimport BotsFilters from \"./components/BotsFilters/BotsFilters\";\nimport { BotsList } from \"./components/BotsList/BotsList\";\n\nconst initialFiltersState = {\n  scope: \"\",\n  type: \"\",\n};\n\nfunction filtersReducer(state = initialFiltersState, action: any) {\n  switch (action.type) {\n    case \"setScope\":\n      return { ...state, scope: action.payload };\n    case \"setType\":\n      return { ...state, type: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nexport const FiltersContext = createContext({\n  filtersState: initialFiltersState,\n  filtersDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [filtersState, filtersDispatch] = useReducer(\n    filtersReducer,\n    initialFiltersState\n  );\n  return (\n    <FiltersContext.Provider value={{ filtersState, filtersDispatch }}>\n      <div className=\"App\">\n        <BotsFilters />\n        <BotsList />\n      </div>\n    </FiltersContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}