{"version":3,"sources":["reportWebVitals.ts","components/ErrorsAlerts/ErrorsAlerts.tsx","state/bots/BotsReducer.tsx","state/deals/DealsReducer.tsx","utils/ApiUtils.tsx","components/NavBar/NavBar.tsx","state/gridBots/GridBotsReducer.tsx","state/smartTrades/SmartTradesReducer.tsx","state/accounts/AccountsReducer.tsx","state/accounts/AccountsActions.tsx","state/accounts/AccountsEffects.tsx","App.tsx","utils/BotsUtils.tsx","components/Accounts/AccountsList/AccountPreview/AccountPreview.tsx","utils/ChartsUtils.tsx","components/Accounts/AccountDetails/AccountDetails.tsx","components/Accounts/AccountsList/AccountsList.tsx","components/Accounts/AccountsSummaryPreview/AccountsSummaryPreview.tsx","components/Accounts/Accounts.tsx","utils/DealsUtils.tsx","state/deals/DealsSelectors.tsx","state/bots/BotsActions.tsx","state/bots/BotsEffects.tsx","state/deals/DealsActions.tsx","state/deals/DealsEffects.tsx","utils/GeneralUtils.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsCharts/DCABotDetailsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsDealsTable/DCABotDetailsDealsTable.tsx","components/CommonComponents/CurrencyIcon/CurrencyIcon.tsx","components/DCABots/BotsList/BotPreview/BotPreview.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsSettings/DCABotDetailsSettingsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsInfo/DCABotDetailsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetails.tsx","components/DCABots/BotsFilters/BotsFilters.tsx","components/DCABots/BotsList/BotsListCharts/BotsListCharts.tsx","components/DCABots/BotsList/BotsList.tsx","components/DCABots/DCABots.tsx","utils/GridBotsUtils.tsx","state/gridBots/GridBotsActions.tsx","state/gridBots/GridBotsEffects.tsx","components/GridBots/GridBotsList/GridBotsListTable/GridBotsListTable.tsx","components/GridBots/GridBotDetails/GridBotDetailsCharts/GridBotDetailsCharts.tsx","components/GridBots/GridBotDetails/GridBotDetailsTable/GridBotDetailsTable.tsx","components/GridBots/GridBotDetails/GridBotDetails.tsx","components/GridBots/GridBotsList/GridBotListMetrics/GridBotListMetrics.tsx","components/GridBots/GridBotsList/GridBotsList.tsx","components/GridBots/GridBots.tsx","state/smartTrades/SmartTradesActions.tsx","state/smartTrades/SmartTradesEffects.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsTable/SmartTradeDetailsTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetails.tsx","utils/SmartTradesUtil.tsx","components/SmartTrades/SmartTradesList/SmartTradesCharts/SmartTradesCharts.tsx","components/SmartTrades/SmartTradesList/SmartTradesFilters/SmartTradesFilters.tsx","components/SmartTrades/SmartTradesList/SmartTradesTable/SmartTradesTable.tsx","components/SmartTrades/SmartTradesList/SmartTradesList.tsx","components/SmartTrades/SmartTrades.tsx","Router.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorsAlerts","useContext","ErrorsContext","errors","errorsState","errorsDispatch","className","length","Alert","variant","onClose","type","dismissible","Heading","map","error","Link","onClick","window","open","botsStateInitializer","initialValue","initialBotsState","storedFilters","JSON","parse","localStorage","getItem","filters","list","hasMore","limit","offset","scope","account","sorting","bots","botsReducer","state","action","newList","payload","bot","id","newBots","_","keyBy","botId","Error","initialDealsState","deals","activeDeals","dealsReducer","period","periodInDays","newDeals","omit","commonLimiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","DEAL_LIMITER_SETTINGS","minTime","maxConcurrent","clearDatastore","timeout","API_KEY","URLSearchParams","location","search","get","SECRET","dealsLimiter","setDealsLimiter","limiterId","getDealsLimiter","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","limiter","schedule","fetch","headers","APIKEY","Signature","getBots","accountId","a","resetOffset","split","sortBy","sortDirection","getBotsUrl","response","json","getGridBots","accountTypes","accountTypesParams","accountType","join","getSmartTrades","page","perPage","pair","status","from","getSmartTradesUrl","getSmartTradeTrades","smartTradeId","getBot","getGridBotsProfits","gridBotId","getGridBotsMarketOrders","getDeal","dealId","getAccounts","getAccount","getAccountTableData","getAccountPieChartData","getAccountActiveTradingEntities","getAccountBalanceChartData","dateFrom","getDeals","order","getStrategies","getBotStats","NavBar","useState","activeKey","setActiveKey","navigate","useNavigate","useLocation","useEffect","pathname","src","alt","Nav","Item","active","gridBotsStateInitializer","initialGridBotsState","gridBots","gridBotsReducer","gridBot","newGridBots","smartTradesStateInitializer","initialSmartTradesState","label","to","smartTrades","smartTradesReducer","smartTrade","newSmartTrades","initialAccountsState","accounts","accountTableData","accountPieChartData","accountActiveTradingEntities","accountsReducer","newAccounts","setNewAccountsList","accountsList","setHasMore","addToAccountsList","setAccount","setAccountTableData","setAccountPieChartData","setAccountActiveTradingEntities","accountsDispatch","accountsState","customLimit","data","fetchAccount","fetchAccountTableData","fetchAccountPieChartData","ChartJS","register","CategoryScale","PointElement","LinearScale","BarElement","Title","Tooltip","LineElement","Legend","TimeScale","Filler","ArcElement","initialStrategiesState","strategies","initialErrorsState","errorsReducer","Set","add","Array","strategiesReducer","AccountsContext","createContext","StrategiesContext","strategiesState","strategiesDispatch","BotsContext","botsState","botsDispatch","GridBotsContext","gridBotsState","gridBotsDispatch","SmartTradesContext","smartTradesState","smartTradesDispatch","DealsContext","dealsState","dealsDispatch","App","useReducer","getStrategiesData","fetchAccounts","Provider","value","Spinner","animation","getMaxUsage","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","includes","Promise","resolve","marketInfo","last","currencyPriceInUsd","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","find","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getFundsLocked","fundsLocked","getCurrencyFormat","signDisplay","Intl","NumberFormat","maximumFractionDigits","format","maxUsageInUsd","getReturns","reduce","currDeal","nextDeal","usd_final_profit","marketTypes","spot","margin","futures","AccountIcons","accountPieChart","supported_market_types","style","backgroundImage","market_icon","AccountPieChart","labels","dataItem","code","datasets","y","backgroundColor","str","hash","i","charCodeAt","colour","substr","stringToColour","borderWidth","options","plugins","legend","display","tooltip","callbacks","tooltipItem","currentValue","dataset","dataIndex","bodyFont","size","AccountInfo","moment","created_at","updated_at","api_key_invalid","AccountPreview","setAccountPieChart","accountActiveTrading","setAccountActiveTrading","fetchAccountActiveTradingEntities","flexGrow","marginLeft","name","Table","fontSize","fontWeight","usd_amount","day_profit_usd","btc_amount","day_profit_btc","marginTop","active_bots_count","active_deals_count","active_smart_trades_count","active_grid_bots_count","Button","ProfitChartOptions","text","tooltipCustomVaueFormat","scales","x","time","unit","tooltipFormat","ticks","source","beginAtZero","responsive","title","intersect","mode","AccumulativeChartOptions","lineTension","gridLines","offsetGridLines","filler","propagate","drawTime","TimeLineChartOptions","maintainAspectRatio","LeaderbordChartOptions","indexAxis","stacked","callback","slice","DealsCountBarChartOptions","isWeekUnit","stepSize","AccountBalancesTable","accountTable","accountFilteredTable","setAccountFilteredTable","accountFilter","setAccountFilter","hideSmallBalances","setHideSmallBalances","balancesCurrency","setBalancesCurrency","orderBy","filter","tableData","toUpperCase","usd_value","percentage","FormControl","onChange","e","target","width","marginRight","FormCheck","checked","ButtonGroup","ToggleButton","currentTarget","row","currency_name","current_price","day_change_percent_usd","day_change_percent_btc","position","btc_value","AccountDetails","setAccountId","setAccountTable","accountHistoryData","setAccountHistoryData","accountMode","setAccountMode","historyCurrency","setHistoryCurrency","subtract","toDate","historyDate","setHistoryDate","params","useParams","result","dateFormat","selected","date","selectsStart","strictParsing","usd_profit","usd_profit_percentage","total_usd_profit","btc_profit","btc_profit_percentage","total_btc_profit","parsed","historyData","unix","usd","btc","borderColor","AccountsList","AccountsSummaryPreview","summary","setSummary","summaryPieChart","setSummaryPieChart","summaryTableData","setSummaryTableData","asset","Accounts","differenceInHours","b","Math","ceil","diff","differenceInDays","getDealAgeInHours","deal","closed_at","getAllDealsForOneBot","daysWithin","ofsetCallback","hoursWithin","fetchAllDealsInLoop","lastDeal","filteredDeals","getObjectOfProfitPerDay","groupBy","item","mapValues","sum","getLastNDays","n","idx","startOf","reverse","getProfitChartData","profitObject","nDays","lastDays","profits","day","getAccumulativeProfitChartData","currentvalue","accProfits","profit","acc","getOneBotProfitsChartData","botsDeals","difference","getOneBotCurrencyLeaderbord","profitsByPair","getObjectOfProfitPerPair","sortedProfits","toPairs","INFINITY_IN_DAYS","is30daysDealsLoaded","isAllDealsLoaded","selectAllDealsWithin30Days","selectAllDeals","setNewBotsList","botsList","addToBotsList","setBotsOffset","setBot","fetchBots","offsetLimit","botItem","profits_in_usd","today_usd_profit","funds_locked_in_active_deals","todayUsdProfit","deals30daysForBot","returns","getDealsList","getActiveDealsList","setOffset","resetDeals","resetActiveDeals","fetchDealsForBotFor30Days","message","fetchAllDealsForBot","reset","getAllActiveDeals","usePrevious","ref","useRef","current","convertFilterValueToDate","filterFrom","filterValue","DCABotDetailsMainCharts","xLabel","yLabel","dateLabelsDays","timeRangeValue","countsValues","dates","delsGrouped","getDealsCountPerDay","dealsStatusData","countsObj","countBy","localized_status","keys","values","key","dealsStatusesCounts","dealsDurationHistogramData","dealDurations","start","end","getDealsDurationHistogramData","aspectRatio","total","previousValue","floor","legendItem","index","barPercentage","DCABotDetailsProfitsCharts","accumulativeProfitsData","setAccumulativeProfitsData","profitsData","setProfitsData","pairsLeaderbordData","setPairsLeaderbordData","getOneBotAccumulativeProfitsChartData","fill","DCABotDetailsCharts","infoKey","setDateLabelsDays","oldestDealAgeInDaysSinceOpened","pop","badgeVariant","Cancelled","StopLoss","Failed","Completed","Liquidated","Switched","DCABotDetailsDealsTable","dealStateSwitcher","columns","React","useMemo","Header","accessor","disableSortBy","originalRow","rowIndex","Cell","cell","Badge","bg","Date","sortType","utc","duration","days","asDays","daysFormatted","hours","hoursFormatted","minutes","minutesFormatted","bought_average_price","sold_average_price","amount","bought_amount","sold_amount","volume","bought_volume","sold_volume","completed_safety_orders_count","completed_manual_safety_orders_count","Number","original","numberValue","color","useTable","disableSortRemove","autoResetPage","autoResetSortBy","initialState","pageSize","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","pageCount","gotoPage","nextPage","previousPage","pageIndex","modalIsOpen","setModalIsOpen","selectedDeal","setSelectedDeal","striped","bordered","hover","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","cursor","isSorted","isSortedDesc","getRowProps","cells","getCellProps","TablePagination","range","renderPaginationNumberItem","Pagination","renderPaginationBeginning","First","Prev","renderPaginationEnd","Next","Last","DealModal","setDeal","dl","Modal","show","onHide","scrollable","closeButton","Body","bot_events","event","Footer","CurrencyIcon","formattedCurrency","replace","height","borderRadius","backgroundSize","toLowerCase","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","buy_or_strong_buy","strong_buy","sell_or_strong_sell","strong_sell","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","getBotsStrategyName","botsStrategy","marketsStrategy","marketStrategy","strategy_key","BotPreview","statsLoaded","setStatsLoaded","getFundsLockedAndTodaysProfit","getMaxUsageEffect","getReturnsEffect","random","age","formatter","strategy_list","is_enabled","marginBottom","preventDefault","href","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","isMulti","BotName","BotInfo","BotReturns","minimumFractionDigits","returnsCalculated","OverlayTrigger","placement","delay","hide","overlay","DCABotDetailsMainInfo","setFundsLocked","fundsLockedShare","setFundsLockedShare","setMaxUsage","reservedFunds","setReservedFunds","percentFormatter","botPairs","botMarket","startCondition","percent","points","getMaxUsageInBotCurrency","mxUsg","reserved_base_funds","reserved_quote_funds","getReservedFundsInBotCurrency","getFundsLockedInBotCurrency","avgDealDuration","avgDealDurationInMilliseconds","getAverageDealDuration","DCABotDetailsProfitsInfo","fromFilter","toFilter","averageTp","setAverageTp","averageProfitFromDeal","setAverageProfitFromDeal","averageDailyProfit","setAverageDailyProfit","setReturns","totalProfitUsd","setTotalProfitUsd","mean","final_profit_percentage","getAverageTp","getAverageProfitFromDeal","createdAt","startBotDate","fromFilterMoment","toFilterMoment","maxDate","max","unzip","zip","chartData","isBefore","isAfter","getAverageDailyProfit","getTotalProfitUsd","DCABotDetailsSettingsInfo","additionalCurrency","baseOrderSize","setBaseOrderSize","safetyOrderSize","setSafetyOrderSize","getBaseOrderSize","safety_order_volume_type","getSafetyOrderSize","leverageType","leverage_type","profit_currency","take_profit","take_profit_type","trailing_enabled","trailing_deviation","stop_loss_percentage","stop_loss_timeout_in_seconds","start_order_type","active_safety_orders_count","safety_order_step_percentage","martingale_step_coefficient","DCABotDetailsInfo","setInfoKey","Tabs","onSelect","k","Tab","eventKey","tabClassName","statusFilterOptions","DCABotDetails","setTimeRangeValue","NaN","setBotId","previousBotId","setBotsDeals","isDataLoading","setIsDataLoading","isAllDataLoading","setIsAllDataLoading","percentLoadedDeals","setPercentLoadedDeals","statusFilter","setStatusFilter","setDealStateSwitcher","pairFilter","setPairFilter","pairFilterOptions","setPairFilterOptions","setFromFilter","setToFilter","clearFilters","refreshData","fetchBot","isSame","dateTo","filterTo","filterByStatus","filterByPair","loadedDeals","finished_deals_count","stop","dropWaitingJobs","disconnect","ProgressBar","now","animated","radio","option","theme","colors","primary25","primary","startDate","endDate","selectsEnd","minDate","BotsFilters","updateFilter","filterItem","accountsOptions","label_id","scopeOptions","typeOptions","sortingOptions","setItem","stringify","filterOption","candidate","input","BotsListCharts","dealsLoaded","setDealsLoaded","botsLoaded","setBotsLoaded","numberHandled","setNumberHandled","profitsChartData","setProfitsChartData","accumulativeProfitsChartData","setAccumulativeProfitsChartData","botsLeaderboardChartData","setBotsLeaderboardChartData","getBotsList","getBoatsDeals","profitsObject","botsIds","currentObj","mergeWith","profit1","profit2","calculateProfitPerDayForListOfBots","sortedAndSelected10FirstBots","round","EPSILON","getBotsLeaderboardChartData","botsWithLoadedDeals","BotsList","showCharts","setShowCharts","isNothingFound","previousFilters","every","haveAllBotsDealsFor30Days","textAlign","dataLength","next","loader","endMessage","DCABots","cryptoCoins","BTC","ETH","BNB","USDT","USDC","XRP","TRX","BUSD","DOGE","getInitialInvestment","startPrice","start_price","quantityPerGrid","quantity_per_grid","pureInitialGrids","grid_lines","sort","abs","price","shift","baseInvestment","gridLine","quoteInvestment","allInQuote","allInUsd","createdOnDay","marketData","market_data","getCurrentInvestment","currentPrice","investment_base_currency","investment_quote_currency","getProfitsWithin30days","getProfitAgeInHours","getMarketOrdersWithin30days","marketOrders","grid_lines_orders","marketOrder","getMarketOrderAgeInHours","tradingFee","resultProfits","resultMarketOrders","objectProfits","objectMarketOrders","setNewGridBotsList","gridBotsList","addToGridBotsList","setGridBot","spotAccountsTypes","fetchInitialInvestments","gridBotItem","initialInvestments","fetchCurrentInvestments","currentInvestments","fetchProfits","fetchMarketOrders","fetchGridBotsMetrics","GridBotsListTable","investment","setModalGridBotId","accId","upper_price","lower_price","grids_quantity","grigLinesNumber","sellOrdersNumber","line","order_placed","side","buyOrdersNumber","cur","val","invesmentChange","quoteProfit","profitPercent","usdProfit","pnl","pnlPercent","alignItems","justifyContent","rows","GridBotDetailsCharts","chartTooltipFormatLabel","botsProfits","getOneGridBotAccumulativeProfitsChartData","getOneGridBotProfitsChartData","GridBotDetailsTable","setProfit","avgProfit","setAvgProfit","running","setRunning","summarizedProfits","realProfit","realAvgProfit","realReturns","timeRangeRadios","GridBotDetails","setTradingFee","setMarketOrders","setProfits","fetchDetails","status_string","InputGroup","Text","GridBotListMetrics","totalInvestments","setTotalInvestments","totalProfits","setTotalProfits","totaPnL","setTotalPnL","isLoading","setIsLoading","allHaveInvestments","allHaveCurrentInvestments","allHaveProfits","calculatedInitialInvestments","calculatedCurrentInvestments","calculatedProfits","investmentRadios","valuesRadios","GridBotsList","setInvestment","setValues","modalGridBotId","fetchGridBots","GridBots","setNewSmartTradesList","smartTradesList","addToSmartTradesList","setSmartTrade","fromDate","fetchTrades","smartTradeItem","trades","smartTradeTrades","SmartTradeDetailsStatusTable","average_enter_price","average_close_price","SmartTradeDetailsTable","triggerSignMap","less","less_or_equal","greater_or_equal","greater","trade","order_type","order_side","initial_price","realised_price","initial_amount","realised_amount","initial_total","realised_total","trigger_condition","trigger_price","trail_value","trail_percentage","purposeRadios","SmartTradeDetails","purpose","setPurpose","setTrades","trade_purpose","getObjectOfSmartTradesProfitsPerDay","filteredSmartTrades","SmartTradesCharts","pairProfitsLeaderboardData","setPairProfitsLeaderboardData","smartTradesProfitsByDays","oldestTradeDate","min","getSmartTradesAccumulativeProfitsChartData","getSmartTradesProfitsChartData","groupedResultProfits","groupedSmartTrades","getSmartTradesPairsLeaderboardChartData","SmartTradesFilters","statusOptions","disabled","isDisabled","smartTradeTypes","simple_buy","simple_sell","smart_sell","smart_trade","smart_cover","smart_buy","SmartTradesTable","setModalSmartTradeId","pnl_percent","pnl_usd","units","enabled","SmartTradesList","modalSmartTradeId","SmartTrades","fetchSmartTrades","Router","element","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43b58346.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via{\" \"}\n          <Alert.Link\n            onClick={() => {\n              window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n            }}\n          >\n            Telegram\n          </Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import _ from \"lodash\";\nimport { IBot, IBotFilters } from \"../../interfaces/Bot\";\nimport { BotsAction } from \"./BotsActions\";\n\nexport interface IBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IBotFilters;\n  limit: number;\n  bots: { [key: number]: IBot };\n}\n\nexport const botsStateInitializer = (\n  initialValue = initialBotsState\n): IBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"botsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  scope: \"enabled\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 15,\n  offset: 0,\n  filters: initialFiltersState,\n  bots: {},\n};\n\nexport function botsReducer(\n  state: IBotsState = initialBotsState,\n  action: BotsAction\n): IBotsState {\n  switch (action.type) {\n    case \"setNewBotsList\":\n      const newList = action.payload.map((bot) => bot.id);\n      const newBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, bots: newBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToBotsList\":\n      const list = action.payload.map((bot) => bot.id);\n      const bots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        bots: { ...state.bots, ...bots },\n      };\n    case \"setBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setBot\":\n      return {\n        ...state,\n        bots: { ...state.bots, [action.payload.botId]: action.payload.bot },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { DealsAction } from \"./DealsActions\";\nimport { IDeal } from \"../../interfaces/Deal\";\nimport _ from \"lodash\";\n\nexport interface IDealsState {\n  deals: {\n    [key: string]: { list: Array<IDeal>; period: number; offset?: number };\n  };\n  activeDeals: {\n    [key: string]: { list: Array<IDeal> };\n  };\n}\n\nexport const initialDealsState: IDealsState = {\n  deals: {},\n  activeDeals: {},\n};\n\nexport function dealsReducer(\n  state: IDealsState = initialDealsState,\n  action: DealsAction\n): IDealsState {\n  switch (action.type) {\n    case \"getDealsList\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            list: action.payload.deals,\n            period: action.payload.periodInDays,\n          },\n        },\n      };\n    case \"getActiveDealsList\":\n      return {\n        ...state,\n        activeDeals: {\n          ...state.activeDeals,\n          [action.payload.botId]: {\n            ...state.activeDeals[action.payload.botId],\n            list: action.payload.activeDeals,\n          },\n        },\n      };\n    case \"setOffset\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            offset: action.payload.offset,\n          },\n        },\n      };\n    case \"resetDeals\":\n      if (action.payload.botId in state.deals) {\n        const newDeals = _.omit(state.deals, [action.payload.botId]);\n        return {\n          ...state,\n          deals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    case \"resetActiveDeals\":\n      if (action.payload.botId in state.activeDeals) {\n        const newDeals = _.omit(state.activeDeals, [action.payload.botId]);\n        return {\n          ...state,\n          activeDeals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    default:\n      throw new Error();\n  }\n}\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\nimport { IBotApi } from \"../interfaces/Bot\";\nimport { IDealApi } from \"../interfaces/Deal\";\nimport { IGridBotApi } from \"../interfaces/GridBot\";\n\nconst commonLimiter = new Bottleneck({\n  reservoir: 13,\n  reservoirRefreshAmount: 13,\n  reservoirRefreshInterval: 1000,\n});\n\nexport const DEAL_LIMITER_SETTINGS = {\n  id: \"DEAL_LIMITER\",\n  reservoir: 0,\n  reservoirRefreshAmount: 1,\n  reservoirRefreshInterval: 1000,\n  minTime: 1000,\n  maxConcurrent: 1,\n  clearDatastore: true,\n  timeout: 2000,\n};\n\nconst API_KEY =\n  new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\nconst SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n//we need that hack for stopping loading heavy deals request\nexport let dealsLimiter = new Bottleneck(DEAL_LIMITER_SETTINGS);\n\nexport function setDealsLimiter(limiterId: any) {\n  dealsLimiter = new Bottleneck({ ...DEAL_LIMITER_SETTINGS, id: limiterId });\n}\n\nexport function getDealsLimiter() {\n  return dealsLimiter;\n}\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (\n  method: string,\n  path: string,\n  limiter: any = commonLimiter\n) => {\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n): Promise<Array<IBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      scope ? `&scope=${scope}` : \"\"\n    }${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getGridBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  accountId: string,\n  accountTypes: string[],\n  state = \"enabled\"\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const accountTypesParams = accountTypes\n    .map((accountType) => `&account_types[]=${accountType}`)\n    .join(\"\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/grid_bots?offset=${offset}&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      accountId ? `&account_ids[]=${accountId}` : accountTypesParams\n    }${state ? `&state=${state}` : \"\"}`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getSmartTrades = async (\n  page: number,\n  perPage: number,\n  sorting: string,\n  accountId: string,\n  type: string,\n  pair: string,\n  status: string,\n  from: string\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getSmartTradesUrl = () =>\n    `/public/api/v2/smart_trades?page=${page}&per_page=${perPage}&order_by=${sortBy}&order_direction=${sortDirection}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }${type ? `&type=${type}` : \"\"}${\n      pair ? `&pair=${pair}` : \"\"\n    }&status=${status}${from ? `&from=${from}` : \"\"}`;\n\n  return callApi(\"GET\", getSmartTradesUrl()).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getSmartTradeTrades = async (\n  smartTradeId: number\n): Promise<IBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/v2/smart_trades/${smartTradeId}/trades`\n  ).then((response: any) => response.json());\n};\nexport const getBot = async (botId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/bots/${botId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBot = async (gridBotId: number): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsProfits = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}/profits`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsMarketOrders = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/grid_bots/${gridBotId}/market_orders`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeal = async (dealId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/deals/${dealId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccounts = async (page: any, perPage: any) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts?page=${page}&per_page=${perPage}`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccount = async (accountId: number | string) => {\n  return callApi(\"GET\", `/public/api/ver1/accounts/${accountId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccountTableData = async (accountId: number | string) => {\n  return callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountPieChartData = async (accountId: number | string) => {\n  return callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/pie_chart_data`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountActiveTradingEntities = async (\n  accountId: number | string\n) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts/${accountId}/active_trading_entities`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountBalanceChartData = async (\n  accountId: number | string,\n  dateFrom: string\n) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts/${accountId}/balance_chart_data?date_from=${dateFrom}`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeals = async (\n  botId: number,\n  offset: number,\n  limit: number,\n  scope: string,\n  order: string\n): Promise<Array<IDealApi>> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=${scope}&order=${order}`,\n    dealsLimiter\n  ).then((response: any) => response.json());\n};\n\nexport const getStrategies = async () => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/marketplace/items?&limit=1000`\n  ).then((response: any) => response.json());\n};\n\nexport const getBotStats = async (botId: number) => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/bots/stats?bot_id=${botId}`\n  ).then((response: any) => response.json());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"./NavBar.css\";\n\nexport const NavBar = () => {\n  const [activeKey, setActiveKey] = useState(\"DCA\");\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const goToGridbots = () => {\n    navigate({\n      pathname: `/gridbots`,\n      search: window.location.search,\n    });\n  };\n  const goToDCABots = () => {\n    navigate({\n      pathname: `/`,\n      search: window.location.search,\n    });\n  };\n  const goToSmartTrades = () => {\n    navigate({\n      pathname: `/smarttrades`,\n      search: window.location.search,\n    });\n  };\n\n  const goToSmartAccounts = () => {\n    navigate({\n      pathname: `/accounts`,\n      search: window.location.search,\n    });\n  };\n\n  useEffect(() => {\n    if (location.pathname === \"/\") {\n      setActiveKey(\"DCA\");\n    } else if (location.pathname === \"/gridbots\") {\n      setActiveKey(\"grid\");\n    } else if (location.pathname === \"/smarttrades\") {\n      setActiveKey(\"smarttrades\");\n    } else if (location.pathname === \"/accounts\") {\n      setActiveKey(\"accounts\");\n    }\n  }, [location]);\n\n  return (\n    <div className=\"NavBar\">\n      <div className=\"NavBarContainer\">\n        <div className=\"LogoContainer\">\n          <img className=\"Logo\" src={`/BotAn__icon.png`} alt=\"logo\" />\n        </div>\n        <div className=\"Navigation\">\n          <Nav>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"DCA\"} onClick={goToDCABots}>\n                DCA Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"grid\"} onClick={goToGridbots}>\n                Grid Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                active={activeKey === \"smarttrades\"}\n                onClick={goToSmartTrades}\n              >\n                Smart Trades\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                active={activeKey === \"accounts\"}\n                onClick={goToSmartAccounts}\n              >\n                Accounts\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </div>\n\n        <div\n          className=\"CommunityLink\"\n          onClick={() => {\n            window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n          }}\n        >\n          <span className=\"SupportLabel\">Community</span>\n          <img className=\"TelegramIcon\" src={`image 8.png`} alt=\"logo\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\nimport { GridBotsAction } from \"./GridBotsActions\";\n\nexport interface IGridBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IGridBotFilters;\n  limit: number;\n  gridBots: { [key: number]: IGridBot };\n}\n\nexport const gridBotsStateInitializer = (\n  initialValue = initialGridBotsState\n): IGridBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"GridBotsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountType: \"spot\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialGridBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 10,\n  offset: 0,\n  filters: initialFiltersState,\n  gridBots: {},\n};\n\nexport function gridBotsReducer(\n  state: IGridBotsState = initialGridBotsState,\n  action: GridBotsAction\n): IGridBotsState {\n  switch (action.type) {\n    case \"setNewGridBotsList\":\n      const newList = action.payload.map((gridBot) => gridBot.id);\n      const newGridBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, gridBots: newGridBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToGridBotsList\":\n      const list = action.payload.map((gridBot) => gridBot.id);\n      const gridBots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        gridBots: { ...state.gridBots, ...gridBots },\n      };\n    case \"setGridBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setGridBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setGridBot\":\n      return {\n        ...state,\n        gridBots: {\n          ...state.gridBots,\n          [action.payload.gridBotId]: action.payload.gridBot,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import _ from \"lodash\";\nimport { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\nimport { SmartTradesAction } from \"./SmartTradesActions\";\n\nexport interface ISmartTradesState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: ISmartTradeFilters;\n  limit: number;\n  smartTrades: { [key: number]: ISmartTrade };\n}\n\nexport const smartTradesStateInitializer = (\n  initialValue = initialSmartTradesState\n): ISmartTradesState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"smartTradesFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountId: \"\",\n  sorting: \"created_at-desc\",\n  type: \"\",\n  status: \"all\",\n  from: { label: \"month\", from: \"\", to: \"\" },\n  pair: \"\",\n};\n\nexport const initialSmartTradesState: any = {\n  list: [],\n  hasMore: true,\n  limit: 100,\n  offset: 1,\n  filters: initialFiltersState,\n  smartTrades: {},\n};\n\nexport function smartTradesReducer(\n  state: ISmartTradesState = initialSmartTradesState,\n  action: SmartTradesAction\n): ISmartTradesState {\n  switch (action.type) {\n    case \"setNewSmartTradesList\":\n      const newList = action.payload.map((smartTrade) => smartTrade.id);\n      const newSmartTrades = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, smartTrades: newSmartTrades };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToSmartTradesList\":\n      const list = action.payload.map((smartTrade) => smartTrade.id);\n      const smartTrades = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        smartTrades: { ...state.smartTrades, ...smartTrades },\n      };\n    case \"setSmartTradesOffset\":\n      return { ...state, offset: action.payload };\n    case \"setSmartTradesFilters\":\n      return { ...state, filters: action.payload };\n    case \"setSmartTrade\":\n      return {\n        ...state,\n        smartTrades: {\n          ...state.smartTrades,\n          [action.payload.smartTradeId]: action.payload.smartTrade,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import _ from \"lodash\";\nimport { IAccount } from \"../../interfaces/Account\";\nimport { AccountsAction } from \"./AccountsActions\";\n\nexport interface IAccountsState {\n  list: Array<number>;\n  accounts: { [key: number]: IAccount };\n  accountTableData: { [key: number]: IAccount };\n  accountPieChartData: { [key: number]: IAccount };\n  accountActiveTradingEntities: { [key: number]: IAccount };\n  hasMore: boolean;\n  offset: number;\n  limit: number;\n}\n\nexport const initialAccountsState: any = {\n  offset: 0,\n  hasMore: false,\n  list: [],\n  limit: 100,\n  accounts: {},\n  accountTableData: {},\n  accountPieChartData: {},\n  accountActiveTradingEntities: {},\n};\n\nexport function accountsReducer(\n  state: IAccountsState,\n  action: AccountsAction\n): IAccountsState {\n  switch (action.type) {\n    case \"setNewAccountsList\":\n      const newList = action.payload.map((account: any) => account.id);\n      const newAccounts = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, accounts: newAccounts };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToAccountsList\":\n      const list = action.payload.map((account) => account.id);\n      const accounts = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        accounts: { ...state.accounts, ...accounts },\n      };\n    case \"setAccountsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setAccount\":\n      return {\n        ...state,\n        accounts: {\n          ...state.accounts,\n          [action.payload.accountId]: action.payload.account,\n        },\n      };\n    case \"setAccountTableData\":\n      return {\n        ...state,\n        accountTableData: {\n          ...state.accountTableData,\n          [action.payload.accountId]: action.payload.accountTableData,\n        },\n      };\n    case \"setAccountPieChartData\":\n      return {\n        ...state,\n        accountPieChartData: {\n          ...state.accountPieChartData,\n          [action.payload.accountId]: action.payload.accountPieChartData,\n        },\n      };\n    case \"setAccountActiveTradingEntities\":\n      return {\n        ...state,\n        accountActiveTradingEntities: {\n          ...state.accountActiveTradingEntities,\n          [action.payload.accountId]:\n            action.payload.accountActiveTradingEntities,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { IAccount } from \"../../interfaces/Account\";\n\ninterface ISetNewAccountsList {\n  type: \"setNewAccountsList\";\n  payload: Array<IAccount>;\n}\n\nexport const setNewAccountsList = (\n  accountsList: Array<IAccount>\n): ISetNewAccountsList => ({\n  type: \"setNewAccountsList\",\n  payload: accountsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToAccountsList {\n  type: \"addToAccountsList\";\n  payload: Array<IAccount>;\n}\n\nexport const addToAccountsList = (\n  accountsList: Array<IAccount>\n): IAddToAccountsList => ({\n  type: \"addToAccountsList\",\n  payload: accountsList,\n});\n\ninterface ISetAccountsOffset {\n  type: \"setAccountsOffset\";\n  payload: number;\n}\n\nexport const setAccountsOffset = (offset: number): ISetAccountsOffset => ({\n  type: \"setAccountsOffset\",\n  payload: offset,\n});\n\ninterface ISetAccount {\n  type: \"setAccount\";\n  payload: { accountId: number | string; account: any };\n}\n\nexport const setAccount = (\n  accountId: number | string,\n  account: any\n): ISetAccount => ({\n  type: \"setAccount\",\n  payload: { accountId, account },\n});\n\ninterface ISetAccountTableData {\n  type: \"setAccountTableData\";\n  payload: { accountId: number | string; accountTableData: any };\n}\n\nexport const setAccountTableData = (\n  accountId: number | string,\n  accountTableData: any\n): ISetAccountTableData => ({\n  type: \"setAccountTableData\",\n  payload: { accountId, accountTableData },\n});\n\ninterface ISetAccountPieChartData {\n  type: \"setAccountPieChartData\";\n  payload: { accountId: number | string; accountPieChartData: any };\n}\n\nexport const setAccountPieChartData = (\n  accountId: number | string,\n  accountPieChartData: any\n): ISetAccountPieChartData => ({\n  type: \"setAccountPieChartData\",\n  payload: { accountId, accountPieChartData },\n});\n\ninterface ISetAccountActiveTradingEntities {\n  type: \"setAccountActiveTradingEntities\";\n  payload: { accountId: number | string; accountActiveTradingEntities: any };\n}\n\nexport const setAccountActiveTradingEntities = (\n  accountId: number | string,\n  accountActiveTradingEntities: any\n): ISetAccountActiveTradingEntities => ({\n  type: \"setAccountActiveTradingEntities\",\n  payload: { accountId, accountActiveTradingEntities },\n});\n\nexport type AccountsAction =\n  | ISetAccountTableData\n  | ISetNewAccountsList\n  | ISetAccountActiveTradingEntities\n  | ISetAccountPieChartData\n  | ISetAccount\n  | IAddToAccountsList\n  | ISetAccountsOffset\n  | ISetHasMore;\n","import {\n  getAccount,\n  getAccountActiveTradingEntities,\n  getAccountPieChartData,\n  getAccounts,\n  getAccountTableData,\n} from \"../../utils/ApiUtils\";\n\nimport {\n  setNewAccountsList,\n  setAccountTableData,\n  setAccountPieChartData,\n  setAccountActiveTradingEntities,\n  setHasMore,\n  addToAccountsList,\n  setAccount,\n} from \"./AccountsActions\";\nimport { IAccountsState } from \"./AccountsReducer\";\n\nexport async function fetchAccounts(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  accountsDispatch(setHasMore(true));\n  accountsDispatch(setNewAccountsList([]));\n  const { limit } = accountsState;\n\n  const perPage = customLimit ? customLimit : limit;\n  try {\n    let hasMore = true;\n    let page = 1;\n\n    while (hasMore) {\n      const data: any = await getAccounts(page, perPage);\n      if (data.error) {\n        break;\n      }\n      accountsDispatch(addToAccountsList(data));\n      page = page + 1;\n      if (data.length < perPage) {\n        hasMore = false;\n      }\n    }\n    accountsDispatch(setHasMore(false));\n  } catch {\n    accountsDispatch(setNewAccountsList([]));\n    accountsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching accounts list\",\n    });\n  }\n}\n\nexport async function fetchAccount(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  try {\n    const account = await getAccount(accountId);\n    accountsDispatch(setAccount(accountId, account));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account ${accountId}`,\n    });\n  }\n}\n\nexport async function fetchAccountTableData(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountTableData } = accountsState;\n  try {\n    if (!(accountId in accountTableData)) {\n      const accountTableData = await getAccountTableData(accountId);\n      accountsDispatch(setAccountTableData(accountId, accountTableData));\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account table data`,\n    });\n  }\n}\nexport async function fetchAccountPieChartData(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountPieChartData } = accountsState;\n  try {\n    if (!(accountId in accountPieChartData)) {\n      const accountPieChartData = await getAccountPieChartData(accountId);\n      accountsDispatch(setAccountPieChartData(accountId, accountPieChartData));\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account pie chart data`,\n    });\n  }\n}\nexport async function fetchAccountActiveTradingEntities(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountActiveTradingEntities } = accountsState;\n  try {\n    if (!(accountId in accountActiveTradingEntities)) {\n      const accountActiveTradingEntities =\n        await getAccountActiveTradingEntities(accountId);\n      accountsDispatch(\n        setAccountActiveTradingEntities(accountId, accountActiveTradingEntities)\n      );\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account active trading entities data`,\n    });\n  }\n}\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport {\n  botsReducer,\n  botsStateInitializer,\n  initialBotsState,\n} from \"./state/bots/BotsReducer\";\nimport { dealsReducer, initialDealsState } from \"./state/deals/DealsReducer\";\nimport { getStrategies } from \"./utils/ApiUtils\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { Outlet } from \"react-router-dom\";\nimport {\n  gridBotsReducer,\n  gridBotsStateInitializer,\n  initialGridBotsState,\n} from \"./state/gridBots/GridBotsReducer\";\nimport {\n  initialSmartTradesState,\n  smartTradesReducer,\n  smartTradesStateInitializer,\n} from \"./state/smartTrades/SmartTradesReducer\";\nimport {\n  accountsReducer,\n  initialAccountsState,\n} from \"./state/accounts/AccountsReducer\";\nimport { fetchAccounts } from \"./state/accounts/AccountsEffects\";\nimport { Spinner } from \"react-bootstrap\";\n\nChartJS.register(\n  CategoryScale,\n  PointElement,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement\n);\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nexport const BotsContext = createContext({\n  botsState: initialBotsState,\n  botsDispatch: (state: any) => {},\n});\nexport const GridBotsContext = createContext({\n  gridBotsState: initialGridBotsState,\n  gridBotsDispatch: (state: any) => {},\n});\nexport const SmartTradesContext = createContext({\n  smartTradesState: initialSmartTradesState,\n  smartTradesDispatch: (state: any) => {},\n});\nexport const DealsContext = createContext({\n  dealsState: initialDealsState,\n  dealsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [botsState, botsDispatch] = useReducer(\n    botsReducer,\n    initialBotsState,\n    botsStateInitializer\n  );\n  const [gridBotsState, gridBotsDispatch] = useReducer(\n    gridBotsReducer,\n    initialGridBotsState,\n    gridBotsStateInitializer\n  );\n\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n  const [smartTradesState, smartTradesDispatch] = useReducer(\n    smartTradesReducer,\n    initialSmartTradesState,\n    smartTradesStateInitializer\n  );\n  const [dealsState, dealsDispatch] = useReducer(\n    dealsReducer,\n    initialDealsState\n  );\n\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchAccounts(accountsDispatch, accountsState, errorsDispatch);\n    getStrategiesData();\n  }, []);\n\n  const { list } = accountsState;\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <BotsContext.Provider value={{ botsState, botsDispatch }}>\n            <SmartTradesContext.Provider\n              value={{ smartTradesState, smartTradesDispatch }}\n            >\n              <GridBotsContext.Provider\n                value={{ gridBotsState, gridBotsDispatch }}\n              >\n                <DealsContext.Provider value={{ dealsState, dealsDispatch }}>\n                  <div className=\"App\">\n                    <NavBar />\n                    {list.length > 0 ? (\n                      <Outlet />\n                    ) : (\n                      <div className=\"SpinnerContainer\">\n                        <Spinner animation=\"grow\" />\n                      </div>\n                    )}\n                    <ErrorsAlerts />\n                  </div>\n                </DealsContext.Provider>\n              </GridBotsContext.Provider>\n            </SmartTradesContext.Provider>\n          </BotsContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import _ from \"lodash\";\nimport { IBot } from \"../interfaces/Bot\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\nimport { callApi } from \"./ApiUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account || !account.id) {\n    return 0;\n  }\n\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    const response = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n\n    if (response) {\n      return response;\n    } else {\n      return await callApi(\n        \"GET\",\n        `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USD_${currency}`\n      )\n        .then((response: any) => response.json())\n        .then((marketInfo: any) => parseFloat(marketInfo.last));\n    }\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nexport const isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nexport function getFundsLocked(bot: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? bot.fundsLocked / leverage : bot.fundsLocked;\n}\n\nexport function getFundsLockedInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let fundsLocked = 0;\n  let currency = quoteCurrency;\n\n  if (bot.strategy === \"long\") {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.bought_volume),\n      0\n    );\n    currency = quoteCurrency;\n  } else if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_amount),\n      0\n    );\n    currency = baseCurrency;\n  } else if (bot.strategy === \"short\" && !isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_volume),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  const leverage = parseFloat(bot.leverage_custom_value);\n\n  return {\n    value: leverage ? fundsLocked / leverage : fundsLocked,\n    currency,\n  };\n}\n\nexport const getBaseOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let additionalCurrency = \"\";\n\n  if (bot.base_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.base_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.base_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getSafetyOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n\n  let additionalCurrency = \"\";\n\n  if (bot.safety_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.safety_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.safety_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getCurrencyFormat = (\n  { value, currency }: any,\n  signDisplay: any = \"auto\"\n) => {\n  if (currency.includes(\"BTC\")) {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 6,\n      signDisplay,\n    }).format(value);\n  } else if (currency === \"marketPrice\") {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 8,\n      signDisplay,\n    }).format(value);\n  } else {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 2,\n      signDisplay,\n    }).format(value);\n  }\n};\n\nexport async function getMaxUsageInBotCurrency(bot: IBot, account: any) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let maxUsageInUsd = 0;\n\n  if (bot.maxUsage) {\n    maxUsageInUsd = bot.maxUsage;\n  } else {\n    maxUsageInUsd = await getMaxUsage(bot, account);\n  }\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    currency = baseCurrency;\n  } else {\n    currency = quoteCurrency;\n  }\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(\n    account.market_code,\n    currency\n  );\n  return {\n    value: maxUsageInUsd / currencyPriceInUsd,\n    currency,\n  };\n}\n\nexport function getReservedFundsInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let reservedFunds = 0;\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_base_funds.toString()),\n      0\n    );\n    currency = baseCurrency;\n  } else {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_quote_funds.toString()),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  return {\n    value: reservedFunds,\n    currency,\n  };\n}\n\nexport function getReturns(maxUsage: any, deals: any) {\n  if (maxUsage === 0) {\n    return 0;\n  }\n  const profit30Days = deals.reduce(\n    (currDeal: any, nextDeal: any) => ({\n      usd_final_profit:\n        parseFloat(currDeal.usd_final_profit) +\n        parseFloat(nextDeal.usd_final_profit),\n    }),\n    { usd_final_profit: 0 }\n  )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n\nexport function getBotsLeaderboardChartData(botsState: IBotsState) {\n  const bots = botsState.list.map((botId: number) => {\n    const bot = botsState.bots[botId];\n    return {\n      maxUsage: bot.maxUsage || 0,\n      name: bot.name,\n      fundsLocked: getFundsLocked(bot),\n    };\n  });\n  const sortedAndSelected10FirstBots = _.sortBy(bots, [\n    \"maxUsage\",\n    \"fundsLocked\",\n  ])\n    .reverse()\n    .slice(0, 10);\n  return [\n    sortedAndSelected10FirstBots.map((bot) => bot.name),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.fundsLocked + Number.EPSILON) * 100) / 100\n    ),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.maxUsage + Number.EPSILON) * 100) / 100\n    ),\n  ];\n}\n","import moment from \"moment\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext } from \"../../../../App\";\nimport { IAccount } from \"../../../../interfaces/Account\";\nimport {\n  fetchAccountActiveTradingEntities,\n  fetchAccountPieChartData,\n} from \"../../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./AccountPreview.css\";\n\nvar stringToColour = function (str: any) {\n  var hash = 0;\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  var colour = \"#\";\n  for (var i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n};\n\nconst AccountPreview: FC<any> = ({ accountId }: any) => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountActiveTradingEntities } =\n    accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [account, setAccount] = useState<IAccount | null>(null);\n  const [accountPieChart, setAccountPieChart] = useState<any>(null);\n  const [accountActiveTrading, setAccountActiveTrading] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchAccountPieChartData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      accountId\n    );\n    fetchAccountActiveTradingEntities(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      accountId\n    );\n    setAccount(accounts[accountId]);\n  }, [accountId]);\n\n  useEffect(() => {\n    if (accountId in accountPieChartData) {\n      setAccountPieChart(accountPieChartData[accountId]);\n    }\n  }, [accountPieChartData]);\n\n  useEffect(() => {\n    if (accountId in accountActiveTradingEntities) {\n      setAccountActiveTrading(accountActiveTradingEntities[accountId]);\n    }\n  }, [accountActiveTradingEntities]);\n\n  return (\n    <div className=\"AccountPreview\">\n      <div className=\"AccountPreviewColumn\">\n        {account && accountPieChart && (\n          <AccountIcons account={account} accountPieChart={accountPieChart} />\n        )}\n        {account && <AccountInfo account={account} />}\n      </div>\n      <div\n        className=\"AccountPreviewColumn\"\n        style={{ flexGrow: 1, marginLeft: \"16px\" }}\n      >\n        {account && (\n          <>\n            <div className=\"AccountNameContainer\">\n              <span className=\"AccountName\">{account.name}</span>\n            </div>\n\n            <div className=\"AccountPreviewTable\">\n              <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                <thead>\n                  <tr>\n                    <th>Balance value</th>\n                    <th>24 hr change</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>{`${getCurrencyFormat({\n                      value: parseFloat(account.usd_amount),\n                      currency: \"USD\",\n                    })} $`}</td>\n                    <td\n                      className={\n                        parseFloat(account.day_profit_usd) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(account.day_profit_usd),\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>{`${getCurrencyFormat({\n                      value: parseFloat(account.btc_amount),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                    <td\n                      className={\n                        parseFloat(account.day_profit_btc) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(account.day_profit_btc),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          </>\n        )}\n        {accountActiveTrading && accountActiveTrading.data && (\n          <div className=\"AccountPreviewTable\" style={{ marginTop: \"16px\" }}>\n            <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n              <thead>\n                <tr>\n                  <th>DCA bots</th>\n                  <th>Deals</th>\n                  <th>Smart Trades</th>\n                  <th>Grid Bots</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{accountActiveTrading.data.active_bots_count}</td>\n                  <td>{accountActiveTrading.data.active_deals_count}</td>\n                  <td>{accountActiveTrading.data.active_smart_trades_count}</td>\n                  <td>{accountActiveTrading.data.active_grid_bots_count}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </div>\n        )}\n        <div className=\"AccountPreviewButtonContainer\">\n          <Button\n            className=\"AccountPreviewButton\"\n            onClick={() => {\n              navigate({\n                pathname: `/accounts/${accountId}`,\n                search: window.location.search,\n              });\n            }}\n          >\n            View\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst marketTypes = { spot: \"S\", margin: \"M\", futures: \"F\" } as any;\n\nexport const AccountIcons = ({ account, accountPieChart }: any) => (\n  <div className=\"AccountPieChart\">\n    <div className=\"AccountTypeIconContainer\">\n      {marketTypes[account.supported_market_types[0]]}\n    </div>\n    {\"market_icon\" in account && (\n      <div className=\"AccountIconContainer\">\n        <div\n          className=\"AccountIcon\"\n          style={{\n            backgroundImage: `url(${account.market_icon})`,\n          }}\n        ></div>\n      </div>\n    )}\n    {account && accountPieChart.length > 0 ? (\n      <div className=\"AccountPieChartContainer\">\n        <AccountPieChart accountPieChart={accountPieChart} />\n      </div>\n    ) : (\n      <div className=\"AccountPieChartContainerEmpty\"></div>\n    )}\n  </div>\n);\n\nexport const AccountPieChart = ({ accountPieChart }: any) => (\n  <Pie\n    data={{\n      labels: accountPieChart.map((dataItem: any) => dataItem.code),\n      datasets: [\n        {\n          data: accountPieChart.map((dataItem: any) => dataItem.y),\n          backgroundColor: accountPieChart.map((dataItem: any) =>\n            dataItem.code.includes(\"USD\") && dataItem.code.length < 6\n              ? \"#00a59a\"\n              : stringToColour(dataItem.code)\n          ),\n          borderWidth: 0,\n        },\n      ],\n    }}\n    options={\n      {\n        plugins: {\n          legend: {\n            display: false,\n          },\n          tooltip: {\n            callbacks: {\n              label: (tooltipItem: any) => {\n                const dataset = tooltipItem.dataset;\n                const currentValue = dataset.data[tooltipItem.dataIndex];\n                return `${tooltipItem.label} ${currentValue}%`;\n              },\n            },\n            bodyFont: { size: 10 },\n          },\n        },\n      } as any\n    }\n  />\n);\n\nexport const AccountInfo = ({ account }: any) => (\n  <div className=\"AccountInfoContainer\">\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">Created:</div>\n      <div className=\"AccountInfoValue\">{`${moment(account.created_at).format(\n        \"DD/MM/YYYY\"\n      )}`}</div>\n    </div>\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">Updated:</div>\n      <div className=\"AccountInfoValue\">{`${moment(account.updated_at).format(\n        \"DD/MM/YYYY\"\n      )}`}</div>\n    </div>\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">API status:</div>\n      <div className=\"AccountInfoValue\">{`${\n        account.api_key_invalid ? \"Invalid\" : \"OK\"\n      }`}</div>\n    </div>\n  </div>\n);\n\nexport default AccountPreview;\n","export const ProfitChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const AccumulativeChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\nexport const TimeLineChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const LeaderbordChartOptions = (text: string, labels: any) => ({\n  indexAxis: \"y\" as const,\n  scales: {\n    x: {\n      stacked: false,\n      beginAtZero: true,\n    },\n    y: {\n      stacked: true,\n      beginAtZero: true,\n      ticks: {\n        callback: (value: any) => {\n          return labels[value].length > 35\n            ? labels[value].slice(0, 33) + \"...\"\n            : labels[value];\n        },\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"y\",\n    },\n  },\n});\n\nexport const DealsCountBarChartOptions = (\n  text: string,\n  isWeekUnit: boolean = true\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: isWeekUnit ? \"week\" : \"month\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const HistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  // crossAlign: \"near\",\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        label: (tooltipItem: any) => {\n          const dataset = tooltipItem.dataset;\n          const total = dataset.data.reduce(function (\n            previousValue: any,\n            currentValue: any\n          ) {\n            return previousValue + currentValue;\n          });\n          const currentValue = dataset.data[tooltipItem.dataIndex];\n          const percentage = Math.floor((currentValue / total) * 100 + 0.5);\n          return ` ${currentValue} deals (${percentage}%)`;\n        },\n        title: (tooltipItem: any) => {\n          const label = parseInt(tooltipItem[0].label);\n          return `Duration from ${label - 1} to ${label} hours`;\n        },\n      },\n    },\n  },\n});\n","import moment from \"moment\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  FormControl,\n  Table,\n  ToggleButton,\n  FormCheck,\n  Button,\n} from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { AccountsContext, ErrorsContext } from \"../../../App\";\nimport { IAccount } from \"../../../interfaces/Account\";\nimport {\n  fetchAccount,\n  fetchAccountPieChartData,\n  fetchAccountTableData,\n} from \"../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../utils/BotsUtils\";\nimport { AccountPieChart } from \"../AccountsList/AccountPreview/AccountPreview\";\nimport \"./AccountDetails.css\";\nimport DatePicker from \"react-datepicker\";\nimport { getAccountBalanceChartData } from \"../../../utils/ApiUtils\";\nimport { Line } from \"react-chartjs-2\";\nimport { TimeLineChartOptions } from \"../../../utils/ChartsUtils\";\nimport _ from \"lodash\";\n\nconst chartTooltipFormatLabel =\n  (quoteCurrency: string) => (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\nconst AccountDetails: FC<any> = () => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountTableData } = accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [accountId, setAccountId] = useState<any>(null);\n  const [account, setAccount] = useState<IAccount | null>(null);\n  const [accountPieChart, setAccountPieChart] = useState<any>(null);\n  const [accountTable, setAccountTable] = useState<any>(null);\n  const [accountHistoryData, setAccountHistoryData] = useState<any>(null);\n  const [accountMode, setAccountMode] = useState<any>(\"current\");\n  const [historyCurrency, setHistoryCurrency] = useState<any>(\"usd\");\n  const [historyDate, setHistoryDate] = useState<any>(\n    moment().subtract(1, \"months\").toDate()\n  );\n\n  let params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (params.accountId) {\n      setAccountId(\n        params.accountId === \"summary\"\n          ? params.accountId\n          : parseInt(params.accountId)\n      );\n    }\n  }, [params]);\n\n  useEffect(() => {\n    if (accountId) {\n      fetchAccountPieChartData(\n        accountsDispatch,\n        accountsState,\n        errorsDispatch,\n        accountId\n      );\n      fetchAccountTableData(\n        accountsDispatch,\n        accountsState,\n        errorsDispatch,\n        accountId\n      );\n      fetchAccount(accountsDispatch, accountsState, errorsDispatch, accountId);\n    }\n  }, [accountId]);\n\n  useEffect(() => {\n    if (accountPieChartData && accountId in accountPieChartData) {\n      setAccountPieChart(accountPieChartData[accountId]);\n    }\n  }, [accountPieChartData, accountId]);\n\n  useEffect(() => {\n    if (accountTableData && accountId in accountTableData) {\n      setAccountTable(accountTableData[accountId]);\n    }\n  }, [accountTableData, accountId]);\n\n  useEffect(() => {\n    if (accounts && accountId in accounts) {\n      setAccount(accounts[accountId]);\n    }\n  }, [accounts, accountId]);\n\n  useEffect(() => {\n    if (accountId && historyDate) {\n      getAccountBalanceChartData(\n        accountId,\n        moment(historyDate).format(\"DD-MM-YYYY\")\n      ).then((result: any) => {\n        setAccountHistoryData(result);\n      });\n    }\n  }, [historyDate, accountId]);\n\n  return (\n    <div className=\"AccountDetails\">\n      <div style={{ display: \"flex\" }}>\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          className=\"AccountDetailsBackButton\"\n          onClick={() => {\n            navigate(-1);\n          }}\n        >\n          {`< Back`}\n        </Button>\n        <Button\n          style={{ marginLeft: \"16px\" }}\n          className=\"AccountDetailsBackButton\"\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            window.open(`https://3commas.io/accounts/${accountId}`, \"_blank\");\n          }}\n        >\n          Open in 3commas\n        </Button>\n      </div>\n      <div className=\"AccountDetailsMode\">\n        <div className=\"AccountDetailsControl\">\n          <ButtonGroup id=\"foo\">\n            <ToggleButton\n              key=\"current\"\n              id={`radio-account-current`}\n              type=\"radio\"\n              variant=\"outline-primary\"\n              name=\"radioAccountMode\"\n              value={\"current\"}\n              checked={accountMode === \"current\"}\n              onChange={(e) => {\n                setAccountMode(e.currentTarget.value);\n              }}\n            >\n              Current\n            </ToggleButton>\n            <ToggleButton\n              key=\"history\"\n              id={`radio-account-history`}\n              type=\"radio\"\n              variant=\"outline-primary\"\n              name=\"radioAccountMode\"\n              value={\"history\"}\n              checked={accountMode === \"history\"}\n              onChange={(e) => {\n                setAccountMode(e.currentTarget.value);\n              }}\n            >\n              History\n            </ToggleButton>\n          </ButtonGroup>\n        </div>\n        {accountMode === \"history\" && (\n          <div className=\"AccountDetailsControl\">\n            <ButtonGroup id=\"foo\">\n              <ToggleButton\n                key=\"usd\"\n                id={`radio-account-currency-usd`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioAccountCurrencyMode\"\n                value={\"usd\"}\n                checked={historyCurrency === \"usd\"}\n                onChange={(e) => {\n                  setHistoryCurrency(e.currentTarget.value);\n                }}\n              >\n                USD\n              </ToggleButton>\n              <ToggleButton\n                key=\"btc\"\n                id={`radio-account-currency-btc`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioAccountCurrencyMode\"\n                value={\"btc\"}\n                checked={historyCurrency === \"btc\"}\n                onChange={(e) => {\n                  setHistoryCurrency(e.currentTarget.value);\n                }}\n              >\n                BTC\n              </ToggleButton>\n            </ButtonGroup>\n          </div>\n        )}\n        {accountMode === \"history\" && (\n          <div className=\"AccountDetailsNamedControl\">\n            <div className=\"AccountDetailsFilterTitle\">From:</div>\n            <DatePicker\n              dateFormat=\"dd/MM/yyyy\"\n              selected={historyDate}\n              onChange={(date) => {\n                setHistoryDate(date as any);\n              }}\n              selectsStart\n              className=\"AccountDetailsDateFilter\"\n              strictParsing\n            />\n          </div>\n        )}\n      </div>\n      <div className=\"AccountDetailsOverview\">\n        {accountMode === \"current\" && (\n          <>\n            <div className=\"AccountDetailsOverviewPieChart\">\n              {account && accountPieChart && (\n                <AccountPieChart accountPieChart={accountPieChart} />\n              )}\n            </div>\n            {account && (\n              <div className=\"AccountDetailsOverviewTable\">\n                <div className=\"AccountNameContainer\">\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"AccountDetailsAccountIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <span className=\"AccountName\">{account.name}</span>\n                </div>\n                <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                  <thead>\n                    <tr>\n                      <th>Balance value</th>\n                      <th>24 hr change</th>\n                      <th>30 days change</th>\n                      <th>30 days change, %</th>\n                      <th>All time change</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_amount),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.day_profit_usd) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.day_profit_usd),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.usd_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_profit),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.usd_profit_percentage) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_profit_percentage),\n                        currency: \"USD\",\n                      })} %`}</td>\n                      <td\n                        className={\n                          parseFloat(account.total_usd_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.total_usd_profit),\n                        currency: \"USD\",\n                      })} $`}</td>\n                    </tr>\n                    <tr>\n                      <td>{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_amount),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.day_profit_btc) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.day_profit_btc),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.btc_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_profit),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.btc_profit_percentage) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_profit_percentage),\n                        currency: \"USD\",\n                      })} %`}</td>\n                      <td\n                        className={\n                          parseFloat(account.total_btc_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.total_btc_profit),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </div>\n            )}\n          </>\n        )}\n        {accountMode === \"history\" && accountHistoryData && (\n          <div className=\"AccountDetailsOverviewBalances\">\n            {account && (\n              <div className=\"AccountNameContainer\">\n                {\"market_icon\" in account && (\n                  <div\n                    className=\"AccountDetailsAccountIcon\"\n                    style={{\n                      backgroundImage: `url(${account.market_icon})`,\n                    }}\n                  ></div>\n                )}\n                <span className=\"AccountName\">{account.name}</span>\n              </div>\n            )}\n            <div className=\"AccountDetailsOverviewBalancesChart\">\n              <Line\n                options={\n                  TimeLineChartOptions(\n                    \"\",\n                    chartTooltipFormatLabel(\n                      historyCurrency === \"usd\" ? \"USD\" : \"BTC\"\n                    )\n                  ) as any\n                }\n                data={{\n                  labels: accountHistoryData.map((historyData: any) =>\n                    moment.unix(historyData.date).toDate()\n                  ),\n                  datasets: [\n                    {\n                      label: historyCurrency === \"usd\" ? \"USD\" : \"BTC\",\n                      data: accountHistoryData.map((historyData: any) =>\n                        historyCurrency === \"usd\"\n                          ? historyData.usd\n                          : historyData.btc\n                      ),\n                      borderColor: \"rgb(53, 162, 235)\",\n                      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    },\n                  ],\n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n      {accountTable && (\n        <AccountBalancesTable\n          accountTable={accountTable}\n          accountId={accountId}\n        />\n      )}\n    </div>\n  );\n};\n\nconst AccountBalancesTable: FC<any> = ({ accountTable, accountId }) => {\n  const [accountFilteredTable, setAccountFilteredTable] = useState<any>(null);\n  const [accountFilter, setAccountFilter] = useState<any>(\"\");\n  const [hideSmallBalances, setHideSmallBalances] = useState<any>(false);\n  const [balancesCurrency, setBalancesCurrency] = useState<any>(\"usd\");\n\n  useEffect(() => {\n    if (accountTable && !accountFilter && !hideSmallBalances) {\n      setAccountFilteredTable(\n        _.orderBy(accountTable, [\"percentage\"], [\"desc\"])\n      );\n    } else if (accountTable) {\n      setAccountFilteredTable(\n        _.orderBy(\n          accountTable\n            .filter(\n              (tableData: any) =>\n                tableData.currency_code &&\n                tableData.currency_code.includes(accountFilter.toUpperCase())\n            )\n            .filter((tableData: any) =>\n              hideSmallBalances\n                ? tableData.usd_value > 10 && tableData.percentage > 1\n                : true\n            ),\n          [\"percentage\"],\n          [\"desc\"]\n        )\n      );\n    }\n  }, [accountTable, accountFilter, hideSmallBalances]);\n\n  return (\n    <div className=\"AccountDetailsTableContainer\">\n      <div className=\"AccountDetailsTableFilters\">\n        <FormControl\n          onChange={(e: any) => {\n            setAccountFilter(e.target.value);\n          }}\n          value={accountFilter}\n          type=\"text\"\n          style={{ width: \"200px\", marginRight: \"16px\" }}\n        />\n        <FormCheck\n          type=\"switch\"\n          onChange={(e: any) => {\n            setHideSmallBalances(e.target.checked);\n          }}\n          value={hideSmallBalances}\n          id={`default-f`}\n          label={`Hide small balances`}\n        />\n        <ButtonGroup style={{ marginLeft: \"auto\" }}>\n          <ToggleButton\n            key=\"usd\"\n            id={`radio-account-balances-currency-usd`}\n            type=\"radio\"\n            variant=\"outline-primary\"\n            name=\"radioAccountBalancesCurrencyMode\"\n            value={\"usd\"}\n            checked={balancesCurrency === \"usd\"}\n            onChange={(e) => {\n              setBalancesCurrency(e.currentTarget.value);\n            }}\n          >\n            USD\n          </ToggleButton>\n          <ToggleButton\n            key=\"btc\"\n            id={`radio-account-balances-currency-btc`}\n            type=\"radio\"\n            variant=\"outline-primary\"\n            name=\"radioAccountBalancesCurrencyMode\"\n            value={\"btc\"}\n            checked={balancesCurrency === \"btc\"}\n            onChange={(e) => {\n              setBalancesCurrency(e.currentTarget.value);\n            }}\n          >\n            BTC\n          </ToggleButton>\n        </ButtonGroup>\n      </div>\n      <div className=\"AccountDetailsTable\">\n        {accountFilteredTable && (\n          <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n            <thead>\n              <tr>\n                <th>Token</th>\n                <th>Share</th>\n                <th>Price</th>\n                <th>Price change, 24h</th>\n                <th>Amount</th>\n                {accountId !== \"summary\" && <th>On orders</th>}\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              {accountFilteredTable.map((row: any) => (\n                <tr key={row.currency_code}>\n                  <td>\n                    {row.currency_name\n                      ? `${row.currency_name} (${row.currency_code})`\n                      : row.currency_code}\n                  </td>\n                  <td>{`${getCurrencyFormat({\n                    value: row.percentage,\n                    currency: \"USD\",\n                  })} %`}</td>\n                  <td>\n                    {balancesCurrency === \"usd\"\n                      ? `${getCurrencyFormat({\n                          value: row.current_price_usd,\n                          currency: \"USD\",\n                        })} $`\n                      : `${getCurrencyFormat({\n                          value: row.current_price,\n                          currency: \"BTC\",\n                        })} BTC`}\n                  </td>\n                  <td\n                    className={\n                      parseFloat(\n                        balancesCurrency === \"usd\"\n                          ? row.day_change_percent_usd\n                          : row.day_change_percent_btc\n                      ) >= 0\n                        ? \"showGreen\"\n                        : \"showRed\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value:\n                      balancesCurrency === \"usd\"\n                        ? row.day_change_percent_usd\n                        : row.day_change_percent_btc,\n                    currency: \"USD\",\n                  })} %`}</td>\n                  <td>{`${getCurrencyFormat({\n                    value: row.position,\n                    currency: row.currency_code,\n                  })}`}</td>\n                  {accountId !== \"summary\" && (\n                    <td>{`${getCurrencyFormat({\n                      value: row.on_orders,\n                      currency: row.currency_code,\n                    })}`}</td>\n                  )}\n                  <td>\n                    {balancesCurrency === \"usd\"\n                      ? `${getCurrencyFormat({\n                          value: row.usd_value,\n                          currency: \"USD\",\n                        })} $`\n                      : `${getCurrencyFormat({\n                          value: row.btc_value,\n                          currency: \"BTC\",\n                        })} BTC`}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AccountDetails;\n","import React, { FC, useContext } from \"react\";\nimport { AccountsContext } from \"../../../App\";\nimport AccountPreview from \"./AccountPreview/AccountPreview\";\nimport \"./AccountsList.css\";\n\ninterface AccountsListProps {}\n\nconst AccountsList: FC<AccountsListProps> = () => {\n  const {\n    accountsState: { list },\n  } = useContext(AccountsContext);\n\n  return (\n    <div className=\"AccountsList\">\n      {list.map((accountId: any) => (\n        <AccountPreview accountId={accountId} key={accountId} />\n      ))}\n    </div>\n  );\n};\n\nexport default AccountsList;\n","import _ from \"lodash\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext } from \"../../../App\";\nimport { IAccount } from \"../../../interfaces/Account\";\nimport {\n  fetchAccount,\n  fetchAccountPieChartData,\n  fetchAccountTableData,\n} from \"../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../utils/BotsUtils\";\nimport { AccountPieChart } from \"../AccountsList/AccountPreview/AccountPreview\";\nimport \"./AccountsSummaryPreview.css\";\n\ninterface AccountsSummaryPreviewProps {}\n\nconst AccountsSummaryPreview: FC<AccountsSummaryPreviewProps> = () => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountTableData } = accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [summary, setSummary] = useState<IAccount | null>(null);\n  const [summaryPieChart, setSummaryPieChart] = useState<any>(null);\n  const [summaryTableData, setSummaryTableData] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchAccountPieChartData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      \"summary\"\n    );\n    fetchAccountTableData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      \"summary\"\n    );\n    fetchAccount(accountsDispatch, accountsState, errorsDispatch, \"summary\");\n  }, []);\n\n  useEffect(() => {\n    if (\"summary\" in accountPieChartData) {\n      setSummaryPieChart(accountPieChartData[\"summary\"]);\n    }\n  }, [accountPieChartData]);\n\n  useEffect(() => {\n    if (\"summary\" in accountTableData) {\n      setSummaryTableData(\n        _.orderBy(accountTableData[\"summary\"], [\"percentage\"], [\"desc\"]).slice(\n          0,\n          3\n        )\n      );\n    }\n  }, [accountTableData]);\n\n  useEffect(() => {\n    if (\"summary\" in accounts) {\n      setSummary(accounts[\"summary\"]);\n    }\n  }, [accounts]);\n\n  return (\n    <div className=\"AccountsSummaryPreview\">\n      <div className=\"AccountsSummaryPreviewColumn\">\n        <div className=\"AccountNameContainer\">\n          <span className=\"AccountName\">Agrregate / Summary account</span>\n        </div>\n        <div className=\"AccountsSummaryPreviewCharts\">\n          <div className=\"AccountsSummaryPreviewPieChart\">\n            {summary && summaryPieChart && (\n              <AccountPieChart accountPieChart={summaryPieChart} />\n            )}\n          </div>\n          {summary && (\n            <div className=\"AccountsSummaryPreviewBalanceTable\">\n              <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                <thead>\n                  <tr>\n                    <th>Balance value</th>\n                    <th>24 hr change</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{`${getCurrencyFormat({\n                      value: parseFloat(summary.usd_amount),\n                      currency: \"USD\",\n                    })} $`}</td>\n                    <td\n                      className={\n                        parseFloat(summary.day_profit_usd) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(summary.day_profit_usd),\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                  <tr>\n                    <td>{`${getCurrencyFormat({\n                      value: parseFloat(summary.btc_amount),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                    <td\n                      className={\n                        parseFloat(summary.day_profit_btc) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(summary.day_profit_btc),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"AccountsSummaryPreviewColumn\">\n        <div className=\"AccountNameContainer\">\n          <span className=\"AccountName\">Top assets</span>\n        </div>\n        {summaryTableData && (\n          <div className=\"AccountsSummaryPreviewAssetsTable\">\n            <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n              <thead>\n                <tr>\n                  <th>Token</th>\n                  <th>Amount</th>\n                  <th>Total value, $</th>\n                </tr>\n              </thead>\n              <tbody>\n                {summaryTableData.map((asset: any) => (\n                  <tr key={asset.currency_code}>\n                    <td>{asset.currency_code}</td>\n                    <td>{`${getCurrencyFormat({\n                      value: asset.position,\n                      currency: asset.currency_code,\n                    })}`}</td>\n                    <td>{`${getCurrencyFormat({\n                      value: asset.usd_value,\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </div>\n        )}\n      </div>\n      <div className=\"AccountsSummaryButtonContainer\">\n        <Button\n          className=\"AccountPreviewButton\"\n          onClick={() => {\n            navigate({\n              pathname: `/accounts/summary`,\n              search: window.location.search,\n            });\n          }}\n        >\n          View\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountsSummaryPreview;\n","import React, { FC } from \"react\";\nimport \"./Accounts.css\";\nimport AccountsList from \"./AccountsList/AccountsList\";\nimport AccountsSummaryPreview from \"./AccountsSummaryPreview/AccountsSummaryPreview\";\n\ninterface AccountsProps {}\n\nconst Accounts: FC<AccountsProps> = () => {\n  return (\n    <div className=\"Accounts\">\n      <AccountsSummaryPreview />\n      <AccountsList />\n    </div>\n  );\n};\n\nexport default Accounts;\n","import { getDeals } from \"./ApiUtils\";\nimport moment from \"moment\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport _ from \"lodash\";\nimport { IDealsState } from \"../state/deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../state/deals/DealsSelectors\";\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60));\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60 * 24));\n\nexport const getDealAgeInHours = (deal: any) =>\n  differenceInHours(moment(), moment(deal.closed_at));\n\nexport const getDealAgeInDaysSinceOpened = (deal: any) =>\n  differenceInDays(moment(), moment(deal.created_at));\n\nexport const getAllDealsForOneBot = async (\n  botId: number,\n  daysWithin = 30,\n  ofsetCallback = (offset: number) => {}\n) => {\n  const hoursWithin = 24 * daysWithin;\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsInLoop = async () => {\n    const newDeals = await getDeals(\n      botId,\n      offset,\n      limit,\n      \"finished\",\n      \"closed_at\"\n    );\n\n    if (newDeals.length === 0) {\n      return;\n    }\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= hoursWithin\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      ofsetCallback(offset);\n      await fetchAllDealsInLoop();\n    } else {\n      const filteredDeals = newDeals.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin\n      );\n      deals = [...deals, ...filteredDeals];\n    }\n  };\n\n  await fetchAllDealsInLoop();\n\n  return deals;\n};\n\nexport const getObjectOfProfitPerDay = (deals: Array<IDeal>) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  let result = _.groupBy(deals, dateString);\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfProfitPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const calculateProfitPerDayForListOfBots = (\n  dealsState: IDealsState,\n  botsIds: Array<number>\n) => {\n  return botsIds.reduce((currentObj: any, botId: number) => {\n    const botsDeals = getObjectOfProfitPerDay(\n      selectAllDealsWithin30Days(dealsState, botId)\n    );\n\n    return _.mergeWith(\n      botsDeals,\n      currentObj,\n      (profit1: number, profit2: number) => {\n        profit1 = profit1 || 0;\n        profit2 = profit2 || 0;\n        return profit1 + profit2;\n      }\n    );\n  }, {});\n};\n\nexport const getLastNDays = (n: number = 30) =>\n  [...new Array(n)]\n    .map((i, idx) => moment().startOf(\"day\").subtract(idx, \"days\"))\n    .map((date: any) => date.format(\"YYYY-MM-DD\"))\n    .reverse();\n\nexport const getProfitChartData = (profitObject: any, nDays = 30) => {\n  const lastDays = getLastNDays(nDays);\n\n  const profits = lastDays.map((day: string) => {\n    return day in profitObject ? profitObject[day] : 0;\n  });\n\n  const labels = lastDays.map((day: any) => moment(day, \"YYYY-MM-DD\"));\n  return [labels, profits];\n};\n\nexport const getAccumulativeProfitChartData = (\n  profitObject: any,\n  nDays = 30\n) => {\n  const profits = getProfitChartData(profitObject, nDays);\n  let currentvalue = 0;\n  const accProfits = profits[1].map((profit: any) => {\n    const acc = currentvalue + profit;\n    currentvalue = acc;\n    return acc;\n  });\n  return [profits[0], accProfits];\n};\n\nexport const getDealsCountPerDay = (deals: IDeal[], dates: string[]) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  const delsGrouped = _.groupBy(deals, dateString);\n  const result = _.mapValues(\n    delsGrouped,\n    (deals: Array<IDeal>) => deals.length\n  );\n\n  return dates.map((day: string) => {\n    return day in result ? result[day] : 0;\n  });\n};\n\nexport const dealsStatusesCounts = (deals: IDeal[]) => {\n  const countsObj = _.countBy(deals, (deal) => deal.localized_status);\n  const keys = [\n    \"Cancelled\",\n    \"StopLoss\",\n    \"Failed\",\n    \"Completed\",\n    \"Closed at Market Price\",\n    \"Liquidated\",\n    \"Switched\",\n  ];\n  const values = keys.map((key) => countsObj[key]);\n  return [keys, values];\n};\n\nexport const getDealsDurationHistogramData = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return differenceInHours(end, start);\n  });\n  const countsObj = _.countBy(dealDurations);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getAverageDealDuration = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return end.diff(start);\n  });\n\n  const avgDealDurationInMilliseconds =\n    _.sum(dealDurations) / dealDurations.length || 0;\n\n  return moment.utc(avgDealDurationInMilliseconds).format(\"HH:mm\");\n};\n\nexport const getOneBotAccumulativeProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getAccumulativeProfitChartData(botsDeals, 30)\n    : getAccumulativeProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getProfitChartData(botsDeals, 30)\n    : getProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotCurrencyLeaderbord = (deals: IDeal[]) => {\n  const profitsByPair = getObjectOfProfitPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getAverageTp = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.final_profit_percentage))\n      ) || 0,\n    currency: \"%\",\n  };\n};\n\nexport const getAverageProfitFromDeal = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.usd_final_profit))\n      ) || 0,\n    currency: \"$\",\n  };\n};\n\nexport const getTotalProfitUsd = (deals: IDeal[]) => {\n  return _.sum(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0;\n};\n\nexport const getAverageDailyProfit = (\n  createdAt: string,\n  deals: IDeal[],\n  fromFilter: any,\n  toFilter: any\n) => {\n  const startBotDate = moment.utc(createdAt);\n  const fromFilterMoment = moment.utc(fromFilter).startOf(\"day\");\n  const toFilterMoment = moment.utc(toFilter).startOf(\"day\");\n\n  const maxDate = moment.max([fromFilterMoment, startBotDate]);\n\n  const profitsData = _.unzip(\n    _.zip(...getOneBotProfitsChartData(deals)).filter(\n      (chartData) =>\n        !chartData[0].isBefore(maxDate, \"day\") &&\n        !chartData[0].isAfter(toFilterMoment, \"day\")\n    )\n  );\n\n  return {\n    value: _.mean(profitsData[1]),\n    currency: \"$\",\n  };\n};\n","import { getDealAgeInHours } from \"../../utils/DealsUtils\";\nimport { IDealsState } from \"./DealsReducer\";\n\nexport const INFINITY_IN_DAYS = 100000;\nconst hoursWithin30Days = 24 * 30;\n\nexport const is30daysDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals && state.deals[botId] && state.deals[botId].period >= 30;\n\nexport const isAllDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals &&\n  state.deals[botId] &&\n  state.deals[botId].period >= INFINITY_IN_DAYS;\n\nexport const selectAllDealsWithin30Days = (\n  state: IDealsState,\n  botId: number\n) => {\n  return is30daysDealsLoaded(state, botId)\n    ? state.deals[botId].list.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin30Days\n      )\n    : [];\n};\n\nexport const selectAllDeals = (state: IDealsState, botId: number) => {\n  return isAllDealsLoaded(state, botId) ? state.deals[botId].list : [];\n};\n","import { IBot, IBotFilters } from \"../../interfaces/Bot\";\n\ninterface ISetNewBotsList {\n  type: \"setNewBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const setNewBotsList = (botsList: Array<IBot>): ISetNewBotsList => ({\n  type: \"setNewBotsList\",\n  payload: botsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToBotsList {\n  type: \"addToBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const addToBotsList = (botsList: Array<IBot>): IAddToBotsList => ({\n  type: \"addToBotsList\",\n  payload: botsList,\n});\n\ninterface ISetBotsOffset {\n  type: \"setBotsOffset\";\n  payload: number;\n}\n\nexport const setBotsOffset = (offset: number): ISetBotsOffset => ({\n  type: \"setBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetBotsFilters {\n  type: \"setBotsFilters\";\n  payload: IBotFilters;\n}\n\nexport const setBotsFilters = (botsFilter: IBotFilters): ISetBotsFilters => ({\n  type: \"setBotsFilters\",\n  payload: botsFilter,\n});\n\ninterface ISetBot {\n  type: \"setBot\";\n  payload: { botId: number; bot: IBot };\n}\n\nexport const setBot = (botId: number, bot: IBot): ISetBot => ({\n  type: \"setBot\",\n  payload: { botId, bot },\n});\n\nexport type BotsAction =\n  | ISetNewBotsList\n  | ISetHasMore\n  | IAddToBotsList\n  | ISetBotsOffset\n  | ISetBotsFilters\n  | ISetBot;\n","import { getBot, getBots, getBotStats } from \"../../utils/ApiUtils\";\nimport { getMaxUsage, getReturns } from \"../../utils/BotsUtils\";\nimport { IDealsState } from \"../deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../deals/DealsSelectors\";\nimport {\n  addToBotsList,\n  setBotsOffset,\n  setHasMore,\n  setNewBotsList,\n  setBot,\n} from \"./BotsActions\";\nimport { IBotsState } from \"./BotsReducer\";\n\nexport async function fetchBots(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  resetOffset: boolean = false,\n  customLimit?: number\n) {\n  botsDispatch(setHasMore(true));\n  const {\n    offset,\n    limit,\n    filters: { sorting, scope, type, account },\n  } = botsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    const data = await getBots(\n      offset,\n      offsetLimit,\n      sorting,\n      scope,\n      type,\n      account,\n      resetOffset\n    );\n    if (resetOffset) {\n      botsDispatch(setBotsOffset(offsetLimit));\n      botsDispatch(setNewBotsList(data));\n    } else {\n      botsDispatch(setBotsOffset(offset + offsetLimit));\n      botsDispatch(addToBotsList(data));\n    }\n    if (data.length < offsetLimit) {\n      botsDispatch(setHasMore(false));\n    }\n  } catch {\n    botsDispatch(setNewBotsList([]));\n    botsDispatch(setBotsOffset(offsetLimit));\n    botsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching bots list\",\n    });\n  }\n}\n\nexport async function fetchBot(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    const bot = await getBot(botId);\n    botsDispatch(setBot(botId, bot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching bot ${botId}`,\n    });\n  }\n}\n\nexport async function getMaxUsageEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number,\n  account: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"maxUsage\" in bots[botId])) {\n      const maxUsage = await getMaxUsage(botItem, account);\n      const bot = { ...botItem, maxUsage: maxUsage };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = { ...botItem, maxUsage: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching max usage for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getFundsLockedAndTodaysProfit(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"fundsLocked\" in bots[botId])) {\n      const {\n        profits_in_usd: { today_usd_profit, funds_locked_in_active_deals },\n      } = await getBotStats(botId);\n\n      const bot = {\n        ...botItem,\n        fundsLocked: funds_locked_in_active_deals,\n        todayUsdProfit: today_usd_profit,\n      };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = {\n      ...botItem,\n      fundsLocked: 0,\n      todayUsdProfit: 0,\n    };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching stats for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getReturnsEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  dealsState: IDealsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    const deals30daysForBot = selectAllDealsWithin30Days(dealsState, botId);\n    const maxUsage = botItem.maxUsage;\n    const bot = {\n      ...botItem,\n      returns: getReturns(maxUsage, deals30daysForBot),\n    };\n    botsDispatch(setBot(botItem.id, bot));\n  } catch {\n    const bot = { ...botItem, returns: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when getting returns for bot ${botItem.name}`,\n    });\n  }\n}\n","import { IDeal } from \"../../interfaces/Deal\";\n\ninterface IGetDealsList {\n  type: \"getDealsList\";\n  payload: { deals: Array<IDeal>; botId: number; periodInDays: number };\n}\n\nexport const getDealsList = (\n  deals: Array<IDeal>,\n  botId: number,\n  periodInDays: number\n): IGetDealsList => ({\n  type: \"getDealsList\",\n  payload: { deals, botId, periodInDays },\n});\n\ninterface IGetActiveDealsList {\n  type: \"getActiveDealsList\";\n  payload: { activeDeals: Array<IDeal>; botId: number };\n}\nexport const getActiveDealsList = (\n  activeDeals: Array<IDeal>,\n  botId: number\n): IGetActiveDealsList => ({\n  type: \"getActiveDealsList\",\n  payload: { activeDeals, botId },\n});\n\ninterface ISetOffset {\n  type: \"setOffset\";\n  payload: { botId: number; offset: number };\n}\n\nexport const setOffset = (botId: number, offset: number): ISetOffset => ({\n  type: \"setOffset\",\n  payload: { botId, offset },\n});\n\ninterface IResetDeals {\n  type: \"resetDeals\";\n  payload: { botId: number };\n}\n\nexport const resetDeals = (botId: number): IResetDeals => ({\n  type: \"resetDeals\",\n  payload: { botId },\n});\ninterface IResetActiveDeals {\n  type: \"resetActiveDeals\";\n  payload: { botId: number };\n}\n\nexport const resetActiveDeals = (botId: number): IResetActiveDeals => ({\n  type: \"resetActiveDeals\",\n  payload: { botId },\n});\n\nexport type DealsAction =\n  | IGetDealsList\n  | ISetOffset\n  | IResetDeals\n  | IGetActiveDealsList\n  | IResetActiveDeals;\n","import { getDeals } from \"../../utils/ApiUtils\";\nimport { getAllDealsForOneBot } from \"../../utils/DealsUtils\";\nimport {\n  getActiveDealsList,\n  getDealsList,\n  resetActiveDeals,\n  resetDeals,\n  setOffset,\n} from \"./DealsActions\";\nimport { IDealsState } from \"./DealsReducer\";\nimport {\n  INFINITY_IN_DAYS,\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n} from \"./DealsSelectors\";\n\nexport async function fetchDealsForBotFor30Days(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    if (is30daysDealsLoaded(dealsState, botId)) {\n      return;\n    }\n    const data = await getAllDealsForOneBot(botId, 30);\n    dealsDispatch(getDealsList(data, botId, 30));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport async function fetchAllDealsForBot(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) {\n  try {\n    if (isAllDealsLoaded(dealsState, botId) && !reset) {\n      return;\n    }\n\n    if (reset) {\n      dealsDispatch(resetDeals(botId));\n    }\n\n    await fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botId\n    );\n    const data = await getAllDealsForOneBot(\n      botId,\n      INFINITY_IN_DAYS,\n      (offset: number) => {\n        dealsDispatch(setOffset(botId, offset));\n      }\n    );\n    dealsDispatch(getDealsList(data, botId, INFINITY_IN_DAYS));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport const getAllActiveDeals = async (\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) => {\n  try {\n    if (reset) {\n      dealsDispatch(resetActiveDeals(botId));\n    }\n    const data = await getDeals(botId, 0, 1000, \"active\", \"created_at\");\n    dealsDispatch(getActiveDealsList(data, botId));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching active deals for bot ${botId}`,\n      });\n    }\n    return Promise.resolve([]);\n  }\n};\n","import moment from \"moment\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport const usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const convertFilterValueToDate = (filterFrom: any) => {\n  const dateFormat = \"YYYY-MM-DD\";\n\n  const filterValue = filterFrom.label;\n\n  if (filterValue === \"today\") {\n    return moment().subtract(1, \"day\").format(dateFormat);\n  } else if (filterValue === \"week\") {\n    return moment().subtract(1, \"week\").format(dateFormat);\n  } else if (filterValue === \"month\") {\n    return moment().subtract(1, \"months\").format(dateFormat);\n  } else if (filterValue === \"custom\") {\n    return filterFrom.from\n      ? moment(filterFrom.from).format(dateFormat)\n      : moment().format(dateFormat);\n  }\n  return \"\";\n};\n","import React from \"react\";\nimport { Bar, Doughnut } from \"react-chartjs-2\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  DealsCountBarChartOptions,\n  HistogramChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  dealsStatusesCounts,\n  getDealsCountPerDay,\n  getDealsDurationHistogramData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsMainCharts.css\";\n\nexport const DCABotDetailsMainCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n}) => {\n  const countsValues = getDealsCountPerDay(deals, dateLabelsDays);\n  const dealsStatusData = dealsStatusesCounts(deals);\n  const dealsDurationHistogramData = getDealsDurationHistogramData(deals);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            DealsCountBarChartOptions(\n              \"Finished deals per day\",\n              dateLabelsDays.length < 70\n            ) as any\n          }\n          data={{\n            labels: dateLabelsDays,\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: countsValues,\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Doughnut\n          options={\n            {\n              aspectRatio: 1.7,\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"Finished deals by Status\",\n                },\n                tooltip: {\n                  callbacks: {\n                    label: (tooltipItem: any) => {\n                      const dataset = tooltipItem.dataset;\n                      const total = dataset.data.reduce(function (\n                        previousValue: any,\n                        currentValue: any\n                      ) {\n                        return currentValue\n                          ? previousValue + currentValue\n                          : previousValue;\n                      },\n                      0);\n                      const currentValue = dataset.data[tooltipItem.dataIndex];\n                      const percentage = Math.floor(\n                        (currentValue / total) * 100 + 0.5\n                      );\n                      const label = tooltipItem.label;\n\n                      return `${label}: ${currentValue} (${percentage}%)`;\n                    },\n                  },\n                },\n                legend: {\n                  labels: {\n                    filter: (legendItem: any, data: any) => {\n                      return data.datasets[0].data[legendItem.index];\n                    },\n                  },\n                },\n              },\n            } as any\n          }\n          width={300}\n          data={{\n            labels: dealsStatusData[0] as any,\n            datasets: [\n              {\n                data: dealsStatusData[1],\n                backgroundColor: [\n                  \"rgba(54, 162, 235, 0.2)\",\n                  \"rgba(255, 99, 132, 0.2)\",\n                  \"rgba(255, 206, 86, 0.2)\",\n                  \"rgba(75, 192, 192, 0.2)\",\n                  \"rgba(153, 102, 255, 0.2)\",\n                  \"rgba(255, 159, 64, 0.2)\",\n                  \"rgba(39, 47, 148, 0.2)\",\n                ],\n                borderColor: [\n                  \"rgba(54, 162, 235, 1)\",\n                  \"rgba(255, 99, 132, 1)\",\n                  \"rgba(255, 206, 86, 1)\",\n                  \"rgba(75, 192, 192, 1)\",\n                  \"rgba(153, 102, 255, 1)\",\n                  \"rgba(255, 159, 64, 1)\",\n                  \"rgba(39, 47, 148, 1)\",\n                ],\n                borderWidth: 1,\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            HistogramChartOptions(\n              \"Finished deals duration histogram, hours\",\n              \"Duration, hours\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsDurationHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsDurationHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneBotCurrencyLeaderbord,\n  getOneBotAccumulativeProfitsChartData,\n  getOneBotProfitsChartData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsCharts.css\";\n\nexport const DCABotDetailsProfitsCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n\n  useEffect(() => {\n    setAccumulativeProfitsData(getOneBotAccumulativeProfitsChartData(deals));\n    setProfitsData(getOneBotProfitsChartData(deals));\n    setPairsLeaderbordData(getOneBotCurrencyLeaderbord(deals));\n  }, [deals]);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={AccumulativeChartOptions(\"Accumulative Profit, $\") as any}\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: \"Accumulative Profit, $\",\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={ProfitChartOptions(\"Daily Profit, $\") as any}\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      {bot.type !== \"Bot::SingleBot\" && (\n        <div className=\"DCABotDetailsChartContainer\">\n          <Bar\n            options={\n              LeaderbordChartOptions(\n                \"Pairs leaderboard by profit\",\n                pairsLeaderbordData[0]\n              ) as any\n            }\n            data={{\n              labels: pairsLeaderbordData[0],\n              datasets: [\n                {\n                  label: \"Profit, $\",\n                  data: pairsLeaderbordData[1],\n                  borderColor: \"rgb(53, 162, 235)\",\n                  backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                },\n              ],\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  getDealAgeInDaysSinceOpened,\n  getLastNDays,\n} from \"../../../../utils/DealsUtils\";\nimport { DCABotDetailsMainCharts } from \"../DCABotDetailsMain/DCABotDetailsMainCharts\";\nimport { DCABotDetailsProfitsCharts } from \"../DCABotDetailsProfits/DCABotDetailsProfitsCharts\";\nimport \"./DCABotDetailsCharts.css\";\n\nexport const DCABotDetailsCharts = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  timeRangeValue,\n}: {\n  account: any;\n  bot: IBot;\n  timeRangeValue: string;\n  infoKey: string;\n  deals: IDeal[];\n}) => {\n  const [dateLabelsDays, setDateLabelsDays] = useState<string[]>([]);\n  useEffect(() => {\n    if (deals) {\n      if (timeRangeValue === \"allTime\") {\n        const oldestDealAgeInDaysSinceOpened =\n          deals.length > 0\n            ? Math.ceil(getDealAgeInDaysSinceOpened(deals.slice(-1).pop()))\n            : 0;\n        setDateLabelsDays(\n          getLastNDays(\n            oldestDealAgeInDaysSinceOpened > 30\n              ? oldestDealAgeInDaysSinceOpened\n              : 30\n          )\n        );\n      } else if (timeRangeValue === \"30d\") {\n        setDateLabelsDays(getLastNDays(30));\n      }\n    }\n  }, [deals]);\n  return (\n    <>\n      {deals && dateLabelsDays && bot && account && (\n        <div className=\"DCABotDetailsCharts\">\n          {infoKey === \"main\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"settings\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"profits\" && (\n            <DCABotDetailsProfitsCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\n\nimport \"./DCABotDetailsDealsTable.css\";\nimport { Badge, Modal, Pagination, Table, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport { getDeal } from \"../../../../utils/ApiUtils\";\n\nconst badgeVariant = {\n  Cancelled: \"secondary\",\n  StopLoss: \"danger\",\n  Failed: \"warning\",\n  Completed: \"success\",\n  \"Closed at Market Price\": \"dark\",\n  Liquidated: \"dark\",\n  Switched: \"secondary\",\n};\n\nexport const DCABotDetailsDealsTable = ({\n  bot,\n  deals,\n  dealStateSwitcher,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  dealStateSwitcher: string;\n}) => {\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"ID\",\n          accessor: \"id\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Pair\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.pair.split(\"_\").reverse().join(\"/\");\n          },\n          id: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: \"localized_status\",\n          Cell: ({ cell: { value } }: any) => (\n            // @ts-ignore\n            <Badge style={{ fontSize: \"12px\" }} bg={badgeVariant[value]}>\n              {value}\n            </Badge>\n          ),\n          disableSortBy: true,\n        },\n        {\n          Header: \"Start\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.created_at);\n          },\n          id: \"created_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"End\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.closed_at);\n          },\n          id: \"closed_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => {\n            return dealStateSwitcher === \"finished\" ? (\n              <>\n                <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n                <div>{moment(value).format(\"HH:mm\")}</div>\n              </>\n            ) : (\n              <div />\n            );\n          },\n        },\n        {\n          Header: \"Duration\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            let start = moment.utc(originalRow.created_at);\n            let end = originalRow.closed_at\n              ? moment.utc(originalRow.closed_at)\n              : moment.utc();\n            return end.diff(start);\n          },\n          id: \"duration\",\n          Cell: ({ cell: { value } }: any) => {\n            const duration = moment.duration(value);\n            const days = Math.floor(duration.asDays());\n            const daysFormatted = days ? `${days}d ` : \"\";\n\n            //Get Hours\n            const hours = duration.hours();\n            const hoursFormatted = `${hours}h `;\n\n            //Get Minutes\n            const minutes = duration.minutes();\n            const minutesFormatted = `${minutes}m`;\n\n            return `${daysFormatted} ${hoursFormatted} ${minutesFormatted}`;\n          },\n        },\n        {\n          Header: \"Avg. entry price\",\n          id: \"bought_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.bought_average_price\n              : originalRow.sold_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header:\n            dealStateSwitcher === \"finished\" ? \"Close price\" : \"Current price\",\n          id: \"sold_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            dealStateSwitcher === \"finished\"\n              ? originalRow.strategy === \"long\"\n                ? originalRow.sold_average_price\n                : originalRow.bought_average_price\n              : originalRow.current_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n            const amount =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_amount,\n                    currency: baseCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_amount,\n                    currency: baseCurrency,\n                  });\n            const volume =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_volume,\n                    currency: quoteCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_volume,\n                    currency: quoteCurrency,\n                  });\n            return `${amount} ${baseCurrency}!${volume} ${quoteCurrency}`;\n          },\n          id: \"volume\",\n          Cell: ({ cell: { value } }: any) => {\n            const values = value.split(\"!\");\n            return (\n              <>\n                <div>{values[0]}</div>\n                <div>{values[1]}</div>\n              </>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Filled SO\",\n          id: \"completed_safety_orders_count\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${originalRow.completed_safety_orders_count}${\n              originalRow.completed_manual_safety_orders_count\n                ? ` (+${originalRow.completed_manual_safety_orders_count})`\n                : \"\"\n            }`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, %\",\n          accessor:\n            dealStateSwitcher === \"finished\"\n              ? \"final_profit_percentage\"\n              : \"actual_profit_percentage\",\n          Cell: ({ cell: { value } }: any) => `${value}%`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, $\",\n          accessor:\n            dealStateSwitcher === \"finished\"\n              ? \"usd_final_profit\"\n              : \"actual_usd_profit\",\n          sortType: (a: any, b: any) => {\n            a = Number(a.original.usd_final_profit);\n            b = Number(b.original.usd_final_profit);\n            return a > b ? 1 : -1;\n          },\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value);\n            return (\n              <Badge\n                style={{ fontSize: \"13px\" }}\n                bg={numberValue >= 0 ? \"success\" : \"danger\"}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency: \"USD\",\n                },\n                \"always\"\n              )} $`}</Badge>\n            );\n          },\n        },\n        {\n          Header: \"Profit in Base\",\n          id: \"profitBase\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.bought_amount) -\n              parseFloat(originalRow.sold_amount)\n            }!${originalRow.pair.split(\"_\")[1]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit in Quote\",\n          id: \"profitQuote\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.sold_volume) -\n              parseFloat(originalRow.bought_volume)\n            }!${originalRow.pair.split(\"_\")[0]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data: deals,\n      disableSortRemove: true,\n      autoResetPage: true,\n      autoResetSortBy: false,\n      initialState: {\n        pageSize: 50,\n        sortBy:\n          dealStateSwitcher === \"finished\"\n            ? [{ id: \"closed_at\", desc: true }]\n            : [{ id: \"created_at\", desc: true }],\n      },\n    },\n    useSortBy,\n    usePagination\n  );\n  const [modalIsOpen, setModalIsOpen] = React.useState(false);\n  const [selectedDeal, setSelectedDeal] = React.useState(null as any);\n\n  return (\n    <div className=\"DCABotDetailsDealsTable\">\n      <DealModal\n        modalIsOpen={modalIsOpen}\n        setModalIsOpen={setModalIsOpen}\n        dealId={selectedDeal}\n      />\n      {pageCount > 1 && (\n        <TablePagination\n          pageIndex={pageIndex}\n          pageCount={pageCount}\n          gotoPage={gotoPage}\n          nextPage={nextPage}\n          previousPage={previousPage}\n        />\n      )}\n      <Table striped bordered {...getTableProps()} hover>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                {...row.getRowProps()}\n                onClick={() => {\n                  setSelectedDeal(row.original.id);\n                  setModalIsOpen(true);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nconst TablePagination = ({\n  pageIndex,\n  pageCount,\n  gotoPage,\n  nextPage,\n  previousPage,\n}: any) => {\n  const range = (start: number, end: number) =>\n    Array(end - start + 1)\n      .fill(0)\n      .map((_, idx) => start + idx);\n\n  const renderPaginationNumberItem = (page: any, pageIndex: any) => (\n    <Pagination.Item\n      active={page === pageIndex}\n      onClick={() => {\n        gotoPage(page);\n      }}\n      key={page}\n    >\n      {page + 1}\n    </Pagination.Item>\n  );\n\n  const renderPaginationBeginning = () => (\n    <>\n      <Pagination.First\n        onClick={() => {\n          gotoPage(0);\n        }}\n      />\n      <Pagination.Prev\n        onClick={() => {\n          previousPage();\n        }}\n      />\n      {pageIndex - 2 < 4 &&\n        renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n      {pageIndex - 1 < 4 &&\n        renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n    </>\n  );\n  const renderPaginationEnd = () => (\n    <>\n      <Pagination.Next\n        onClick={() => {\n          nextPage();\n        }}\n      />\n      <Pagination.Last\n        onClick={() => {\n          gotoPage(pageCount - 1);\n        }}\n      />\n    </>\n  );\n\n  return (\n    <>\n      {pageCount <= 16 && (\n        <Pagination>\n          {range(0, pageCount - 1).map((page) =>\n            renderPaginationNumberItem(page, pageIndex)\n          )}\n        </Pagination>\n      )}\n      {pageCount > 16 && (\n        <Pagination>\n          {pageIndex < 7 && (\n            <>\n              {range(0, 6).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n              {renderPaginationEnd()}\n            </>\n          )}\n\n          {pageIndex >= 7 && pageIndex <= pageCount - 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n              {renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n              <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\n              {renderPaginationNumberItem(pageIndex + 1, pageIndex)}\n              {renderPaginationNumberItem(pageIndex + 2, pageIndex)}\n              {renderPaginationEnd()}\n            </>\n          )}\n          {pageCount - pageIndex < 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {range(pageCount - 7, pageCount - 1).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n            </>\n          )}\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nconst DealModal = ({ modalIsOpen, setModalIsOpen, dealId }: any) => {\n  const [deal, setDeal] = React.useState(null as any);\n\n  useEffect(() => {\n    if (dealId) {\n      getDeal(dealId).then((dl) => {\n        setDeal(dl);\n      });\n    }\n  }, [dealId]);\n  return (\n    <>\n      {deal && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(false);\n          }}\n          scrollable\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{deal.id}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {deal.bot_events.length > 0 && (\n              <Table striped hover>\n                <thead>\n                  <tr>\n                    <th>Date/Time</th>\n                    <th>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {deal.bot_events.map((event: any) => (\n                    <tr key={event.created_at}>\n                      <td>\n                        {moment(event.created_at).format(\"D MMM, YYYY HH:mm\")}\n                      </td>\n                      <td>{event.message}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )}\n            {deal.bot_events.length === 0 && (\n              <blockquote className=\"blockquote mb-0\">\n                <p>\n                  “Nothing can last forever. There isn't any memory, no matter\n                  how intense, that doesn't fade out at last.”{\" \"}\n                </p>\n                <footer className=\"blockquote-footer\">Juan Rulfo</footer>\n              </blockquote>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                window.open(`https://3commas.io/deals/${dealId}`, \"_blank\");\n              }}\n            >\n              Open in 3commas\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./CurrencyIcon.css\";\n\nconst CurrencyIcon = ({ currency, size = 15 }: any) => {\n  const formattedCurrency =\n    currency.length > 5\n      ? currency\n          .replace(\"USDT\", \"\")\n          .replace(\"BUSD\", \"\")\n          .replace(\"-PERP\", \"\")\n          .replace(\"USD\", \"\")\n      : currency;\n\n  return (\n    <div\n      className=\"CurrencyIcon\"\n      style={{\n        width: size,\n        height: size,\n        borderRadius: size,\n        backgroundSize: size,\n        backgroundImage: `url(https://3commas.io/currency/icon/${formattedCurrency.toLowerCase()}.png)`,\n      }}\n    ></div>\n  );\n};\n\nexport default CurrencyIcon;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getFundsLocked } from \"../../../../utils/BotsUtils\";\nimport {\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport {\n  getFundsLockedAndTodaysProfit,\n  getMaxUsageEffect,\n  getReturnsEffect,\n} from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { useNavigate } from \"react-router-dom\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport moment from \"moment\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TV\",\n  buy_or_strong_buy: \"Buy\",\n  strong_buy: \"Strong Buy\",\n  sell_or_strong_sell: \"Sell\",\n  strong_sell: \"Strong Sell\",\n  rsi: \"RSI\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nexport const getBotsStrategyName = (\n  strategiesState: any,\n  botsStrategy: string\n) => {\n  if (botsStrategy in strategyMap) {\n    return strategyMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [statsLoaded, setStatsLoaded] = useState(false);\n\n  const navigate = useNavigate();\n\n  const { deals } = dealsState;\n\n  useEffect(() => {\n    getFundsLockedAndTodaysProfit(\n      botsDispatch,\n      botsState,\n      errorsDispatch,\n      botItem.id\n    ).then(() => {\n      setStatsLoaded(true);\n    });\n  }, [botItem]);\n\n  useEffect(() => {\n    if (statsLoaded) {\n      getMaxUsageEffect(\n        botsDispatch,\n        botsState,\n        errorsDispatch,\n        botItem.id,\n        account\n      ).then();\n    }\n  }, [account, botItem, statsLoaded]);\n\n  useEffect(() => {\n    if (\n      botItem &&\n      !(\"returns\" in botItem) &&\n      \"maxUsage\" in botItem &&\n      is30daysDealsLoaded(dealsState, botItem.id)\n    ) {\n      getReturnsEffect(\n        botsDispatch,\n        botsState,\n        dealsState,\n        errorsDispatch,\n        botItem.id\n      );\n    }\n  }, [deals, botItem]);\n\n  const getReturns = async () => {\n    setDealsLimiter(Math.random());\n    fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botItem.id\n    );\n  };\n\n  const age = differenceInDays(moment(), moment(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy =\n    botItem.strategy_list.length === 1\n      ? getBotsStrategyName(strategiesState, botItem.strategy_list[0].strategy)\n      : \"Combined\";\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet bot={botItem} />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={botItem.returns}\n              getReturns={getReturns}\n              maxUsage={botItem.maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>\n                  <div\n                    style={{\n                      display: \"flex\",\n                    }}\n                  >\n                    {\"market_icon\" in account && (\n                      <div\n                        className=\"BotMarketIcon\"\n                        style={{\n                          backgroundImage: `url(${account.market_icon})`,\n                        }}\n                      ></div>\n                    )}\n                    <a\n                      onClick={(e: any) => {\n                        e.preventDefault();\n                        navigate({\n                          pathname: `/accounts/${account.id}`,\n                          search: window.location.search,\n                        });\n                      }}\n                      href=\"#\"\n                    >\n                      {account.name}\n                    </a>\n                  </div>\n                </td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>{formatter.format(botItem.todayUsdProfit)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(botItem)\n                )}/${formatter.format(botItem.maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n          <div className=\"BotPreviewButtons\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                navigate({\n                  pathname: `/${botItem.id}`,\n                  search: window.location.search,\n                });\n              }}\n            >\n              {`View`}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ bot }: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  const isMulti = bot.type === \"Bot::MultiBot\";\n  return (\n    <div className=\"IconsSetContainer\">\n      <div className=\"BotQuoteIconContainer\">\n        <CurrencyIcon currency={quoteCurrency} size={60} />\n      </div>\n      {isMulti ? (\n        <div className=\"BotBaseIconContainer\">\n          <img src={`/Multicoin_white.png`} alt=\"logo\" className=\"RobotsIcon\" />\n        </div>\n      ) : (\n        <div className=\"BotBaseIconContainer\">\n          <CurrencyIcon currency={baseCurrency} size={60} />\n        </div>\n      )}\n    </div>\n  );\n};\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, getReturns }: any) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const returnsCalculated = returns || returns === 0;\n\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      delay={{ show: 100, hide: 200 }}\n      overlay={<Tooltip>30 days profit / Max usage</Tooltip>}\n    >\n      <div className=\"BotReturnsContainer\">\n        {returnsCalculated && (\n          <div\n            className=\"BotReturnsValue\"\n            style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${formatter.format(returns || 0)}`}\n          </div>\n        )}\n        <div className=\"BotReturnsLabel\">Returns (30d)</div>\n        {!returnsCalculated && (\n          <Button\n            onClick={() => {\n              getReturns();\n            }}\n            variant=\"link\"\n            size=\"sm\"\n            active\n          >\n            Calculate\n          </Button>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  getCurrencyFormat,\n  getFundsLockedInBotCurrency,\n  getMaxUsageInBotCurrency,\n  getReservedFundsInBotCurrency,\n} from \"../../../../utils/BotsUtils\";\nimport { getAverageDealDuration } from \"../../../../utils/DealsUtils\";\nimport { getBotsStrategyName } from \"../../BotsList/BotPreview/BotPreview\";\nimport \"./DCABotDetailsMainInfo.css\";\n\nexport const DCABotDetailsMainInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const { strategiesState } = useContext(StrategiesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { dealsState } = useContext(DealsContext);\n  const { activeDeals } = dealsState;\n\n  const navigate = useNavigate();\n\n  const [fundsLocked, setFundsLocked] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [fundsLockedShare, setFundsLockedShare] = useState(0);\n\n  const [maxUsage, setMaxUsage] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [reservedFunds, setReservedFunds] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n  });\n\n  const botPairs =\n    bot.pairs.length === 1\n      ? bot.pairs[0].split(\"_\").reverse().join(\"/\")\n      : `${bot.pairs.length} pairs`;\n  const botMarket =\n    bot.pairs.length === 1 ? \"\" : `${bot.pairs[0].split(\"_\")[0]} market`;\n\n  const startCondition = bot.strategy_list.map((strategy: any) => (\n    <div key={`${Math.random()}`}>{`${getBotsStrategyName(\n      strategiesState,\n      strategy.strategy\n    )}${\n      strategy.options.type\n        ? `, ${getBotsStrategyName(strategiesState, strategy.options.type)}`\n        : ``\n    }${strategy.options.percent ? `, ${strategy.options.percent}%` : ``}${\n      strategy.options.time ? `, ${strategy.options.time}` : ``\n    }${strategy.options.points ? `, ${strategy.options.points}` : ``}`}</div>\n  ));\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      getMaxUsageInBotCurrency(bot, account).then((mxUsg) => {\n        setMaxUsage(mxUsg);\n      });\n    }\n  }, [bot, account]);\n\n  useEffect(() => {\n    if (bot && bot.id && bot.id in activeDeals) {\n      setReservedFunds(\n        getReservedFundsInBotCurrency(activeDeals[bot.id].list, bot, account)\n      );\n      setFundsLocked(\n        getFundsLockedInBotCurrency(activeDeals[bot.id].list, bot, account)\n      );\n    }\n  }, [activeDeals]);\n\n  useEffect(() => {\n    if (maxUsage.value && fundsLocked.value) {\n      setFundsLockedShare(fundsLocked.value / maxUsage.value);\n    }\n  }, [maxUsage, fundsLocked]);\n\n  const avgDealDuration = getAverageDealDuration(deals);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Account</div>\n        <div className=\"BotInfoTableRow\">\n          <div style={{ display: \"flex\" }}>\n            {\"market_icon\" in account && (\n              <div\n                className=\"BotMarketIcon\"\n                style={{\n                  backgroundImage: `url(${account.market_icon})`,\n                }}\n              ></div>\n            )}\n            <a\n              onClick={(e: any) => {\n                e.preventDefault();\n                navigate({\n                  pathname: `/accounts/${account.id}`,\n                  search: window.location.search,\n                });\n              }}\n              href=\"#\"\n            >\n              {account.name}\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Bot pairs</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{botPairs}</div>\n          <div>{botMarket}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Deal start condition</div>\n        <div className=\"BotInfoTableRow\">{startCondition}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Active deals/Max</div>\n        <div className=\"BotInfoTableRow\">{`${bot.active_deals_count}/${bot.max_active_deals}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Funds used</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{`${getCurrencyFormat(fundsLocked)} ${\n            fundsLocked.currency\n          }`}</div>\n          <div style={{ fontSize: \"10px\" }}>{`${percentFormatter.format(\n            fundsLockedShare\n          )} of max usage`}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max usage</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(maxUsage)} ${\n          maxUsage.currency\n        }`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Reserved funds</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(\n          reservedFunds\n        )} ${maxUsage.currency}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total finished deals</div>\n        <div className=\"BotInfoTableRow\">{deals.length}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Avg deal duration</div>\n        <div className=\"BotInfoTableRow\">{`${avgDealDuration} hrs`}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { getCurrencyFormat, getReturns } from \"../../../../utils/BotsUtils\";\nimport {\n  getAverageDailyProfit,\n  getAverageProfitFromDeal,\n  getAverageTp,\n  getTotalProfitUsd,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsInfo.css\";\n\nexport const DCABotDetailsProfitsInfo = ({\n  account,\n  bot,\n  deals,\n  fromFilter,\n  toFilter,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    signDisplay: \"always\",\n  });\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const [averageTp, setAverageTp] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageProfitFromDeal, setAverageProfitFromDeal] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageDailyProfit, setAverageDailyProfit] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [returns, setReturns] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [totalProfitUsd, setTotalProfitUsd] = useState(0);\n\n  useEffect(() => {\n    setAverageTp(getAverageTp(deals));\n    setAverageProfitFromDeal(getAverageProfitFromDeal(deals));\n    setAverageDailyProfit(\n      getAverageDailyProfit(bot.created_at, deals, fromFilter, toFilter)\n    );\n    if (bot.maxUsage) {\n      setReturns({ value: getReturns(bot.maxUsage, deals), currency: \"%\" });\n    }\n    setTotalProfitUsd(getTotalProfitUsd(deals));\n  }, [deals, bot]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Today's profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            (bot.todayUsdProfit || 0) < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(bot.todayUsdProfit || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            totalProfitUsd < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(totalProfitUsd)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Current uPnL</div>\n        <div\n          className={`BotInfoTableRow ${\n            parseFloat(bot.active_deals_usd_profit) < 0\n              ? \"showRed\"\n              : \"showGreen\"\n          }`}\n        >\n          {formatter.format(parseFloat(bot.active_deals_usd_profit))}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average TP, %</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageTp.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {`${getCurrencyFormat(averageTp)}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average profit from deal</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageProfitFromDeal.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageProfitFromDeal.value || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average daily profit</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageDailyProfit.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageDailyProfit.value)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Returns</div>\n        <div\n          className={`BotInfoTableRow ${\n            returns.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {percentFormatter.format(returns.value)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport {\n  getBaseOrderSize,\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSettingsInfo.css\";\n\nexport const DCABotDetailsSettingsInfo = ({\n  account,\n  bot,\n}: {\n  account: any;\n  bot: IBot;\n}) => {\n  const [baseOrderSize, setBaseOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setBaseOrderSize(getBaseOrderSize(bot, account));\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n    }\n  }, [bot, account]);\n\n  const leverage = bot.leverage_custom_value\n    ? parseInt(bot.leverage_custom_value)\n    : \"\";\n  const leverageType =\n    bot.leverage_type !== \"not_specified\" ? bot.leverage_type : \"\";\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Profit currency</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.profit_currency === \"quote_currency\" ? \"Quote\" : \"Base\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Take profit (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            {`${getCurrencyFormat({\n              value: parseFloat(bot.take_profit),\n              currency: \"%\",\n            })}%`}\n          </div>\n          <div>\n            {bot.take_profit_type === \"total\"\n              ? \"(from total volume)\"\n              : \"(from base volume)\"}\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Trailing</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.trailing_enabled &&\n            `${getCurrencyFormat({\n              value: parseFloat(bot.trailing_deviation),\n              currency: \"%\",\n            })}%`}\n          {!bot.trailing_enabled && \"OFF\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Stop loss (timeout)</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat({\n          value: parseFloat(bot.stop_loss_percentage),\n          currency: \"%\",\n        })}% (${bot.stop_loss_timeout_in_seconds} s)`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Base order size (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            <div>{`${getCurrencyFormat(baseOrderSize)} ${\n              baseOrderSize.currency\n            }${\n              baseOrderSize.additionalCurrency\n                ? ` (${baseOrderSize.additionalCurrency})`\n                : \"\"\n            }`}</div>\n            <div>{`(${bot.start_order_type})`}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Leverage (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{leverage || \"0\"}</div>\n          <div>{leverageType}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max safety trades (active)</div>\n        <div className=\"BotInfoTableRow\">{`${bot.max_safety_orders} (${bot.active_safety_orders_count})`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Price devition to open SO</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: parseFloat(bot.safety_order_step_percentage),\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO size</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat(safetyOrderSize)} ${safetyOrderSize.currency}${\n            safetyOrderSize.additionalCurrency\n              ? ` (${safetyOrderSize.additionalCurrency})`\n              : \"\"\n          }`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO volume scale</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.martingale_volume_coefficient}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO step scale</div>\n        <div className=\"BotInfoTableRow\">{bot.martingale_step_coefficient}</div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { BotInfo, IconsSet } from \"../../BotsList/BotPreview/BotPreview\";\nimport { DCABotDetailsMainInfo } from \"../DCABotDetailsMain/DCABotDetailsMainInfo\";\nimport { DCABotDetailsProfitsInfo } from \"../DCABotDetailsProfits/DCABotDetailsProfitsInfo\";\nimport { DCABotDetailsSettingsInfo } from \"../DCABotDetailsSettings/DCABotDetailsSettingsInfo\";\nimport moment from \"moment\";\nimport \"./DCABotDetailsInfo.css\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\n\nexport const DCABotDetailsInfo = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  setInfoKey,\n  fromFilter,\n  toFilter,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  account: any;\n  infoKey: string;\n  setInfoKey: any;\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const age = differenceInDays(moment(), moment(bot.created_at));\n  return (\n    <div className=\"DCABotDetailsInfo\">\n      <div className=\"DCABotDetailsInfoLogo\">\n        <IconsSet bot={bot}></IconsSet>\n        <BotInfo\n          strategy={bot.strategy}\n          age={age}\n          is_enabled={bot.is_enabled}\n        />\n      </div>\n      <div className=\"DCABotDetailsInfoTable\">\n        <Tabs activeKey={infoKey} onSelect={(k) => setInfoKey(k)}>\n          <Tab eventKey=\"main\" title=\"Main\" tabClassName=\"InfoTab\">\n            <DCABotDetailsMainInfo account={account} bot={bot} deals={deals} />\n          </Tab>\n          <Tab eventKey=\"settings\" title=\"Settings\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSettingsInfo account={account} bot={bot} />\n          </Tab>\n          <Tab eventKey=\"profits\" title=\"Profits\" tabClassName=\"InfoTab\">\n            <DCABotDetailsProfitsInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n              fromFilter={fromFilter}\n              toFilter={toFilter}\n            />\n          </Tab>\n          {/* <Tab eventKey=\"safeties\" title=\"Safeties\" disabled></Tab>\n          <Tab eventKey=\"insights\" title=\"Insights\" disabled></Tab> */}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n","import moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  ProgressBar,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  AccountsContext,\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n} from \"../../../App\";\nimport { IBot } from \"../../../interfaces/Bot\";\nimport { IDeal } from \"../../../interfaces/Deal\";\nimport { fetchBot } from \"../../../state/bots/BotsEffects\";\nimport {\n  fetchAllDealsForBot,\n  getAllActiveDeals,\n} from \"../../../state/deals/DealsEffects\";\nimport {\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n  selectAllDeals,\n  selectAllDealsWithin30Days,\n} from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\nimport \"./DCABotDetails.css\";\nimport { DCABotDetailsCharts } from \"./DCABotDetailsCharts/DCABotDetailsCharts\";\nimport { DCABotDetailsDealsTable } from \"./DCABotDetailsDealsTable/DCABotDetailsDealsTable\";\nimport { DCABotDetailsInfo } from \"./DCABotDetailsInfo/DCABotDetailsInfo\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst statusFilterOptions: any = [\n  { value: \"all\", label: \"All\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"StopLoss\", label: \"StopLoss\" },\n  { value: \"Failed\", label: \"Failed\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Closed at Market Price\", label: \"Closed at Market Price\" },\n  { value: \"Liquidated\", label: \"Liquidated\" },\n  { value: \"Switched\", label: \"Switched\" },\n];\n\nconst filterByStatus = (deals: IDeal[], status: string) => {\n  return status === \"all\"\n    ? deals\n    : deals.filter((deal) => deal.localized_status === status);\n};\n\nconst filterByPair = (deals: IDeal[], pair: string) => {\n  return pair === \"all\" ? deals : deals.filter((deal) => deal.pair === pair);\n};\n\nconst filterFrom = (deals: IDeal[], dateFrom: any) => {\n  return !dateFrom ||\n    moment(\"01-04-2018\", \"MM-DD-YYYY\").isAfter(dateFrom, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateFrom, \"day\") ||\n          moment(deal.closed_at).isAfter(dateFrom)\n      );\n};\n\nconst filterTo = (deals: IDeal[], dateTo: any) => {\n  return !dateTo || moment().isSame(dateTo, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateTo, \"day\") ||\n          moment(deal.closed_at).isBefore(dateTo)\n      );\n};\n\nexport const DCABotDetails = () => {\n  let params = useParams();\n  let navigate = useNavigate();\n\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { activeDeals } = dealsState;\n  const {\n    botsState: { bots },\n  } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n  const [botId, setBotId] = useState(NaN);\n  const previousBotId = usePrevious(botId);\n  const [bot, setBot] = useState<IBot | null>(null);\n  const [botsDeals, setBotsDeals] = useState<IDeal[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(false);\n  const [isAllDataLoading, setIsAllDataLoading] = useState(false);\n  const [account, setAccount] = useState({});\n  const [infoKey, setInfoKey] = useState(\"main\");\n  const [percentLoadedDeals, setPercentLoadedDeals] = useState(0);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dealStateSwitcher, setDealStateSwitcher] = useState(\"finished\");\n  const [pairFilter, setPairFilter] = useState(\"all\");\n  const [pairFilterOptions, setPairFilterOptions] = useState([] as any);\n  const [fromFilter, setFromFilter] = useState(new Date(\"2018-04-02\"));\n  const [toFilter, setToFilter] = useState(new Date());\n\n  const clearFilters = () => {\n    setStatusFilter(\"all\");\n    setPairFilter(\"all\");\n    setFromFilter(new Date(\"2018-04-02\"));\n    setToFilter(new Date());\n  };\n\n  const timeRangeRadios = [\n    { name: \"30 days\", value: \"30d\" },\n    { name: \"All time\", value: \"allTime\" },\n  ];\n\n  const refreshData = () => {\n    setDealsLimiter(Math.random());\n    fetchBot(botsDispatch, botsState, errorsDispatch, botId);\n    fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId, true);\n    getAllActiveDeals(dealsDispatch, errorsDispatch, botId, true);\n  };\n\n  useEffect(() => {\n    if (params.botId) {\n      setBotId(parseInt(params.botId));\n    }\n  }, [params]);\n\n  useEffect(() => {\n    setDealsLimiter(Math.random());\n    if (botId && !previousBotId) {\n      fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId);\n      getAllActiveDeals(dealsDispatch, errorsDispatch, botId);\n    }\n  }, [botId]);\n\n  useEffect(() => {\n    if (bot) {\n      setAccount(accounts[bot.account_id]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    if (botId) {\n      setBot(bots[botId]);\n    }\n  }, [botId, bots]);\n\n  useEffect(() => {\n    if (botId) {\n      if (timeRangeValue === \"30d\") {\n        setIsDataLoading(!is30daysDealsLoaded(dealsState, botId));\n      } else if (timeRangeValue === \"allTime\") {\n        setIsDataLoading(!isAllDealsLoaded(dealsState, botId));\n      }\n      setIsAllDataLoading(!isAllDealsLoaded(dealsState, botId));\n    }\n  }, [dealsState, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      clearFilters();\n      setBotsDeals(deals);\n    }\n  }, [isDataLoading, isAllDataLoading, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      deals = filterByPair(deals, pairFilter);\n      deals = filterByStatus(deals, statusFilter);\n      deals = filterTo(deals, toFilter);\n      deals = filterFrom(deals, fromFilter);\n      setBotsDeals(deals);\n    }\n  }, [pairFilter, statusFilter, fromFilter, toFilter]);\n\n  useEffect(() => {\n    if (\n      botId &&\n      bot &&\n      dealsState.deals[botId] &&\n      dealsState.deals[botId].offset\n    ) {\n      const loadedDeals = dealsState.deals[botId].offset || 0;\n      setPercentLoadedDeals(\n        Math.ceil((loadedDeals * 100) / parseFloat(bot.finished_deals_count))\n      );\n    }\n  }, [dealsState, botId, bot]);\n\n  useEffect(() => {\n    if (bot) {\n      setPairFilterOptions([\n        { value: \"all\", label: \"All\" },\n        ...bot.pairs.map((pair) => ({\n          value: pair,\n          label: pair.split(\"_\").reverse().join(\"/\"),\n        })),\n      ]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    return () => {\n      // reset limiter everytime to stop all the jobs\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  return (\n    <div className=\"DCABotDetails\">\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        className=\"DCABotDetailsGetBackButton\"\n        onClick={() => {\n          navigate(-1);\n        }}\n      >\n        {`< Back to bots list`}\n      </Button>\n      {!isAllDataLoading && (\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            refreshData();\n          }}\n        >\n          {`Refresh data`}\n        </Button>\n      )}\n      {isDataLoading && !percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar now={100} animated className=\"BotDetailsProgressBar\" />\n          </div>\n        </>\n      )}\n      {isDataLoading && !!percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar\n              now={percentLoadedDeals}\n              label={`${percentLoadedDeals}%`}\n              className=\"BotDetailsProgressBar\"\n            />\n          </div>\n        </>\n      )}\n      {!isDataLoading && bot && account && (\n        <>\n          <DCABotDetailsCharts\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          <div className=\"BotDetailsControlsContainer\">\n            <div className=\"BotDetailsControl\">\n              <ButtonGroup>\n                <ToggleButton\n                  id={`radio-finished`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radio-dealStateSwitcher\"\n                  value={\"finished\"}\n                  checked={dealStateSwitcher === \"finished\"}\n                  onChange={(e) => setDealStateSwitcher(e.currentTarget.value)}\n                >\n                  Finished\n                </ToggleButton>\n                <ToggleButton\n                  id={`radio-active`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radio-dealStateSwitcher\"\n                  value={\"active\"}\n                  checked={dealStateSwitcher === \"active\"}\n                  onChange={(e) => setDealStateSwitcher(e.currentTarget.value)}\n                >\n                  Active\n                </ToggleButton>\n              </ButtonGroup>\n            </div>\n            {dealStateSwitcher === \"finished\" && (\n              <>\n                {\" \"}\n                <div className=\"BotDetailsControl\">\n                  <ButtonGroup>\n                    {timeRangeRadios.map((radio, idx) => (\n                      <ToggleButton\n                        key={idx}\n                        id={`radio-${idx}`}\n                        type=\"radio\"\n                        variant=\"outline-primary\"\n                        name=\"radio\"\n                        value={radio.value}\n                        checked={timeRangeValue === radio.value}\n                        onChange={(e) =>\n                          setTimeRangeValue(e.currentTarget.value)\n                        }\n                      >\n                        {radio.name}\n                      </ToggleButton>\n                    ))}\n                  </ButtonGroup>\n                </div>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">Status:</div>\n                  <Select\n                    onChange={(option: any): void => {\n                      setStatusFilter(option.value);\n                    }}\n                    value={\n                      statusFilterOptions.find(\n                        (option: any) => option.value === statusFilter\n                      ) as any\n                    }\n                    className=\"BotDetailsStatusFilter\"\n                    theme={(theme) => ({\n                      ...theme,\n                      colors: {\n                        ...theme.colors,\n                        primary25: \"#00a59a\",\n                        primary: \"#00a59a\",\n                      },\n                    })}\n                    options={statusFilterOptions as any}\n                  />\n                </div>\n                {bot && bot.pairs.length > 1 && (\n                  <div className=\"BotDetailsControl\">\n                    <div className=\"BotDetailsFilterTitle\">Pair:</div>\n                    <Select\n                      onChange={(option: any): void => {\n                        setPairFilter(option.value);\n                      }}\n                      value={\n                        pairFilterOptions.find(\n                          (option: any) => option.value === pairFilter\n                        ) as any\n                      }\n                      className=\"BotDetailsPairFilter\"\n                      options={pairFilterOptions as any}\n                      theme={(theme) => ({\n                        ...theme,\n                        colors: {\n                          ...theme.colors,\n                          primary25: \"#00a59a\",\n                          primary: \"#00a59a\",\n                        },\n                      })}\n                    />\n                  </div>\n                )}\n                {timeRangeValue === \"allTime\" && (\n                  <>\n                    <div className=\"BotDetailsControl\">\n                      <div className=\"BotDetailsFilterTitle\">From:</div>\n                      <DatePicker\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={fromFilter}\n                        onChange={(date) => {\n                          setFromFilter(date as any);\n                        }}\n                        selectsStart\n                        startDate={fromFilter}\n                        endDate={toFilter}\n                        className=\"BotDetailsDateFilter\"\n                        strictParsing\n                      />\n                    </div>\n                    <div className=\"BotDetailsControl\">\n                      <div className=\"BotDetailsFilterTitle\">To:</div>\n                      <DatePicker\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={toFilter}\n                        onChange={(date) => setToFilter(date as any)}\n                        selectsEnd\n                        startDate={fromFilter}\n                        endDate={toFilter}\n                        minDate={fromFilter}\n                        className=\"BotDetailsDateFilter\"\n                        strictParsing\n                      />\n                    </div>\n                  </>\n                )}\n                <div className=\"BotDetailsControl\">\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                      clearFilters();\n                    }}\n                  >\n                    {`Clear filters`}\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n          <div className=\"DCABotInfoGroup\">\n            <div className=\"DCABotName\">{bot.name}</div>\n            <div className=\"DCABotId\">{`(Bot ID: ${bot.id})`}</div>\n            <div className=\"DCABotLinkTo3Commas\">\n              <Button\n                onClick={() => {\n                  window.open(`https://3commas.io/bots/${botId}`, \"_blank\");\n                }}\n                variant=\"link\"\n                size=\"sm\"\n                active\n              >\n                Open in 3Commas\n              </Button>\n            </div>\n          </div>\n          <DCABotDetailsInfo\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            setInfoKey={setInfoKey}\n            fromFilter={fromFilter}\n            toFilter={toFilter}\n          />\n          {dealStateSwitcher === \"finished\" && botsDeals.length > 0 && (\n            <DCABotDetailsDealsTable\n              bot={bot}\n              deals={botsDeals}\n              dealStateSwitcher={dealStateSwitcher}\n            />\n          )}\n          {dealStateSwitcher === \"active\" &&\n            bot.id &&\n            bot.id in activeDeals &&\n            activeDeals[bot.id].list.length > 0 && (\n              <DCABotDetailsDealsTable\n                bot={bot}\n                deals={activeDeals[bot.id].list}\n                dealStateSwitcher={dealStateSwitcher}\n              />\n            )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, BotsContext } from \"../../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\nimport { setBotsFilters } from \"../../../state/bots/BotsActions\";\n\nconst BotsFilters = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    accountsState: { accounts, list },\n  } = useContext(AccountsContext);\n\n  const { filters } = botsState;\n\n  const updateFilter = async (filterItem: any) => {\n    botsDispatch(\n      setBotsFilters({\n        ...botsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...list.map((accountId: any) => ({\n      value: accountId,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${accounts[accountId].market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{accounts[accountId].name}</span>\n        </div>\n      ),\n      label_id: accounts[accountId].name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ account: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filters.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ scope: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filters.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ type: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filters.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ sorting: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filters.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { BotsContext, DealsContext, ErrorsContext } from \"../../../../App\";\nimport { fetchBots } from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport \"./BotsListCharts.css\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  calculateProfitPerDayForListOfBots,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"../../../../utils/DealsUtils\";\nimport { getBotsLeaderboardChartData } from \"../../../../utils/BotsUtils\";\n\nconst BotsListCharts = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { deals } = dealsState;\n  const { list, hasMore, offset, bots } = botsState;\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [dealsLoaded, setDealsLoaded] = useState(false);\n  const [botsLoaded, setBotsLoaded] = useState(false);\n\n  const [numberHandled, setNumberHandled] = useState(0);\n  const [profitsChartData, setProfitsChartData] = useState<any>([[], []]);\n  const [accumulativeProfitsChartData, setAccumulativeProfitsChartData] =\n    useState<any>([[], []]);\n  const [botsLeaderboardChartData, setBotsLeaderboardChartData] = useState<any>(\n    [[], [], []]\n  );\n\n  //first get all bots\n  const getBotsList = async () => {\n    if (hasMore && offset !== 0) {\n      await fetchBots(botsDispatch, botsState, errorsDispatch, false, 100);\n    }\n  };\n\n  useEffect(() => {\n    getBotsList().then(() => {\n      if (!hasMore) {\n        setBotsLoaded(true);\n      }\n    });\n  }, [offset]);\n\n  // get deals\n  const getBoatsDeals = async () => {\n    setDealsLimiter(Math.random());\n\n    for (const botId of list) {\n      if (!is30daysDealsLoaded(dealsState, botId)) {\n        await fetchDealsForBotFor30Days(\n          dealsState,\n          dealsDispatch,\n          errorsDispatch,\n          botId\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (botsLoaded) {\n      getBoatsDeals().then(() => {\n        setDealsLoaded(true);\n      });\n    }\n  }, [botsLoaded]);\n\n  // then calculate data for charts\n  useEffect(() => {\n    if (dealsLoaded) {\n      const profitsObject = calculateProfitPerDayForListOfBots(\n        dealsState,\n        list\n      );\n      setProfitsChartData(getProfitChartData(profitsObject));\n      setAccumulativeProfitsChartData(\n        getAccumulativeProfitChartData(profitsObject)\n      );\n      setBotsLeaderboardChartData(getBotsLeaderboardChartData(botsState));\n    }\n  }, [dealsLoaded, bots]);\n\n  // reset limiter everytime to stop all the jobs\n  useEffect(() => {\n    return () => {\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  // update data for loader\n  useEffect(() => {\n    const botsWithLoadedDeals = list.filter((botId: number) =>\n      is30daysDealsLoaded(dealsState, botId)\n    );\n    setNumberHandled((botsWithLoadedDeals.length / list.length) * 100);\n  }, [deals]);\n\n  return (\n    <div className=\"BotsListCharts\">\n      {!dealsLoaded && (\n        <div className=\"ProgressBar\">\n          {!botsLoaded ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <ProgressBar\n              now={Math.ceil(numberHandled)}\n              label={`${Math.ceil(numberHandled)}%`}\n            />\n          )}\n        </div>\n      )}\n      {dealsLoaded && (\n        <>\n          <div className=\"ChartContainer\">\n            <Line\n              options={\n                AccumulativeChartOptions(\n                  \"Total Accumulative Profit (30 days), $\"\n                ) as any\n              }\n              data={{\n                labels: accumulativeProfitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Accumulative Profit, $\",\n                    data: accumulativeProfitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    fill: { value: 0 },\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={ProfitChartOptions(\"Total Profit (30 days), $\") as any}\n              data={{\n                labels: profitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Profit, $\",\n                    data: profitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={\n                LeaderbordChartOptions(\n                  \"Funds locked/Max usage, $\",\n                  botsLeaderboardChartData[0]\n                ) as any\n              }\n              data={{\n                labels: botsLeaderboardChartData[0],\n                datasets: [\n                  {\n                    label: \"Funds locked, $\",\n                    data: botsLeaderboardChartData[1],\n                    borderColor: \"rgb(255, 99, 132)\",\n                    backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                  },\n                  {\n                    label: \"Max usage, $\",\n                    data: botsLeaderboardChartData[2],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BotsListCharts;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  BotsContext,\n  DealsContext,\n} from \"../../../App\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { fetchBots } from \"../../../state/bots/BotsEffects\";\nimport BotsListCharts from \"./BotsListCharts/BotsListCharts\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\n\nconst haveAllBotsDealsFor30Days = (botsList: any, deals: any) =>\n  botsList.every((botId: any) => botId in deals);\n\nexport const BotsList = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    dealsState: { deals },\n  } = useContext(DealsContext);\n  const { list, hasMore, filters, bots } = botsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [showCharts, setShowCharts] = useState(false);\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const previousFilters = usePrevious(filters);\n\n  useEffect(() => {\n    if (!previousFilters && list.length) {\n      setShowCharts(haveAllBotsDealsFor30Days(list, deals));\n    } else {\n      setShowCharts(false);\n      fetchBots(botsDispatch, botsState, errorsDispatch, true).then();\n    }\n  }, [filters]);\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={list.length}\n      next={async () => {\n        if (list.length) {\n          await fetchBots(botsDispatch, botsState, errorsDispatch, false);\n        }\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      {showCharts ? (\n        <BotsListCharts />\n      ) : (\n        <div className=\"ShowChartsButtonContainer\">\n          <Button\n            className=\"ShowChartsButton\"\n            onClick={() => {\n              setShowCharts(true);\n            }}\n          >\n            Calculate profits\n          </Button>\n        </div>\n      )}\n      <div className=\"BotsList\">\n        {list.map((botId: number) => (\n          <BotPreview\n            botItem={bots[botId]}\n            key={botId}\n            account={accounts[bots[botId].account_id]}\n          />\n        ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React from \"react\";\nimport BotsFilters from \"./BotsFilters/BotsFilters\";\nimport { BotsList } from \"./BotsList/BotsList\";\nimport \"./DCABots.css\";\n\nexport const DCABots = () => (\n  <>\n    <BotsFilters />\n    <BotsList />\n  </>\n);\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { IGridBot } from \"../interfaces/GridBot\";\nimport {\n  differenceInDays,\n  differenceInHours,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\n\nconst cryptoCoins: any = {\n  BTC: \"bitcoin\",\n  ETH: \"ethereum\",\n  BNB: \"binancecoin\",\n  USDT: \"tether\",\n  USDC: \"usd-coin\",\n  XRP: \"ripple\",\n  TRX: \"tron\",\n  BUSD: \"binance-usd\",\n  DOGE: \"dogecoin\",\n};\n\nexport const getInitialInvestment = async (gridBot: IGridBot) => {\n  const startPrice = parseFloat(gridBot.start_price);\n  const quantityPerGrid = parseFloat(gridBot.quantity_per_grid);\n\n  const pureInitialGrids = gridBot.grid_lines\n    .slice()\n    .sort((a: any, b: any) => {\n      return (\n        Math.abs(startPrice - parseFloat(a.price)) -\n        Math.abs(startPrice - parseFloat(b.price))\n      );\n    })\n    .slice();\n\n  pureInitialGrids.shift();\n\n  const baseInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) > startPrice)\n      .map((gridLine: any) => quantityPerGrid)\n  );\n\n  const quoteInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) < startPrice)\n      .map((gridLine: any) => parseFloat(gridLine.price) * quantityPerGrid)\n  );\n\n  const allInQuote = quoteInvestment + baseInvestment * startPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const createdOnDay = moment.utc(gridBot.updated_at);\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins) {\n    const marketData: any = await fetch(\n      `https://api.coingecko.com/api/v3/coins/${\n        cryptoCoins[quoteCurrency]\n      }/history?date=${createdOnDay.format(\"DD-MM-YYYY\")}&localization=false`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * marketData.market_data.current_price.usd;\n  } else {\n    if (moment().utc().diff(createdOnDay, \"days\") < 366) {\n      const marketData: any = await fetch(\n        `https://api.currconv.com/api/v7/convert?apiKey=8ae78b023a9240049d4d56f97c81020a&q=${quoteCurrency}_USD&compact=ultra&date=${createdOnDay.format(\n          \"YYYY-MM-DD\"\n        )}&apiKey=e4dcebf8eb9df2180846`\n      ).then((response: any) => response.json());\n\n      allInUsd =\n        allInQuote *\n        marketData[`${quoteCurrency}_USD`][createdOnDay.format(\"YYYY-MM-DD\")];\n    }\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nexport const getCurrentInvestment = async (gridBot: IGridBot) => {\n  const currentPrice = parseFloat(gridBot.current_price);\n\n  const baseInvestment = parseFloat(gridBot.investment_base_currency);\n\n  const quoteInvestment = parseFloat(gridBot.investment_quote_currency);\n\n  const allInQuote = quoteInvestment + baseInvestment * currentPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins || quoteCurrency === \"EUR\") {\n    const marketData: any = await fetch(\n      `https://api.3commas.io/public/api/ver1/accounts/currency_rates?market_code=binance&pair=USDT_${quoteCurrency}`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * parseFloat(marketData.last);\n  } else {\n    const marketData: any = await fetch(\n      `https://api.3commas.io/public/api/ver1/accounts/currency_rates?market_code=binance&pair=${quoteCurrency}_USDT`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote / parseFloat(marketData.last);\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nconst hoursWithin30Days = 24 * 30;\n\nexport const getProfitAgeInHours = (profit: any) =>\n  differenceInHours(moment(), moment(profit.created_at));\n\nexport const getProfitsWithin30days = (profits: any) =>\n  profits.filter(\n    (profit: any) => getProfitAgeInHours(profit) <= hoursWithin30Days\n  );\n\nexport const getMarketOrderAgeInHours = (marketOrder: any) =>\n  differenceInHours(moment(), moment(marketOrder.created_at));\n\nexport const getMarketOrdersWithin30days = (marketOrders: any) =>\n  marketOrders.grid_lines_orders.filter(\n    (marketOrder: any) =>\n      getMarketOrderAgeInHours(marketOrder) <= hoursWithin30Days\n  );\n\nexport const getObjectOfProfitPerDay = (\n  profits: Array<any>,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const dateStringProfits = (item: any) =>\n    moment(item.created_at).format(\"YYYY-MM-DD\");\n  let resultProfits = _.groupBy(profits, dateStringProfits);\n\n  const dateStringMarketOrders = (item: any) =>\n    moment(item.updated_at).format(\"YYYY-MM-DD\");\n  let resultMarketOrders = _.groupBy(marketOrders, dateStringMarketOrders);\n\n  const objectProfits = _.mapValues(resultProfits, (profits: Array<any>) =>\n    _.sum(profits.map((profit: any) => parseFloat(profit.profit)))\n  );\n\n  const objectMarketOrders = _.mapValues(\n    resultMarketOrders,\n    (marketOrders: Array<any>) =>\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01 *\n      -1\n  );\n\n  return _.mergeWith({}, objectProfits, objectMarketOrders, _.add);\n};\n\nexport const getOneGridBotAccumulativeProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getAccumulativeProfitChartData(botsProfits, difference);\n};\n\nexport const getOneGridBotProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getProfitChartData(botsProfits, difference);\n};\n","import { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\n\ninterface ISetNewGridBotsList {\n  type: \"setNewGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const setNewGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): ISetNewGridBotsList => ({\n  type: \"setNewGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToGridBotsList {\n  type: \"addToGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const addToGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): IAddToGridBotsList => ({\n  type: \"addToGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetGridBotsOffset {\n  type: \"setGridBotsOffset\";\n  payload: number;\n}\n\nexport const setGridBotsOffset = (offset: number): ISetGridBotsOffset => ({\n  type: \"setGridBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetGridBotsFilters {\n  type: \"setGridBotsFilters\";\n  payload: IGridBotFilters;\n}\n\nexport const setGridBotsFilters = (\n  gridBotsFilter: IGridBotFilters\n): ISetGridBotsFilters => ({\n  type: \"setGridBotsFilters\",\n  payload: gridBotsFilter,\n});\n\ninterface ISetGridBot {\n  type: \"setGridBot\";\n  payload: { gridBotId: number; gridBot: IGridBot };\n}\n\nexport const setGridBot = (\n  gridBotId: number,\n  gridBot: IGridBot\n): ISetGridBot => ({\n  type: \"setGridBot\",\n  payload: { gridBotId, gridBot },\n});\n\nexport type GridBotsAction =\n  | ISetNewGridBotsList\n  | ISetHasMore\n  | IAddToGridBotsList\n  | ISetGridBotsOffset\n  | ISetGridBotsFilters\n  | ISetGridBot;\n","import {\n  getGridBot,\n  getGridBots,\n  getGridBotsMarketOrders,\n  getGridBotsProfits,\n} from \"../../utils/ApiUtils\";\nimport {\n  getCurrentInvestment,\n  getInitialInvestment,\n} from \"../../utils/GridBotsUtils\";\nimport {\n  addToGridBotsList,\n  setHasMore,\n  setNewGridBotsList,\n  setGridBot,\n} from \"./GridBotsActions\";\nimport { IGridBotsState } from \"./GridBotsReducer\";\n\nconst spotAccountsTypes = [\n  \"Account::BinanceAccount\",\n  \"Accounts::Ftx\",\n  \"Account::HuobiAccount\",\n  \"Account::OkexAccount\",\n  \"Account::KucoinAccount\",\n  \"Account::GateIoAccount\",\n  \"Account::KrakenAccount\",\n  \"Account::BitfinexAccount\",\n  \"Account::BinanceUsAccount\",\n  \"Account::BitstampAccount\",\n  \"Accounts::GeminiAccount\",\n  \"Account::BittrexAccount\",\n  \"Account::GdaxAccount\",\n  \"Account::PaperTradingAccount\",\n];\n\nexport async function fetchGridBots(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  gridBotsDispatch(setHasMore(true));\n  gridBotsDispatch(setNewGridBotsList([]));\n  const {\n    limit,\n    filters: { sorting, account },\n  } = gridBotsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    let offset = 0;\n    let hasMore = true;\n\n    while (hasMore) {\n      const data: any = await getGridBots(\n        offset,\n        offsetLimit,\n        sorting,\n        account,\n        spotAccountsTypes\n      );\n      if (data.error) {\n        break;\n      }\n      gridBotsDispatch(addToGridBotsList(data));\n      offset = offset + offsetLimit;\n      if (data.length < offsetLimit) {\n        hasMore = false;\n      }\n    }\n    gridBotsDispatch(setHasMore(false));\n  } catch {\n    gridBotsDispatch(setNewGridBotsList([]));\n    gridBotsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching grid bots list\",\n    });\n  }\n}\n\nexport async function fetchGridBot(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  try {\n    const gridBot = await getGridBot(gridBotId);\n    gridBotsDispatch(setGridBot(gridBotId, gridBot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching grid bot ${gridBotId}`,\n    });\n  }\n}\n\nexport async function fetchInitialInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"initialInvestments\" in gridBotItem) ||\n      !gridBotItem.initialInvestments\n    ) {\n      const initialInvestments = await getInitialInvestment(gridBotItem);\n      return initialInvestments;\n    } else {\n      return gridBotItem.initialInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching initial investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchCurrentInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"currentInvestments\" in gridBotItem) ||\n      !gridBotItem.currentInvestments\n    ) {\n      const currentInvestments = await getCurrentInvestment(gridBotItem);\n      return currentInvestments;\n    } else {\n      return gridBotItem.currentInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching current investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchProfits(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"profits\" in gridBotItem) || !gridBotItem.profits) {\n      const profits = await getGridBotsProfits(gridBotId);\n      return profits;\n    } else {\n      return gridBotItem.profits;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching profits for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchMarketOrders(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"marketOrders\" in gridBotItem) || !gridBotItem.marketOrders) {\n      const marketOrders = await getGridBotsMarketOrders(gridBotId);\n      return marketOrders;\n    } else {\n      return gridBotItem.marketOrders;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchGridBotsMetrics(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const initialInvestments = await fetchInitialInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const currentInvestments = await fetchCurrentInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const profits = await fetchProfits(gridBotsState, errorsDispatch, gridBotId);\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    initialInvestments,\n    currentInvestments,\n    profits,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n\nexport async function fetchDetails(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const marketOrders = await fetchMarketOrders(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    marketOrders,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n","import React, { useContext } from \"react\";\nimport { AccountsContext, GridBotsContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\n\nimport \"./GridBotsListTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\n\nconst GridBotsListTable = ({ values, investment, setModalGridBotId }: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n  const { list, gridBots } = gridBotsState;\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account_id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const accountId = accountsList.filter(\n              (accId: any) => accId === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${accounts[accountId].market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{accounts[accountId].name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Price range\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return `${originalRow.upper_price}_${originalRow.lower_price}_${originalRow.grids_quantity} levels`;\n          },\n          id: \"price_range\",\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const range = value.split(\"_\");\n            return (\n              <div>\n                <div\n                  style={{\n                    color: \"#00A59A\",\n                  }}\n                >\n                  {range[0]}\n                </div>\n                <div\n                  style={{\n                    color: \"#EE7D8B\",\n                  }}\n                >\n                  {range[1]}\n                </div>\n                <div\n                  style={{\n                    fontSize: \"12px\",\n                  }}\n                >\n                  {range[2]}\n                </div>\n              </div>\n            );\n          },\n        },\n        {\n          Header: \"Start price\",\n          accessor: \"start_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current price\",\n          accessor: \"current_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Active orders\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const grigLinesNumber = originalRow.grid_lines.length;\n            const sellOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"sell\"\n            ).length;\n            const buyOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"buy\"\n            ).length;\n\n            return (\n              <>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"danger\">\n                    {sellOrdersNumber}\n                  </Badge>\n                </div>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"success\">\n                    {buyOrdersNumber}\n                  </Badge>\n                </div>\n                {sellOrdersNumber + buyOrdersNumber !== grigLinesNumber - 1 && (\n                  <div style={{ marginBottom: \"3px\" }}>\n                    <OverlayTrigger\n                      key=\"right\"\n                      placement=\"right\"\n                      overlay={\n                        <Tooltip id={`tooltip-${originalRow.id}`}>\n                          Bot was unable to place all orders on the exchange.\n                          This may heavily impact your trading results and PnL\n                          reports on this page. Please contact 3commas support\n                          to check the error details.\n                        </Tooltip>\n                      }\n                    >\n                      <Badge style={{ fontSize: \"16px\" }} bg=\"warning\">\n                        {\"\\u26A0\"}\n                      </Badge>\n                    </OverlayTrigger>\n                  </div>\n                )}\n              </>\n            );\n          },\n          id: \"activeOrder\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Initial investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.initialInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.initialInvestments.allInUsd\n                  : originalRow.initialInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"initial_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.currentInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.currentInvestments.allInUsd\n                  : originalRow.currentInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"current_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Investment change\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const invesmentChange =\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.currentInvestments.allInQuote\n                      ? (invesmentChange /\n                          originalRow.currentInvestments.allInQuote) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const invesmentChange =\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: \"USD\",\n                    })} USD`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.currentInvestments.allInUsd\n                      ? (invesmentChange /\n                          originalRow.currentInvestments.allInUsd) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"investment_change\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Bot profit\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (!originalRow.profits) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const profitPercent =\n                (quoteProfit / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: quoteProfit,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const profitPercent =\n                (usdProfit / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: usdProfit,\n                    currency: \"USD\",\n                  })} USD`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"bot_profit\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Total PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.profits ||\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const pnl =\n                quoteProfit +\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const pnl =\n                usdProfit +\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: \"USD\",\n                    })} USD`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"total_PnL\",\n          disableSortBy: true,\n        },\n\n        {\n          Header: \"Stats\",\n          Cell: ({ cell: { value } }: any) => {\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <img className=\"stats\" src={`stats.png`} alt=\"stats\" />\n              </div>\n            );\n          },\n          id: \"stats\",\n          disableSortBy: true,\n        },\n      ] as any,\n    [investment, values]\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((gridBotId: number) => gridBots[gridBotId]),\n    });\n\n  return (\n    <div className=\"GridBotsListTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalGridBotId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default GridBotsListTable;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneGridBotAccumulativeProfitsChartData,\n  getOneGridBotProfitsChartData,\n} from \"../../../../utils/GridBotsUtils\";\nimport \"./GridBotDetailsCharts.css\";\n\nconst GridBotDetailsCharts = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getOneGridBotAccumulativeProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n    setProfitsData(\n      getOneGridBotProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n  }, [profits, marketOrders, tradingFee]);\n\n  return (\n    <div className=\"GridBotDetailsCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, ${quoteCurrency}`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, ${quoteCurrency}`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GridBotDetailsCharts;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotDetailsTable.css\";\n\nconst GridBotDetailsTable = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [profit, setProfit] = useState(0);\n  const [avgProfit, setAvgProfit] = useState(0);\n  const [returns, setReturns] = useState(0);\n  const [running, setRunning] = useState(0);\n\n  useEffect(() => {\n    const summarizedProfits = _.sum(\n      profits.map((profit: any) => parseFloat(profit.profit))\n    );\n    const summarizedMarketOrders =\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01;\n    const realProfit = summarizedProfits - summarizedMarketOrders;\n\n    let period = 1;\n\n    if (timeRangeValue === \"30d\") {\n      period = running > 30 ? 30 : running;\n    } else {\n      period = running;\n    }\n\n    const realAvgProfit = period ? realProfit / period : 0;\n    const quoteInvestment = gridBot.initialInvestments\n      ? gridBot.initialInvestments.allInQuote\n      : 0;\n    const realReturns = quoteInvestment\n      ? (realProfit * 100) / quoteInvestment\n      : 0;\n\n    const start = moment.utc(gridBot.created_at);\n    const end = gridBot.closed_at\n      ? moment.utc(gridBot.closed_at)\n      : moment.utc();\n\n    setProfit(realProfit);\n    setAvgProfit(realAvgProfit);\n    setReturns(realReturns);\n    setRunning(end.diff(start, \"days\"));\n  }, [gridBot, profits, marketOrders, tradingFee, timeRangeValue]);\n\n  return (\n    profits &&\n    marketOrders && (\n      <Table hover>\n        <thead>\n          <tr>\n            <th>Days running</th>\n            <th>Transactions</th>\n            <th>Avg. daily</th>\n            <th>Bot profit</th>\n            <th>Returns</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{running}</td>\n            <td>{profits ? profits.length : \"\"}</td>\n            <td>{`${getCurrencyFormat({\n              value: avgProfit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: profit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: returns,\n              currency: \"USD\",\n            })} %`}</td>\n          </tr>\n        </tbody>\n      </Table>\n    )\n  );\n};\n\nexport default GridBotDetailsTable;\n","import React, { useEffect, useContext, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  FormControl,\n  InputGroup,\n  Modal,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport { fetchDetails } from \"../../../state/gridBots/GridBotsEffects\";\nimport {\n  getMarketOrdersWithin30days,\n  getProfitsWithin30days,\n} from \"../../../utils/GridBotsUtils\";\nimport \"./GridBotDetails.css\";\nimport GridBotDetailsCharts from \"./GridBotDetailsCharts/GridBotDetailsCharts\";\nimport GridBotDetailsTable from \"./GridBotDetailsTable/GridBotDetailsTable\";\n\nconst timeRangeRadios = [\n  { name: \"30 days\", value: \"30d\" },\n  { name: \"All time\", value: \"allTime\" },\n];\n\nconst GridBotDetails = ({ modalIsOpen, setModalIsOpen, gridBotId }: any) => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const [tradingFee, setTradingFee] = useState(0);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n\n  const [marketOrders, setMarketOrders] = useState([]);\n  const [profits, setProfits] = useState([]);\n\n  const [account, setAccount] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const inputTradingFee = (e: any) => {\n    if (e.target.value >= 0 && e.target.value <= 100) {\n      setTradingFee(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && !gridBot.marketOrders) {\n      fetchDetails(\n        gridBotsDispatch,\n        gridBotsState,\n        errorsDispatch,\n        gridBotId\n      ).then();\n    }\n    if (gridBot) {\n      setAccount(accounts[gridBot.account_id]);\n    }\n  }, [gridBot]);\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && gridBot.marketOrders) {\n      if (timeRangeValue === \"30d\") {\n        setMarketOrders(\n          getMarketOrdersWithin30days(gridBot.marketOrders).filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(getProfitsWithin30days(gridBot.profits));\n      } else {\n        setMarketOrders(\n          gridBot.marketOrders.grid_lines_orders.filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(gridBot.profits);\n      }\n    }\n  }, [gridBot, timeRangeValue]);\n\n  return (\n    <>\n      {gridBot && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              {`GridBot: ${gridBot.pair\n                .split(\"_\")\n                .reverse()\n                .join(\"/\")} (ID: ${gridBotId})`}\n              {account && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    marginTop: \"4px\",\n                  }}\n                >\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"BotMarketIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <a\n                    onClick={(e: any) => {\n                      e.preventDefault();\n                      navigate({\n                        pathname: `/accounts/${account.id}`,\n                        search: window.location.search,\n                      });\n                    }}\n                    href=\"#\"\n                  >\n                    {account.name}\n                  </a>\n                </div>\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"GridBotsDetailsFilters\">\n              <div className=\"GridBotListControl\">\n                <div className=\"FilterTitle\">Time range</div>\n                <ButtonGroup>\n                  {timeRangeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio\"\n                      value={radio.value}\n                      checked={timeRangeValue === radio.value}\n                      onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n              <div\n                className=\"GridBotListControl\"\n                style={{ width: \"150px\", marginLeft: \"auto\" }}\n              >\n                <div className=\"FilterTitle\">Trading fee</div>\n                <InputGroup>\n                  <FormControl\n                    onChange={inputTradingFee}\n                    value={tradingFee}\n                    type=\"number\"\n                  />\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup>\n              </div>\n            </div>\n            <GridBotDetailsTable\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n            <GridBotDetailsCharts\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default GridBotDetails;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotListMetrics.css\";\n\nconst GridBotListMetrics = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, gridBots } = gridBotsState;\n\n  const [totalInvestments, setTotalInvestments] = useState(0);\n  const [totalProfits, setTotalProfits] = useState(0);\n  const [totaPnL, setTotalPnL] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!hasMore) {\n      const allHaveInvestments = list.every(\n        (id: any) => gridBots[id].initialInvestments\n      );\n      const allHaveCurrentInvestments = list.every(\n        (id: any) => gridBots[id].currentInvestments\n      );\n      const allHaveProfits = list.every((id: any) => gridBots[id].profits);\n      if (\n        list &&\n        allHaveInvestments &&\n        allHaveProfits &&\n        allHaveCurrentInvestments\n      ) {\n        const calculatedInitialInvestments = _.sum(\n          list.map((id: any) => gridBots[id].initialInvestments.allInUsd)\n        );\n        const calculatedCurrentInvestments = _.sum(\n          list.map((id: any) => gridBots[id].currentInvestments.allInUsd)\n        );\n        const calculatedProfits = _.sum(\n          list.map((id: any) =>\n            _.sum(\n              gridBots[id].profits.map((profit: any) =>\n                parseFloat(profit.usd_profit)\n              )\n            )\n          )\n        );\n\n        setIsLoading(false);\n        setTotalInvestments(calculatedInitialInvestments);\n        setTotalProfits(calculatedProfits);\n        setTotalPnL(\n          calculatedProfits +\n            calculatedCurrentInvestments -\n            calculatedInitialInvestments\n        );\n      }\n    }\n  }, [list, hasMore, gridBots]);\n\n  return !isLoading ? (\n    <div className=\"GridBotListMetrics\">\n      <div className=\"GridBotListMetricsContainer\">\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Investment</div>\n          <div className=\"GridBotListMetricBody\">{`${getCurrencyFormat({\n            value: totalInvestments,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Bot Profits</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totalProfits >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totalProfits,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total PnL</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totaPnL >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totaPnL,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"SpinnerContainer\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default GridBotListMetrics;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport {\n  fetchGridBotsMetrics,\n  fetchGridBots,\n} from \"../../../state/gridBots/GridBotsEffects\";\nimport Select from \"react-select\";\n\nimport \"./GridBotsList.css\";\nimport GridBotsListTable from \"./GridBotsListTable/GridBotsListTable\";\nimport { setGridBotsFilters } from \"../../../state/gridBots/GridBotsActions\";\nimport { isSpotAccount } from \"../../../utils/BotsUtils\";\nimport GridBotDetails from \"../GridBotDetails/GridBotDetails\";\nimport GridBotListMetrics from \"./GridBotListMetrics/GridBotListMetrics\";\n\nexport const investmentRadios = [\n  { name: \"Value\", value: \"value\" },\n  { name: \"Balances\", value: \"balances\" },\n];\nexport const valuesRadios = [\n  { name: \"USD\", value: \"usd\" },\n  { name: \"Quote\", value: \"quote\" },\n];\n\nconst GridBotsList = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, filters } = gridBotsState;\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [investment, setInvestment] = useState(\"value\");\n  const [values, setValues] = useState(\"usd\");\n  const [modalGridBotId, setModalGridBotId] = useState(\"\");\n\n  const updateFilter = async (filterItem: any) => {\n    gridBotsDispatch(\n      setGridBotsFilters({\n        ...gridBotsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const accountsOptions = [\n    { value: \"\", label: \"All spot accounts\", label_id: \"All\" },\n    ...accountsList\n      .filter((accountId: any) =>\n        isSpotAccount(accounts[accountId].market_code)\n      )\n      .map((accountId: any) => ({\n        value: accountId,\n        label: (\n          <div className=\"AccountFilterItem\">\n            <div>\n              <div\n                className=\"AccountMarketIcon\"\n                style={{\n                  backgroundImage: `url(${accounts[accountId].market_icon})`,\n                }}\n              ></div>\n            </div>\n            <span>{accounts[accountId].name}</span>\n          </div>\n        ),\n        label_id: accounts[accountId].name,\n      })),\n  ];\n\n  useEffect(() => {\n    fetchGridBots(gridBotsDispatch, gridBotsState, errorsDispatch).then();\n  }, [filters]);\n\n  useEffect(() => {\n    if (!hasMore) {\n      for (const gridBotId of list) {\n        fetchGridBotsMetrics(\n          gridBotsDispatch,\n          gridBotsState,\n          errorsDispatch,\n          gridBotId\n        ).then();\n      }\n    }\n  }, [hasMore, list]);\n\n  return (\n    <>\n      <GridBotListMetrics />\n      <div className=\"GridBotsFilters\">\n        <div className=\"GridBotsFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            onChange={(option: any) => {\n              updateFilter({ account: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.account\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"GridBotListControl\">\n          <div className=\"FilterTitle\">Investment</div>\n          <ButtonGroup id=\"foo\">\n            {investmentRadios.map((radio, idx) => (\n              <ToggleButton\n                key={radio.value}\n                id={`radio-${radio.value}`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioInvestment\"\n                value={radio.value}\n                checked={investment === radio.value}\n                onChange={(e) => {\n                  setInvestment(e.currentTarget.value);\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {investment === \"value\" && (\n          <div className=\"GridBotListControl\">\n            <div className=\"FilterTitle\">Show values in</div>\n            <ButtonGroup id=\"bar\">\n              {valuesRadios.map((radio, idx) => (\n                <ToggleButton\n                  key={radio.value}\n                  id={`radio-${radio.value}`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radioValues\"\n                  value={radio.value}\n                  checked={values === radio.value}\n                  onChange={(e) => setValues(e.currentTarget.value)}\n                >\n                  {radio.name}\n                </ToggleButton>\n              ))}\n            </ButtonGroup>\n          </div>\n        )}\n      </div>\n      {isNothingFound ? (\n        <div className=\"FallbackContainer\">\n          <p style={{ textAlign: \"center\" }}>\n            <b>No results found =(</b>\n          </p>\n        </div>\n      ) : (\n        <div className=\"GridBotsList\">\n          <GridBotsListTable\n            values={values}\n            investment={investment}\n            setModalGridBotId={setModalGridBotId}\n          />\n          {!!modalGridBotId && (\n            <GridBotDetails\n              modalIsOpen={!!modalGridBotId}\n              setModalIsOpen={setModalGridBotId}\n              gridBotId={modalGridBotId}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GridBotsList;\n","import React from \"react\";\nimport \"./GridBots.css\";\nimport GridBotsList from \"./GridBotsList/GridBotsList\";\n\nconst GridBots = () => (\n  <>\n    {/* <BotsFilters /> */}\n    <GridBotsList />\n  </>\n);\n\nexport default GridBots;\n","import { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\n\ninterface ISetNewSmartTradesList {\n  type: \"setNewSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const setNewSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): ISetNewSmartTradesList => ({\n  type: \"setNewSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToSmartTradesList {\n  type: \"addToSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const addToSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): IAddToSmartTradesList => ({\n  type: \"addToSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetSmartTradesOffset {\n  type: \"setSmartTradesOffset\";\n  payload: number;\n}\n\nexport const setSmartTradesOffset = (\n  offset: number\n): ISetSmartTradesOffset => ({\n  type: \"setSmartTradesOffset\",\n  payload: offset,\n});\n\ninterface ISetSmartTradesFilters {\n  type: \"setSmartTradesFilters\";\n  payload: ISmartTradeFilters;\n}\n\nexport const setSmartTradesFilters = (\n  smartTradesFilter: ISmartTradeFilters\n): ISetSmartTradesFilters => ({\n  type: \"setSmartTradesFilters\",\n  payload: smartTradesFilter,\n});\n\ninterface ISetSmartTrade {\n  type: \"setSmartTrade\";\n  payload: { smartTradeId: number; smartTrade: ISmartTrade };\n}\n\nexport const setSmartTrade = (\n  smartTradeId: number,\n  smartTrade: ISmartTrade\n): ISetSmartTrade => ({\n  type: \"setSmartTrade\",\n  payload: { smartTradeId, smartTrade },\n});\n\nexport type SmartTradesAction =\n  | ISetNewSmartTradesList\n  | ISetHasMore\n  | IAddToSmartTradesList\n  | ISetSmartTradesOffset\n  | ISetSmartTradesFilters\n  | ISetSmartTrade;\n","import { getSmartTrades, getSmartTradeTrades } from \"../../utils/ApiUtils\";\nimport { convertFilterValueToDate } from \"../../utils/GeneralUtils\";\nimport {\n  addToSmartTradesList,\n  setHasMore,\n  setNewSmartTradesList,\n  setSmartTrade,\n} from \"./SmartTradesActions\";\nimport { ISmartTradesState } from \"./SmartTradesReducer\";\n\nexport async function fetchSmartTrades(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  smartTradesDispatch(setHasMore(true));\n  smartTradesDispatch(setNewSmartTradesList([]));\n  const {\n    limit,\n    filters: { sorting, accountId, type, pair, status, from },\n  } = smartTradesState;\n\n  const perPage = customLimit ? customLimit : limit;\n  const fromDate = convertFilterValueToDate(from);\n  try {\n    let hasMore = true;\n    let page = 1;\n\n    while (hasMore) {\n      const data: any = await getSmartTrades(\n        page,\n        perPage,\n        sorting,\n        accountId,\n        type,\n        pair,\n        status,\n        fromDate\n      );\n      if (data.error) {\n        break;\n      }\n      smartTradesDispatch(addToSmartTradesList(data));\n      page = page + 1;\n      if (data.length < perPage) {\n        hasMore = false;\n      }\n    }\n    smartTradesDispatch(setHasMore(false));\n  } catch {\n    smartTradesDispatch(setNewSmartTradesList([]));\n    smartTradesDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching smart trades list\",\n    });\n  }\n}\n\nexport async function fetchTrades(\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n  try {\n    if (!(\"trades\" in smartTradeItem) || !smartTradeItem.trades) {\n      const smartTradeTrades = await getSmartTradeTrades(smartTradeId);\n      return smartTradeTrades;\n    } else {\n      return smartTradeItem.trades;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${smartTradeItem.id}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchDetails(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const trades = await fetchTrades(\n    smartTradesState,\n    errorsDispatch,\n    smartTradeId\n  );\n\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n\n  const smartTrade = {\n    ...smartTradeItem,\n    trades,\n  };\n  await smartTradesDispatch(setSmartTrade(smartTradeId, smartTrade));\n}\n","import React, { useContext } from \"react\";\nimport { Badge, Table } from \"react-bootstrap\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./SmartTradeDetailsStatusTable.css\";\n\nconst SmartTradeDetailsStatusTable = ({ smartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n\n  const { smartTrades } = smartTradesState;\n\n  const smartTrade = smartTrades[smartTradeId];\n\n  return (\n    <div className=\"SmartTradeDetailsStatusTable\">\n      {smartTrade && (\n        <Table striped>\n          <thead>\n            <tr>\n              <th>Average entry</th>\n              <th>Average close</th>\n              <th>Current price</th>\n              <th>PnL, $</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr style={{ fontSize: \"14px\" }}>\n              <td>{`${\n                smartTrade.data.type === \"smart_sell\" ||\n                smartTrade.data.type === \"smart_buy\"\n                  ? smartTrade.position.price.value\n                  : smartTrade.data.average_enter_price\n              }`}</td>\n              <td>{`${\n                smartTrade.data.average_close_price\n                  ? smartTrade.data.average_close_price\n                  : \"\"\n              }`}</td>\n              <td>{`${\n                smartTrade.data.current_price\n                  ? smartTrade.data.current_price.last\n                  : \"\"\n              }`}</td>\n              <td>\n                {smartTrade.profit.usd ? (\n                  <Badge\n                    bg={smartTrade.profit.usd >= 0 ? \"success\" : \"danger\"}\n                    style={{ fontSize: \"13px\" }}\n                  >{`${getCurrencyFormat({\n                    value: smartTrade.profit.usd,\n                    currency: \"USD\",\n                  })}$`}</Badge>\n                ) : (\n                  \"\"\n                )}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradeDetailsStatusTable;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport \"./SmartTradeDetailsTable.css\";\n\nconst SmartTradeDetailsTable = ({ smartTradeId, trades }: any) => {\n  const triggerSignMap: any = {\n    less: \"<\",\n    less_or_equal: \"<=\",\n    greater_or_equal: \">=\",\n    greater: \">\",\n  };\n\n  return (\n    trades && (\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Order</th>\n            <th>Price</th>\n            <th>Amount</th>\n            <th>Total</th>\n            <th>Trigger</th>\n            <th>Trailing</th>\n            <th>Status</th>\n            <th>Created</th>\n            <th>Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n          {trades.map((trade: any) => (\n            <tr style={{ fontSize: \"14px\" }} key={trade.id}>\n              <td>{`${trade.order_type} ${trade.order_side}`}</td>\n              <td>\n                <div>{`Desired: ${\n                  trade.initial_price ? trade.initial_price : \"\"\n                }`}</div>\n                <div>{`Real: ${\n                  trade.realised_price ? trade.realised_price : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`Desired: ${\n                  trade.initial_amount ? trade.initial_amount : \"\"\n                }`}</div>\n                <div>{`Real: ${\n                  trade.realised_amount ? trade.realised_amount : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`Desired: ${\n                  trade.initial_total ? trade.initial_total : \"\"\n                }`}</div>\n                <div>{`Real: ${\n                  trade.realised_total ? trade.realised_total : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`${\n                  trade.trigger_condition\n                    ? triggerSignMap[trade.trigger_condition]\n                    : \"\"\n                } ${trade.trigger_price ? trade.trigger_price : \"\"}`}</div>\n              </td>\n              <td>\n                <div>{`${trade.trail_value ? trade.trail_value : \"\"} ${\n                  trade.trail_percentage ? `(${trade.trail_percentage}%)` : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`${trade.status ? trade.status : \"\"}`}</div>\n              </td>\n              <td>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.created_at).format(\"DD/MM/YYYY\")\n                    : \"\"\n                }`}</div>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.created_at).format(\"HH:mm\")\n                    : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.updated_at).format(\"DD/MM/YYYY\")\n                    : \"\"\n                }`}</div>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.updated_at).format(\"HH:mm\")\n                    : \"\"\n                }`}</div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    )\n  );\n};\n\nexport default SmartTradeDetailsTable;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, Modal, ToggleButton } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  SmartTradesContext,\n} from \"../../../App\";\nimport { fetchDetails } from \"../../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTradeDetails.css\";\nimport SmartTradeDetailsStatusTable from \"./SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable\";\nimport SmartTradeDetailsTable from \"./SmartTradeDetailsTable/SmartTradeDetailsTable\";\n\nconst purposeRadios = [\n  { name: \"Position\", value: \"position\" },\n  { name: \"Take profit\", value: \"take_profit\" },\n  { name: \"Reduce funds\", value: \"reduce_funds\" },\n  { name: \"Stop loss\", value: \"stop_loss\" },\n  { name: \"Panic\", value: \"panic\" },\n  { name: \"All\", value: \"\" },\n];\n\nconst SmartTradeDetails = ({\n  modalIsOpen,\n  setModalIsOpen,\n  smartTradeId,\n}: any) => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { smartTrades } = smartTradesState;\n  const smartTrade = smartTrades[smartTradeId];\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [purpose, setPurpose] = useState(\"\");\n  const [trades, setTrades] = useState([]);\n  const [account, setAccount] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  useEffect(() => {\n    if (smartTradeId) {\n      fetchDetails(\n        smartTradesDispatch,\n        smartTradesState,\n        errorsDispatch,\n        smartTradeId\n      ).then();\n    }\n  }, [smartTradeId]);\n\n  useEffect(() => {\n    if (smartTrade && smartTrade.trades) {\n      setTrades(smartTrade.trades);\n    }\n    if (smartTrade) {\n      setAccount(accounts[smartTrade.account.id]);\n    }\n  }, [smartTrade]);\n\n  useEffect(() => {\n    if (purpose) {\n      setTrades(\n        smartTrade.trades.filter(\n          (trade: any) => trade.trade_purpose === purpose\n        )\n      );\n    } else {\n      if (smartTrade && smartTrade.trades) {\n        setTrades(smartTrade.trades);\n      }\n    }\n  }, [purpose]);\n\n  return (\n    <>\n      {smartTrade && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              {`${smartTrade.pair\n                .split(\"_\")\n                .reverse()\n                .join(\"/\")} (Trade ID: ${smartTradeId})`}\n              {account && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    marginTop: \"4px\",\n                  }}\n                >\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"BotMarketIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <a\n                    onClick={(e: any) => {\n                      e.preventDefault();\n                      navigate({\n                        pathname: `/accounts/${account.id}`,\n                        search: window.location.search,\n                      });\n                    }}\n                    href=\"#\"\n                  >\n                    {account.name}\n                  </a>\n                </div>\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div>\n              <div className=\"SmartTradeDetailsControl\">\n                <SmartTradeDetailsStatusTable smartTradeId={smartTradeId} />\n              </div>\n              <div className=\"SmartTradeDetailsControl\">\n                <ButtonGroup>\n                  {purposeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-position-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio-detail-position\"\n                      value={radio.value}\n                      checked={purpose === radio.value}\n                      onChange={(e) => setPurpose(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n            </div>\n            {trades && (\n              <SmartTradeDetailsTable\n                smartTradeId={smartTradeId}\n                trades={trades}\n              />\n            )}\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradeDetails;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { ISmartTrade } from \"../interfaces/SmartTrade\";\nimport {\n  differenceInDays,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\nimport { convertFilterValueToDate } from \"./GeneralUtils\";\n\nexport const getObjectOfSmartTradesProfitsPerDay = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n  const dateStringProfits = (item: any) =>\n    moment(item.data.closed_at).format(\"YYYY-MM-DD\");\n\n  let resultProfits = _.groupBy(filteredSmartTrades, dateStringProfits);\n\n  return _.mapValues(resultProfits, (smartTrades: Array<any>) =>\n    _.sum(\n      smartTrades.map((smartTrade: any) => parseFloat(smartTrade.profit.usd))\n    )\n  );\n};\n\nexport const getSmartTradesProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\nexport const getSmartTradesAccumulativeProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\n\nexport const getSmartTradesPairsLeaderboardChartData = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n\n  const groupedResultProfits = _.groupBy(filteredSmartTrades, \"pair\");\n\n  const resultProfits = _.mapValues(\n    groupedResultProfits,\n    (groupedSmartTrades: any) =>\n      _.sum(\n        groupedSmartTrades.map((smartTrade: any) =>\n          parseFloat(smartTrade.profit.usd)\n        )\n      )\n  );\n\n  const sortedProfits = _(resultProfits)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n","import React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getSmartTradesAccumulativeProfitsChartData,\n  getSmartTradesPairsLeaderboardChartData,\n  getSmartTradesProfitsChartData,\n} from \"../../../../utils/SmartTradesUtil\";\nimport \"./SmartTradesCharts.css\";\n\ninterface SmartTradesChartsProps {}\n\nconst SmartTradesCharts: FC<SmartTradesChartsProps> = () => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, hasMore, smartTrades, filters } = smartTradesState;\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairProfitsLeaderboardData, setPairProfitsLeaderboardData] =\n    useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: \"USD\",\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getSmartTradesAccumulativeProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setProfitsData(\n      getSmartTradesProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setPairProfitsLeaderboardData(\n      getSmartTradesPairsLeaderboardChartData(\n        list.map((id: any) => smartTrades[id])\n      )\n    );\n  }, [list]);\n\n  return !hasMore ? (\n    <div className=\"SmartTradesCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, $`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, $`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs leaderboard by profit\",\n              pairProfitsLeaderboardData[0]\n            ) as any\n          }\n          data={{\n            labels: pairProfitsLeaderboardData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: pairProfitsLeaderboardData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <div className=\"SmartTradesChartsSpiner\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default SmartTradesCharts;\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, SmartTradesContext } from \"../../../../App\";\nimport Select from \"react-select\";\nimport \"./SmartTradesFilters.css\";\nimport DatePicker from \"react-datepicker\";\nimport { setSmartTradesFilters } from \"../../../../state/smartTrades/SmartTradesActions\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst timeRangeRadios = [\n  { name: \"Today\", value: \"today\" },\n  { name: \"Week\", value: \"week\" },\n  { name: \"Month\", value: \"month\" },\n  { name: \"All time\", value: \"allTime\" },\n  { name: \"Custom\", value: \"custom\" },\n];\n\nconst SmartTradesFilters = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const { filters, hasMore, list } = smartTradesState;\n\n  const updateFilter = async (filterItem: any) => {\n    smartTradesDispatch(\n      setSmartTradesFilters({\n        ...smartTradesState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accountsList.map((accountId: any) => ({\n      value: accountId,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${accounts[accountId].market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{accounts[accountId].name}</span>\n        </div>\n      ),\n      label_id: accounts[accountId].name,\n    })),\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"simple_buy\", label: \"Simple buy\" },\n    { value: \"simple_sell\", label: \"Simple sell\" },\n    { value: \"smart_sell\", label: \"Smart sell\" },\n    { value: \"smart_cover\", label: \"Smart cover\" },\n    { value: \"smart_buy\", label: \"Smart buy\" },\n  ];\n\n  const statusOptions: any = [\n    { value: \"all\", label: \"All\" },\n    { value: \"active\", label: \"Active\" },\n    { value: \"finished\", label: \"Finished\" },\n    { value: \"successfully_finished\", label: \"Successfully finished\" },\n    { value: \"cancelled\", label: \"Cancelled\" },\n    { value: \"failed\", label: \"Failed\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    {\n      value: \"profit_percentage-desc\",\n      label: \"Profit percentage (Highest First)\",\n    },\n    {\n      value: \"profit_percentage-asc\",\n      label: \"Profit percentage (Lowest First)\",\n    },\n    { value: \"created_at-desc\", label: \"Opened (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Opened (Oldest first)\" },\n    { value: \"closed_at-desc\", label: \"Closed (Youngest first)\" },\n    { value: \"closed_at-asc\", label: \"Closed (Oldest first)\" },\n    { value: \"status-desc\", label: \"Status (Highest First)\" },\n    { value: \"status-asc\", label: \"Status (Lowest First)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"smartTradesFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <>\n      <div className=\"SmartTradesFilters\">\n        <div className=\"SmartTradesTimeRangeContainer\">\n          <ButtonGroup>\n            {timeRangeRadios.map((radio, idx) => (\n              <ToggleButton\n                key={idx}\n                id={`radio-${idx}`}\n                type=\"radio\"\n                disabled={hasMore}\n                variant=\"outline-primary\"\n                name=\"radio\"\n                value={radio.value}\n                checked={filters.from.label === radio.value}\n                onChange={(e) => {\n                  updateFilter({\n                    from: { ...filters.from, label: e.currentTarget.value },\n                  });\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {filters.from.label === \"custom\" && (\n          <div className=\"SmartTradesTimeRangeContainer\">\n            <div className=\"FilterTitle\">From</div>\n            <DatePicker\n              dateFormat=\"yyyy-MM-dd\"\n              disabled={hasMore}\n              selected={\n                filters.from.from\n                  ? moment(filters.from.from).toDate()\n                  : moment().toDate()\n              }\n              onChange={(date: any) => {\n                updateFilter({\n                  from: {\n                    label: \"custom\",\n                    from: moment(date).format(\"YYYY-MM-DD\"),\n                  },\n                });\n              }}\n              selectsStart\n              className=\"SmartTradesDateFilter\"\n              strictParsing\n            />\n          </div>\n        )}\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ accountId: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.accountId\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Status</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ status: option.value });\n            }}\n            value={statusOptions.find(\n              (option: any) => option.value === filters.status\n            )}\n            options={statusOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Type</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ type: option.value });\n            }}\n            value={typeOptions.find(\n              (option: any) => option.value === filters.type\n            )}\n            options={typeOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Sort by</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ sorting: option.value });\n            }}\n            value={sortingOptions.find(\n              (option: any) => option.value === filters.sorting\n            )}\n            options={sortingOptions}\n            className=\"Sorting\"\n          />\n        </div>\n      </div>\n      {!hasMore && (\n        <div className=\"SmartTradesFilters\">{`Total: ${list.length}`}</div>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradesFilters;\n","import React, { useContext } from \"react\";\nimport { AccountsContext, SmartTradesContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, Table } from \"react-bootstrap\";\n\nimport \"./SmartTradesTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nconst smartTradeTypes: any = {\n  simple_buy: \"Simple Buy\",\n  simple_sell: \"Simple Sell\",\n  smart_sell: \"Smart Sell\",\n  smart_trade: \"Smart Trade\",\n  smart_cover: \"Smart Cover\",\n  smart_buy: \"Smart Buy\",\n};\n\nconst SmartTradesTable = ({ setModalSmartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, smartTrades } = smartTradesState;\n\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account.id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const accountId = accountsList.filter(\n              (accId: any) => accId === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${accounts[accountId].market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{accounts[accountId].name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Side\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const side = originalRow.position.type === \"buy\" ? \"LONG\" : \"SHORT\";\n            return side;\n          },\n          id: \"side\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Type\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            smartTradeTypes[originalRow.data.type],\n\n          id: \"type\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.status.title,\n\n          id: \"status\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, %\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_percent = parseFloat(originalRow.profit.percent);\n            return pnl_percent ? (\n              <div\n                className={\n                  pnl_percent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                }\n              >{`${getCurrencyFormat({\n                value: pnl_percent,\n                currency: \"USD\",\n              })}%`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_percent\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            const pnl = parseFloat(originalRow.profit.volume);\n            return pnl ? (\n              <div\n                className={pnl >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"}\n              >{`${getCurrencyFormat({\n                value: pnl,\n                currency: quoteCurrency,\n              })} ${quoteCurrency}`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_quote\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, $\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_usd = parseFloat(originalRow.profit.usd);\n            return pnl_usd ? (\n              <Badge\n                bg={pnl_usd >= 0 ? \"success\" : \"danger\"}\n                style={{ fontSize: \"13px\" }}\n              >{`${getCurrencyFormat({\n                value: pnl_usd,\n                currency: \"USD\",\n              })}$`}</Badge>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_usd\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={baseCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.units.value,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={quoteCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.total.value,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                </div>\n              </>\n            );\n          },\n\n          id: \"volume\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Margin and Leverage\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return originalRow.leverage.enabled ? (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <div>{`${getCurrencyFormat({\n                    value: originalRow.margin.total,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  {originalRow.leverage && (\n                    <div>\n                      {`x${Math.floor(originalRow.leverage.value)} ${\n                        originalRow.leverage.type\n                      }`}\n                    </div>\n                  )}\n                </div>\n              </>\n            ) : (\n              \"\"\n            );\n          },\n\n          id: \"margin\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Created at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.created_at);\n            return (\n              <>\n                <div>{date.format(\"DD/MM/YYYY\")}</div>\n                <div>{date.format(\"HH:mm\")}</div>\n              </>\n            );\n          },\n\n          id: \"created_at\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Closed at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.closed_at);\n            return (\n              originalRow.data.closed_at && (\n                <>\n                  <div>{date.format(\"DD/MM/YYYY\")}</div>\n                  <div>{date.format(\"HH:mm\")}</div>\n                </>\n              )\n            );\n          },\n\n          id: \"closed_at\",\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((smartTradeId: number) => smartTrades[smartTradeId]),\n    });\n\n  return (\n    <div className=\"SmartTradesTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalSmartTradeId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default SmartTradesTable;\n","import React, { FC, useContext, useState } from \"react\";\nimport { AccountsContext } from \"../../../App\";\nimport SmartTradeDetails from \"../SmartTradeDetails/SmartTradeDetails\";\nimport SmartTradesCharts from \"./SmartTradesCharts/SmartTradesCharts\";\nimport SmartTradesFilters from \"./SmartTradesFilters/SmartTradesFilters\";\nimport \"./SmartTradesList.css\";\nimport SmartTradesTable from \"./SmartTradesTable/SmartTradesTable\";\n\ninterface SmartTradesListProps {}\n\nconst SmartTradesList: FC<SmartTradesListProps> = () => {\n  const [modalSmartTradeId, setModalSmartTradeId] = useState(\"\");\n\n  return (\n    <div className=\"SmartTradesList\">\n      <SmartTradesCharts />\n      <SmartTradesFilters />\n      <SmartTradesTable setModalSmartTradeId={setModalSmartTradeId} />\n      {!!modalSmartTradeId && (\n        <SmartTradeDetails\n          modalIsOpen={!!modalSmartTradeId}\n          setModalIsOpen={setModalSmartTradeId}\n          smartTradeId={modalSmartTradeId}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradesList;\n","import React, { FC, useContext, useEffect } from \"react\";\nimport { ErrorsContext, SmartTradesContext } from \"../../App\";\nimport { fetchSmartTrades } from \"../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTrades.css\";\nimport SmartTradesList from \"./SmartTradesList/SmartTradesList\";\n\ninterface SmartTradesProps {}\n\nconst SmartTrades: FC<SmartTradesProps> = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { filters } = smartTradesState;\n\n  useEffect(() => {\n    fetchSmartTrades(\n      smartTradesDispatch,\n      smartTradesState,\n      errorsDispatch\n    ).then();\n  }, [filters]);\n\n  return (\n    <div className=\"SmartTrades\">\n      <SmartTradesList />\n    </div>\n  );\n};\n\nexport default SmartTrades;\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport AccountDetails from \"./components/Accounts/AccountDetails/AccountDetails\";\nimport Accounts from \"./components/Accounts/Accounts\";\nimport { DCABotDetails } from \"./components/DCABots/DCABotDetails/DCABotDetails\";\nimport { DCABots } from \"./components/DCABots/DCABots\";\nimport GridBots from \"./components/GridBots/GridBots\";\nimport SmartTrades from \"./components/SmartTrades/SmartTrades\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<DCABots />} />\n        <Route path=\":botId\" element={<DCABotDetails />} />\n        <Route path=\"/gridbots\" element={<GridBots />} />\n        <Route path=\"/smarttrades\" element={<SmartTrades />} />\n        <Route path=\"/accounts\" element={<Accounts />} />\n        <Route path=\"/accounts/:accountId\" element={<AccountDetails />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default Router;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"./Router\";\n\nconst ROUTE_BASENAME = \"/botanstage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <BrowserRouter basename={ROUTE_BASENAME}> */}\n    <BrowserRouter>\n      <Router />\n    </BrowserRouter>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}