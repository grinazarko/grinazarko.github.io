{"version":3,"sources":["components/BotsFilters/BotsFilters.tsx","utils/ApiUtils.tsx","utils/BotsUtils.tsx","components/BotsList/BotPreview/BotPreview.tsx","components/BotsList/BotsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BotsFilters","useContext","FiltersContext","filtersState","filtersDispatch","accounts","AccountsContext","accountsState","accountsOptions","value","label","label_id","map","account","id","className","style","backgroundImage","market_icon","name","scopeOptions","typeOptions","sortingOptions","onChange","option","type","payload","find","options","filterOption","candidate","input","data","includes","scope","sorting","limiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","API_KEY","URLSearchParams","window","location","search","get","SECRET","schedule","fetch","headers","APIKEY","Signature","bot","a","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","split","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","Promise","resolve","then","response","json","marketInfo","last","currencyPriceInUsd","accountId","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getDealAgeInHours","deal","Date","b","closed_at","Math","floor","getTime","getFundsLocked","fundsLocked","getAllDealsWithin30Days","botId","limit","offset","deals","fetchAllDealsWithin30DaysInLoop","newDeals","slice","lastDeal","length","rawDeals","profit30Days","filter","reduce","currDeal","nextDeal","usd_final_profit","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","rsi","manual","ult","ta_preset","cqs_telegram","BotPreview","botItem","useState","profits_in_usd","funds_locked_in_active_deals","today_usd_profit","overall_usd_profit","stats","setStats","useEffect","setMaxUsage","getMaxUsage","mxUsg","NaN","returns","setReturns","age","created_at","formatter","Intl","NumberFormat","strategy_list","botType","marketIcon","is_enabled","Table","striped","size","fontSize","marginBottom","fontWeight","width","active_deals_count","format","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","src","String","alt","BotName","BotInfo","Badge","bg","text","BotReturns","minimumFractionDigits","signDisplay","isNaN","color","Button","onClick","getReturns","variant","active","BotsList","bots","setBots","setOffset","hasMore","setHasMore","getBotsUrl","resetOffset","textAlign","dataLength","next","os","loader","Spinner","animation","endMessage","initialFiltersState","initialAccountsState","accountsReducer","state","action","Error","filtersReducer","createContext","accountsDispatch","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51f0da94.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { FiltersContext, AccountsContext } from \"../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\n\nconst BotsFilters = () => {\n  const { filtersState, filtersDispatch } = useContext(FiltersContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accounts.map((account: any) => ({\n      value: account.id,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div\n            className=\"AccountMarketIcon\"\n            style={{\n              backgroundImage: `url(${account.market_icon})`,\n            }}\n          ></div>\n          {account.name}\n        </div>\n      ),\n      label_id: account.name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setAccount\", payload: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filtersState.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setScope\", payload: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filtersState.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setType\", payload: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filtersState.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setSorting\", payload: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filtersState.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\n\nconst limiter = new Bottleneck({\n  reservoir: 15,\n  reservoirRefreshAmount: 15,\n  reservoirRefreshInterval: 1000,\n});\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (method: string, path: string) => {\n  const API_KEY =\n    new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\n  const SECRET =\n    new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n","import { callApi } from \"./ApiUtils\";\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60 * 24));\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60));\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account.id) {\n    return 0;\n  }\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    return await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response) => response.json())\n      .then((marketInfo) => parseFloat(marketInfo.last));\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nconst isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nconst getDealAgeInHours = (deal: any) =>\n  differenceInHours(new Date(), new Date(deal.closed_at));\n\nexport function getFundsLocked(bot: any, fundsLocked: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? fundsLocked / leverage : fundsLocked;\n}\n\nconst HOURS_IN_30_DAYS = 24 * 30;\n\nconst getAllDealsWithin30Days = async (botId: string) => {\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsWithin30DaysInLoop = async () => {\n    const newDeals = await callApi(\n      \"GET\",\n      `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=finished&order=closed_at`\n    ).then((response) => response.json());\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= HOURS_IN_30_DAYS\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      await fetchAllDealsWithin30DaysInLoop();\n    } else {\n      deals = [...deals, ...newDeals];\n    }\n  };\n\n  await fetchAllDealsWithin30DaysInLoop();\n\n  return deals;\n};\n\nexport async function getReturns(maxUsage: any, botId: any) {\n  if (!maxUsage) {\n    return 0;\n  }\n  const rawDeals = await getAllDealsWithin30Days(botId);\n\n  const profit30Days = rawDeals\n    .filter((deal: any) => getDealAgeInHours(deal) <= HOURS_IN_30_DAYS)\n    .reduce(\n      (currDeal: any, nextDeal: any) => ({\n        usd_final_profit:\n          parseFloat(currDeal.usd_final_profit) +\n          parseFloat(nextDeal.usd_final_profit),\n      }),\n      { usd_final_profit: 0 }\n    )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { callApi } from \"../../../utils/ApiUtils\";\nimport { Table } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport {\n  getFundsLocked,\n  getMaxUsage,\n  getReturns,\n  differenceInDays,\n} from \"../../../utils/BotsUtils\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TradingView Screener\",\n  rsi: \"RSI-3m-20\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const [stats, setStats] = useState({\n    profits_in_usd: {\n      funds_locked_in_active_deals: 0,\n      today_usd_profit: 0,\n      overall_usd_profit: 0,\n    },\n  });\n  useEffect(() => {\n    callApi(\"GET\", `/public/api/ver1/bots/stats?bot_id=${botItem.id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setStats(data);\n      });\n  }, []);\n\n  const [maxUsage, setMaxUsage] = useState(0);\n  useEffect(() => {\n    getMaxUsage(botItem, account).then((mxUsg) => {\n      setMaxUsage(mxUsg);\n    });\n  }, [account, botItem]);\n\n  const [returns, setReturns] = useState(NaN);\n\n  const age = differenceInDays(new Date(), new Date(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  let strategy = botItem.strategy_list[0].strategy;\n\n  if (botItem.strategy_list.length > 1) {\n    strategy = \"Combined\";\n  } else if (strategy in strategyMap) {\n    strategy = strategyMap[strategy];\n  }\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet\n            botType={botItem.type}\n            strategy={botItem.strategy}\n            botId={botItem.id}\n            marketIcon={account.market_icon}\n          />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={returns}\n              setReturns={setReturns}\n              maxUsage={maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>{account.name}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>\n                  {formatter.format(stats.profits_in_usd.today_usd_profit)}\n                </td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(\n                    botItem,\n                    stats.profits_in_usd.funds_locked_in_active_deals\n                  )\n                )}/${formatter.format(maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, setReturns, maxUsage, botId }: any) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n  return (\n    <div className=\"BotReturnsContainer\">\n      {!isNaN(returns) && (\n        <div\n          className=\"BotReturnsValue\"\n          style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n        >\n          {`${formatter.format(returns || 0)}`}\n        </div>\n      )}\n      <div className=\"BotReturnsLabel\">Returns (30d)</div>\n      {isNaN(returns) && (\n        <Button\n          onClick={() => {\n            getReturns(maxUsage, botId).then((returns: any) => {\n              setReturns(returns);\n            });\n          }}\n          variant=\"link\"\n          size=\"sm\"\n          active\n        >\n          Calculate\n        </Button>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { callApi } from \"../../utils/ApiUtils\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport { FiltersContext, AccountsContext } from \"../../App\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport const BotsList = () => {\n  const { filtersState } = useContext(FiltersContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const limit = 10;\n  const [bots, setBots] = useState<Array<any>>([]);\n  const [offset, setOffset] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const getAccountByBotId = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const getBotsUrl = (resetOffset = false) =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${\n      filtersState.sorting.split(\"-\")[0]\n    }&sort_direction=${filtersState.sorting.split(\"-\")[1]}${\n      filtersState.scope ? `&scope=${filtersState.scope}` : \"\"\n    }${filtersState.type ? `&strategy=${filtersState.type}` : \"\"}${\n      filtersState.account ? `&account_id=${filtersState.account}` : \"\"\n    }`;\n\n  const getMore = () => {\n    return callApi(\"GET\", getBotsUrl())\n      .then((response) => response.json())\n      .then((data: Array<any>) => {\n        if (data.length === 0) {\n          setHasMore(false);\n        }\n        setOffset((os) => os + limit);\n        setBots((bots) => [...bots, ...data]);\n      });\n  };\n\n  useEffect(() => {\n    setHasMore(true);\n    callApi(\"GET\", getBotsUrl(true))\n      .then((response) => response.json())\n      .then((data: Array<any>) => {\n        setBots(data);\n        setOffset(limit);\n        if (data.length < limit) {\n          setHasMore(false);\n        }\n      });\n  }, [filtersState]);\n\n  const isNothingFound = !hasMore && offset === 10;\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={bots.length}\n      next={getMore}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      <div className=\"BotsList\">\n        {accounts.length > 0 &&\n          bots.map((bot: any) => (\n            <BotPreview\n              botItem={bot}\n              key={bot.id}\n              account={getAccountByBotId(bot.account_id)}\n            />\n          ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport BotsFilters from \"./components/BotsFilters/BotsFilters\";\nimport { BotsList } from \"./components/BotsList/BotsList\";\nimport { callApi } from \"./utils/ApiUtils\";\n\nconst initialFiltersState = {\n  scope: \"\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nconst initialAccountsState: any = {\n  accounts: [],\n};\n\nfunction accountsReducer(state = initialAccountsState, action: any) {\n  switch (action.type) {\n    case \"setAccounts\":\n      return { accounts: [...state.accounts, ...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction filtersReducer(state = initialFiltersState, action: any) {\n  switch (action.type) {\n    case \"setScope\":\n      return { ...state, scope: action.payload };\n    case \"setAccount\":\n      return { ...state, account: action.payload };\n    case \"setType\":\n      return { ...state, type: action.payload };\n    case \"setSorting\":\n      return { ...state, sorting: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nexport const FiltersContext = createContext({\n  filtersState: initialFiltersState,\n  filtersDispatch: (state: any) => {},\n});\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [filtersState, filtersDispatch] = useReducer(\n    filtersReducer,\n    initialFiltersState\n  );\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n\n  useEffect(() => {\n    callApi(\"GET\", `/public/api/ver1/accounts`)\n      .then((response) => response.json())\n      .then((data) => {\n        accountsDispatch({ type: \"setAccounts\", payload: data });\n      });\n  }, []);\n\n  return (\n    <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n      <FiltersContext.Provider value={{ filtersState, filtersDispatch }}>\n        <div className=\"App\">\n          <BotsFilters />\n          <BotsList />\n        </div>\n      </FiltersContext.Provider>\n    </AccountsContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}