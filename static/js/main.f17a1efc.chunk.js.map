{"version":3,"sources":["components/BotsFilters/BotsFilters.tsx","utils/ApiUtils.tsx","utils/BotsUtils.tsx","components/BotsList/BotPreview/BotPreview.tsx","components/BotsList/BotsList.tsx","components/ErrorsAlerts/ErrorsAlerts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BotsFilters","useContext","FiltersContext","filtersState","filtersDispatch","accounts","AccountsContext","accountsState","accountsOptions","value","label","label_id","map","account","id","className","style","backgroundImage","market_icon","name","scopeOptions","typeOptions","sortingOptions","useEffect","localStorage","setItem","JSON","stringify","onChange","option","type","payload","find","options","filterOption","candidate","input","data","includes","scope","sorting","limiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","API_KEY","URLSearchParams","window","location","search","get","SECRET","schedule","fetch","headers","APIKEY","Signature","getBots","offset","limit","accountId","a","resetOffset","getBotsUrl","split","then","response","json","getAccounts","getStrategies","bot","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","Promise","resolve","marketInfo","last","currencyPriceInUsd","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getDealAgeInHours","deal","Date","b","closed_at","Math","floor","getTime","getFundsLocked","fundsLocked","getAllDealsWithin30Days","botId","deals","fetchAllDealsWithin30DaysInLoop","newDeals","slice","lastDeal","length","getReturns","rawDeals","profit30Days","filter","reduce","currDeal","nextDeal","usd_final_profit","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","BotPreview","botItem","errorsDispatch","ErrorsContext","strategiesState","StrategiesContext","useState","profits_in_usd","funds_locked_in_active_deals","today_usd_profit","overall_usd_profit","stats","setStats","setMaxUsage","getMaxUsage","mxUsg","catch","NaN","returns","setReturns","age","created_at","formatter","Intl","NumberFormat","constantStrategiesMap","botsStrategiesList","botsStrategy","marketsStrategy","strategies","marketStrategy","strategy_key","getBotsStrategyName","strategy_list","botType","marketIcon","is_enabled","Table","striped","size","fontSize","marginBottom","fontWeight","width","active_deals_count","format","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","src","String","alt","BotName","BotInfo","Badge","bg","text","BotReturns","minimumFractionDigits","signDisplay","calculateReturns","isNaN","color","Button","onClick","variant","active","BotsList","bots","setBots","setOffset","hasMore","setHasMore","getMoreBoats","os","textAlign","dataLength","next","loader","Spinner","animation","endMessage","ErrorsAlerts","errors","errorsState","Alert","onClose","dismissible","Heading","error","Link","href","initialFiltersState","botsFiltersInitializer","initialValue","storedState","parse","getItem","initialAccountsState","initialStrategiesState","initialErrorsState","errorsReducer","state","action","Set","add","Array","from","Error","accountsReducer","strategiesReducer","filtersReducer","createContext","accountsDispatch","strategiesDispatch","App","useReducer","getAccountData","getStrategiesData","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f17a1efc.chunk.js","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { FiltersContext, AccountsContext } from \"../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\n\nconst BotsFilters = () => {\n  const { filtersState, filtersDispatch } = useContext(FiltersContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accounts.map((account: any) => ({\n      value: account.id,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${account.market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{account.name}</span>\n        </div>\n      ),\n      label_id: account.name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filtersState));\n    } catch {}\n  }, [filtersState]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setAccount\", payload: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filtersState.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setScope\", payload: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filtersState.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setType\", payload: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filtersState.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            filtersDispatch({ type: \"setSorting\", payload: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filtersState.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\n\nconst limiter = new Bottleneck({\n  reservoir: 15,\n  reservoirRefreshAmount: 15,\n  reservoirRefreshInterval: 1000,\n});\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (method: string, path: string) => {\n  const API_KEY =\n    new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\n  const SECRET =\n    new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n) => {\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sorting.split(\"-\")[0]}&sort_direction=${\n      sorting.split(\"-\")[1]\n    }${scope ? `&scope=${scope}` : \"\"}${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response) => response.json());\n};\n\nexport const getAccounts = async () => {\n  return callApi(\"GET\", `/public/api/ver1/accounts`).then((response) =>\n    response.json()\n  );\n};\nexport const getStrategies = async () => {\n  return callApi(\"GET\", `/public/api/ver1/marketplace/items?&limit=1000`).then(\n    (response) => response.json()\n  );\n};\n","import { callApi } from \"./ApiUtils\";\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60 * 24));\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60));\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account.id) {\n    return 0;\n  }\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    return await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response) => response.json())\n      .then((marketInfo) => parseFloat(marketInfo.last));\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nconst isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nconst getDealAgeInHours = (deal: any) =>\n  differenceInHours(new Date(), new Date(deal.closed_at));\n\nexport function getFundsLocked(bot: any, fundsLocked: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? fundsLocked / leverage : fundsLocked;\n}\n\nconst HOURS_IN_30_DAYS = 24 * 30;\n\nconst getAllDealsWithin30Days = async (botId: string) => {\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsWithin30DaysInLoop = async () => {\n    const newDeals = await callApi(\n      \"GET\",\n      `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=finished&order=closed_at`\n    ).then((response) => response.json());\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= HOURS_IN_30_DAYS\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      await fetchAllDealsWithin30DaysInLoop();\n    } else {\n      deals = [...deals, ...newDeals];\n    }\n  };\n\n  await fetchAllDealsWithin30DaysInLoop();\n\n  return deals;\n};\n\nexport async function getReturns(maxUsage: any, botId: any) {\n  if (!maxUsage) {\n    return 0;\n  }\n  const rawDeals = await getAllDealsWithin30Days(botId);\n\n  const profit30Days = rawDeals\n    .filter((deal: any) => getDealAgeInHours(deal) <= HOURS_IN_30_DAYS)\n    .reduce(\n      (currDeal: any, nextDeal: any) => ({\n        usd_final_profit:\n          parseFloat(currDeal.usd_final_profit) +\n          parseFloat(nextDeal.usd_final_profit),\n      }),\n      { usd_final_profit: 0 }\n    )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { callApi } from \"../../../utils/ApiUtils\";\nimport { Table } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport {\n  getFundsLocked,\n  getMaxUsage,\n  getReturns,\n  differenceInDays,\n} from \"../../../utils/BotsUtils\";\nimport { ErrorsContext, StrategiesContext } from \"../../../App\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TradingView Screener\",\n  rsi: \"RSI-3m-20\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nconst getBotsStrategyName = (\n  strategiesState: any,\n  constantStrategiesMap: any,\n  botsStrategiesList: any\n) => {\n  if (botsStrategiesList.length > 1) {\n    return \"Combined\";\n  }\n\n  const botsStrategy = botsStrategiesList[0].strategy;\n\n  if (botsStrategy in constantStrategiesMap) {\n    return constantStrategiesMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [stats, setStats] = useState({\n    profits_in_usd: {\n      funds_locked_in_active_deals: 0,\n      today_usd_profit: 0,\n      overall_usd_profit: 0,\n    },\n  });\n  useEffect(() => {\n    callApi(\"GET\", `/public/api/ver1/bots/stats?bot_id=${botItem.id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setStats(data);\n      });\n  }, []);\n\n  const [maxUsage, setMaxUsage] = useState(0);\n  useEffect(() => {\n    getMaxUsage(botItem, account)\n      .then((mxUsg) => {\n        setMaxUsage(mxUsg);\n      })\n      .catch(() => {\n        setMaxUsage(0);\n        errorsDispatch({\n          type: \"addError\",\n          payload: `Error when fetching max usage for bot ${botItem.name}`,\n        });\n      });\n  }, [account, botItem]);\n\n  const [returns, setReturns] = useState(NaN);\n\n  const age = differenceInDays(new Date(), new Date(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy = getBotsStrategyName(\n    strategiesState,\n    strategyMap,\n    botItem.strategy_list\n  );\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet\n            botType={botItem.type}\n            strategy={botItem.strategy}\n            botId={botItem.id}\n            marketIcon={account.market_icon}\n          />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={returns}\n              setReturns={setReturns}\n              maxUsage={maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>{account.name}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>\n                  {formatter.format(stats.profits_in_usd.today_usd_profit)}\n                </td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(\n                    botItem,\n                    stats.profits_in_usd.funds_locked_in_active_deals\n                  )\n                )}/${formatter.format(maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, setReturns, maxUsage, botId }: any) => {\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n  const calculateReturns = async () => {\n    try {\n      const returns = await getReturns(maxUsage, botId);\n      setReturns(returns);\n    } catch {\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching returns\",\n      });\n      setReturns(NaN);\n    }\n  };\n\n  return (\n    <div className=\"BotReturnsContainer\">\n      {!isNaN(returns) && (\n        <div\n          className=\"BotReturnsValue\"\n          style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n        >\n          {`${formatter.format(returns || 0)}`}\n        </div>\n      )}\n      <div className=\"BotReturnsLabel\">Returns (30d)</div>\n      {isNaN(returns) && (\n        <Button\n          onClick={() => {\n            calculateReturns();\n          }}\n          variant=\"link\"\n          size=\"sm\"\n          active\n        >\n          Calculate\n        </Button>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { getBots } from \"../../utils/ApiUtils\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport { FiltersContext, AccountsContext, ErrorsContext } from \"../../App\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport const BotsList = () => {\n  const {\n    filtersState: { account, sorting, type, scope },\n  } = useContext(FiltersContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const limit = 10;\n  const [bots, setBots] = useState<Array<any>>([]);\n  const [offset, setOffset] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const getAccountByBotId = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const getMoreBoats = async (resetOffset: boolean = false) => {\n    setHasMore(true);\n    try {\n      const data = await getBots(\n        offset,\n        limit,\n        sorting,\n        scope,\n        type,\n        account,\n        resetOffset\n      );\n\n      if (data.length < limit) {\n        setHasMore(false);\n      }\n      if (resetOffset) {\n        setOffset(limit);\n        setBots(data);\n      } else {\n        setOffset((os) => os + limit);\n        setBots((bots) => [...bots, ...data]);\n      }\n    } catch {\n      setBots([]);\n      setOffset(limit);\n      setHasMore(false);\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching bots list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    getMoreBoats(true);\n  }, [account, sorting, type, scope]);\n\n  const isNothingFound = !hasMore && bots.length === 0;\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={bots.length}\n      next={async () => {\n        await getMoreBoats();\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      <div className=\"BotsList\">\n        {accounts.length > 0 &&\n          bots.map((bot: any) => (\n            <BotPreview\n              botItem={bot}\n              key={bot.id}\n              account={getAccountByBotId(bot.account_id)}\n            />\n          ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via <Alert.Link href=\"#\">Telegram</Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport BotsFilters from \"./components/BotsFilters/BotsFilters\";\nimport { BotsList } from \"./components/BotsList/BotsList\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport { getAccounts, getStrategies } from \"./utils/ApiUtils\";\n\nconst initialFiltersState = {\n  scope: \"\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const botsFiltersInitializer = (initialValue = initialFiltersState) => {\n  let storedState = null;\n  try {\n    storedState = JSON.parse((localStorage as any).getItem(\"botsFiltersState\"));\n  } catch {}\n  return storedState || initialValue;\n};\n\nconst initialAccountsState: any = {\n  accounts: [],\n};\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction accountsReducer(state = initialAccountsState, action: any) {\n  switch (action.type) {\n    case \"setAccounts\":\n      return { accounts: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction filtersReducer(state = initialFiltersState, action: any) {\n  switch (action.type) {\n    case \"setScope\":\n      return { ...state, scope: action.payload };\n    case \"setAccount\":\n      return { ...state, account: action.payload };\n    case \"setType\":\n      return { ...state, type: action.payload };\n    case \"setSorting\":\n      return { ...state, sorting: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nexport const FiltersContext = createContext({\n  filtersState: initialFiltersState,\n  filtersDispatch: (state: any) => {},\n});\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [filtersState, filtersDispatch] = useReducer(\n    filtersReducer,\n    initialFiltersState,\n    botsFiltersInitializer\n  );\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n\n  const getAccountData = async () => {\n    try {\n      const data = await getAccounts();\n      accountsDispatch({ type: \"setAccounts\", payload: data });\n    } catch {\n      accountsDispatch({ type: \"setAccounts\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching accounts list\",\n      });\n    }\n  };\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAccountData();\n    getStrategiesData();\n  }, []);\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <FiltersContext.Provider value={{ filtersState, filtersDispatch }}>\n            <div className=\"App\">\n              <BotsFilters />\n              <BotsList />\n              <ErrorsAlerts />\n            </div>\n          </FiltersContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}