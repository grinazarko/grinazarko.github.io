{"version":3,"sources":["utils/ApiUtils.tsx","utils/BotsUtils.tsx","state/bots/BotsActions.tsx","state/bots/BotsEffects.tsx","components/BotsFilters/BotsFilters.tsx","utils/DealsUtils.tsx","state/deals/DealsActions.tsx","state/deals/DealsEffects.tsx","components/BotsList/BotPreview/BotPreview.tsx","state/deals/DealsSelectors.tsx","utils/ChartsUtils.tsx","components/BotsList/BotsListCharts/BotsListCharts.tsx","components/BotsList/BotsList.tsx","components/ErrorsAlerts/ErrorsAlerts.tsx","state/bots/BotsReducer.tsx","state/deals/DealsReducer.tsx","components/NavBar/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["commonLimiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","DEAL_LIMITER_SETTINGS","id","minTime","maxConcurrent","clearDatastore","timeout","dealsLimiter","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","limiter","API_KEY","URLSearchParams","window","location","search","get","SECRET","schedule","fetch","headers","APIKEY","Signature","getBots","offset","limit","sorting","scope","type","accountId","a","resetOffset","split","sortBy","sortDirection","getBotsUrl","then","response","json","getAccounts","getDeals","botId","order","getStrategies","getBotStats","getMaxUsage","bot","account","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","includes","Promise","resolve","marketInfo","last","currencyPriceInUsd","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","find","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getFundsLocked","fundsLocked","getReturns","deals","reduce","currDeal","nextDeal","usd_final_profit","setNewBotsList","botsList","payload","setHasMore","hasMore","addToBotsList","setBotsOffset","setBot","fetchBots","botsDispatch","botsState","errorsDispatch","customLimit","filters","offsetLimit","data","length","bots","botItem","name","profits_in_usd","today_usd_profit","funds_locked_in_active_deals","todayUsdProfit","dealsState","deals30daysForBot","per30d","returns","BotsFilters","useContext","BotsContext","ErrorsContext","accounts","AccountsContext","accountsState","updateFilter","filterItem","accountsOptions","value","label","label_id","map","className","style","backgroundImage","market_icon","scopeOptions","typeOptions","sortingOptions","useEffect","localStorage","setItem","JSON","stringify","onChange","option","options","filterOption","candidate","input","getDealAgeInHours","deal","Date","b","closed_at","Math","floor","getTime","getAllDealsWithin30DaysForOneBot","fetchAllDealsWithin30DaysInLoop","newDeals","slice","lastDeal","filteredDeals","filter","calculateProfitPerDayForListOfBots","botsIds","currentObj","botsDeals","result","_","groupBy","item","moment","format","mapValues","sum","getObjectOfProfitPerDay","mergeWith","profit1","profit2","getProfit30DaysChartData","profitObject","lastThirtyDays","Array","i","idx","startOf","subtract","date","reverse","profits","day","getDealsListForBotFor30Days","fetchDealsForBotFor30Days","dealsDispatch","message","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","BotPreview","DealsContext","strategiesState","StrategiesContext","useState","statsLoaded","setStatsLoaded","getFundsLockedAndTodaysProfit","getMaxUsageEffect","getReturnsEffect","age","created_at","formatter","Intl","NumberFormat","constantStrategiesMap","botsStrategiesList","botsStrategy","marketsStrategy","strategies","marketStrategy","strategy_key","getBotsStrategyName","strategy_list","botType","marketIcon","is_enabled","Table","striped","size","fontSize","marginBottom","fontWeight","width","active_deals_count","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","src","String","alt","BotName","BotInfo","Badge","bg","text","BotReturns","minimumFractionDigits","signDisplay","returnsCalculated","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","color","Button","onClick","variant","active","isBots30daysDealsLoaded","state","ProfitChartOptions","scales","x","time","unit","tooltipFormat","ticks","source","y","beginAtZero","responsive","plugins","legend","display","title","tooltip","intersect","mode","AccumulativeChartOptions","lineTension","gridLines","offsetGridLines","filler","propagate","drawTime","BotsListCharts","list","dealsLoaded","setDealsLoaded","botsLoaded","setBotsLoaded","numberHandled","setNumberHandled","profitsChartData","setProfitsChartData","accumulativeProfitsChartData","setAccumulativeProfitsChartData","botsLeaderboardChartData","setBotsLeaderboardChartData","getBotsList","labels","getBoatsDeals","limiterId","random","profitsObject","currentvalue","accProfits","profit","acc","getAccumulativeProfit30DaysChartData","sortedAndSelected10FirstBots","round","Number","EPSILON","getBotsLeaderboardChartData","stop","dropWaitingJobs","disconnect","botsWithLoadedDeals","ProgressBar","now","ceil","animated","datasets","borderColor","backgroundColor","fill","indexAxis","stacked","callback","BotsList","showCharts","setShowCharts","isNothingFound","textAlign","dataLength","next","loader","Spinner","animation","endMessage","ErrorsAlerts","errors","errorsState","Alert","onClose","dismissible","Heading","error","Link","open","botsStateInitializer","initialValue","initialBotsState","storedFilters","parse","getItem","botsReducer","action","newList","newBots","keyBy","Error","initialDealsState","dealsReducer","NavBar","Nav","activeKey","Item","eventKey","disabled","ChartJS","register","CategoryScale","PointElement","LinearScale","BarElement","Title","LineElement","Legend","TimeScale","Filler","initialAccountsState","initialStrategiesState","initialErrorsState","errorsReducer","Set","add","from","accountsReducer","strategiesReducer","createContext","accountsDispatch","strategiesDispatch","App","useReducer","getAccountData","getStrategiesData","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8103975e.chunk.js","sourcesContent":["import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\nimport { IBotApi } from \"../interfaces/Bot\";\nimport { IDealApi } from \"../interfaces/Deal\";\n\nconst commonLimiter = new Bottleneck({\n  reservoir: 13,\n  reservoirRefreshAmount: 13,\n  reservoirRefreshInterval: 1000,\n});\n\nexport const DEAL_LIMITER_SETTINGS = {\n  id: \"DEAL_LIMITER\",\n  reservoir: 0,\n  reservoirRefreshAmount: 1,\n  reservoirRefreshInterval: 1000,\n  minTime: 1000,\n  maxConcurrent: 1,\n  clearDatastore: true,\n  timeout: 2000,\n};\n\n//we need that hack for stopping loading heavy deals request\nexport let dealsLimiter = new Bottleneck(DEAL_LIMITER_SETTINGS);\n\nexport function setDealsLimiter(limiterId: any) {\n  dealsLimiter = new Bottleneck({ ...DEAL_LIMITER_SETTINGS, id: limiterId });\n}\n\nexport function getDealsLimiter() {\n  return dealsLimiter;\n}\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (\n  method: string,\n  path: string,\n  limiter: any = commonLimiter\n) => {\n  const API_KEY =\n    new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\n  const SECRET =\n    new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n): Promise<Array<IBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      scope ? `&scope=${scope}` : \"\"\n    }${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getAccounts = async () => {\n  return callApi(\"GET\", `/public/api/ver1/accounts`).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getDeals = async (\n  botId: number,\n  offset: number,\n  limit: number,\n  scope: string,\n  order: string\n): Promise<Array<IDealApi>> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=${scope}&order=${order}`,\n    dealsLimiter\n  ).then((response: any) => response.json());\n};\n\nexport const getStrategies = async () => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/marketplace/items?&limit=1000`\n  ).then((response: any) => response.json());\n};\n\nexport const getBotStats = async (botId: number) => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/bots/stats?bot_id=${botId}`\n  ).then((response: any) => response.json());\n};\n","import _ from \"lodash\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\nimport { callApi } from \"./ApiUtils\";\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60 * 24));\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account || !account.id) {\n    return 0;\n  }\n\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    return await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nconst isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nexport function getFundsLocked(bot: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? bot.fundsLocked / leverage : bot.fundsLocked;\n}\n\nexport function getReturns(maxUsage: any, deals: any) {\n  if (maxUsage === 0) {\n    return 0;\n  }\n  const profit30Days = deals.reduce(\n    (currDeal: any, nextDeal: any) => ({\n      usd_final_profit:\n        parseFloat(currDeal.usd_final_profit) +\n        parseFloat(nextDeal.usd_final_profit),\n    }),\n    { usd_final_profit: 0 }\n  )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n\nexport function getBotsLeaderboardChartData(botsState: IBotsState) {\n  const bots = botsState.list.map((botId: number) => {\n    const bot = botsState.bots[botId];\n    return {\n      maxUsage: bot.maxUsage || 0,\n      name: bot.name,\n      fundsLocked: getFundsLocked(bot),\n    };\n  });\n  const sortedAndSelected10FirstBots = _.sortBy(bots, [\n    \"maxUsage\",\n    \"fundsLocked\",\n  ])\n    .reverse()\n    .slice(0, 10);\n  return [\n    sortedAndSelected10FirstBots.map((bot) => bot.name),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.fundsLocked + Number.EPSILON) * 100) / 100\n    ),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.maxUsage + Number.EPSILON) * 100) / 100\n    ),\n  ];\n}\n","import { IBot, IBotFilters } from \"../../interfaces/Bot\";\n\ninterface ISetNewBotsList {\n  type: \"setNewBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const setNewBotsList = (botsList: Array<IBot>): ISetNewBotsList => ({\n  type: \"setNewBotsList\",\n  payload: botsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToBotsList {\n  type: \"addToBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const addToBotsList = (botsList: Array<IBot>): IAddToBotsList => ({\n  type: \"addToBotsList\",\n  payload: botsList,\n});\n\ninterface ISetBotsOffset {\n  type: \"setBotsOffset\";\n  payload: number;\n}\n\nexport const setBotsOffset = (offset: number): ISetBotsOffset => ({\n  type: \"setBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetBotsFilters {\n  type: \"setBotsFilters\";\n  payload: IBotFilters;\n}\n\nexport const setBotsFilters = (botsFilter: IBotFilters): ISetBotsFilters => ({\n  type: \"setBotsFilters\",\n  payload: botsFilter,\n});\n\ninterface ISetBot {\n  type: \"setBot\";\n  payload: { botId: number; bot: IBot };\n}\n\nexport const setBot = (botId: number, bot: IBot): ISetBot => ({\n  type: \"setBot\",\n  payload: { botId, bot },\n});\n\nexport type BotsAction =\n  | ISetNewBotsList\n  | ISetHasMore\n  | IAddToBotsList\n  | ISetBotsOffset\n  | ISetBotsFilters\n  | ISetBot;\n","import { getBots, getBotStats } from \"../../utils/ApiUtils\";\nimport { getMaxUsage, getReturns } from \"../../utils/BotsUtils\";\nimport { IDealsState } from \"../deals/DealsReducer\";\nimport {\n  addToBotsList,\n  setBotsOffset,\n  setHasMore,\n  setNewBotsList,\n  setBot,\n} from \"./BotsActions\";\nimport { IBotsState } from \"./BotsReducer\";\n\nexport async function fetchBots(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  resetOffset: boolean = false,\n  customLimit?: number\n) {\n  botsDispatch(setHasMore(true));\n  const {\n    offset,\n    limit,\n    filters: { sorting, scope, type, account },\n  } = botsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    const data = await getBots(\n      offset,\n      offsetLimit,\n      sorting,\n      scope,\n      type,\n      account,\n      resetOffset\n    );\n    if (resetOffset) {\n      botsDispatch(setBotsOffset(offsetLimit));\n      botsDispatch(setNewBotsList(data));\n    } else {\n      botsDispatch(setBotsOffset(offset + offsetLimit));\n      botsDispatch(addToBotsList(data));\n    }\n    if (data.length < offsetLimit) {\n      botsDispatch(setHasMore(false));\n    }\n  } catch {\n    botsDispatch(setNewBotsList([]));\n    botsDispatch(setBotsOffset(offsetLimit));\n    botsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching bots list\",\n    });\n  }\n}\n\nexport async function getMaxUsageEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number,\n  account: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"maxUsage\" in bots[botId])) {\n      const maxUsage = await getMaxUsage(botItem, account);\n      const bot = { ...botItem, maxUsage };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = { ...botItem, maxUsage: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching max usage for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getFundsLockedAndTodaysProfit(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"fundsLocked\" in bots[botId])) {\n      const {\n        profits_in_usd: { today_usd_profit, funds_locked_in_active_deals },\n      } = await getBotStats(botId);\n\n      const bot = {\n        ...botItem,\n        fundsLocked: funds_locked_in_active_deals,\n        todayUsdProfit: today_usd_profit,\n      };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = {\n      ...botItem,\n      fundsLocked: 0,\n      todayUsdProfit: 0,\n    };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching stats for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getReturnsEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  dealsState: IDealsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    const deals30daysForBot = dealsState.deals[botId].per30d;\n    const maxUsage = botItem.maxUsage;\n    const bot = {\n      ...botItem,\n      returns: getReturns(maxUsage, deals30daysForBot),\n    };\n    botsDispatch(setBot(botItem.id, bot));\n  } catch {\n    const bot = { ...botItem, returns: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when getting returns for bot ${botItem.name}`,\n    });\n  }\n}\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, BotsContext, ErrorsContext } from \"../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\nimport { fetchBots } from \"../../state/bots/BotsEffects\";\nimport { setBotsFilters } from \"../../state/bots/BotsActions\";\n\nconst BotsFilters = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const { filters } = botsState;\n\n  const updateFilter = async (filterItem: any) => {\n    botsDispatch(\n      setBotsFilters({\n        ...botsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accounts.map((account: any) => ({\n      value: account.id,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${account.market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{account.name}</span>\n        </div>\n      ),\n      label_id: account.name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filters));\n    } catch {}\n    fetchBots(botsDispatch, botsState, errorsDispatch, true).then();\n  }, [filters]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ account: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filters.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ scope: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filters.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ type: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filters.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ sorting: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filters.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import { getDeals } from \"./ApiUtils\";\nimport moment from \"moment\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport _ from \"lodash\";\nimport { IDealsState } from \"../state/deals/DealsReducer\";\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.floor((a.getTime() - b.getTime()) / (1000 * 60 * 60));\n\nconst HOURS_IN_30_DAYS = 24 * 30;\n\nconst getDealAgeInHours = (deal: any) =>\n  differenceInHours(new Date(), new Date(deal.closed_at));\n\nexport const getAllDealsWithin30DaysForOneBot = async (botId: number) => {\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsWithin30DaysInLoop = async () => {\n    const newDeals = await getDeals(\n      botId,\n      offset,\n      limit,\n      \"finished\",\n      \"closed_at\"\n    );\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= HOURS_IN_30_DAYS\n    ) {\n      const filteredDeals = newDeals.filter(\n        (deal: any) => getDealAgeInHours(deal) <= HOURS_IN_30_DAYS\n      );\n      offset = offset + limit;\n      deals = [...deals, ...filteredDeals];\n      await fetchAllDealsWithin30DaysInLoop();\n    } else {\n      deals = [...deals, ...newDeals];\n    }\n  };\n\n  await fetchAllDealsWithin30DaysInLoop();\n\n  return deals;\n};\n\nexport const getObjectOfProfitPerDay = (deals: Array<IDeal>) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  let result = _.groupBy(deals, dateString);\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const calculateProfitPerDayForListOfBots = (\n  dealsState: IDealsState,\n  botsIds: Array<number>\n) => {\n  return botsIds.reduce((currentObj: any, botId: number) => {\n    const botsDeals = getObjectOfProfitPerDay(dealsState.deals[botId].per30d);\n\n    return _.mergeWith(\n      botsDeals,\n      currentObj,\n      (profit1: number, profit2: number) => {\n        profit1 = profit1 || 0;\n        profit2 = profit2 || 0;\n        return profit1 + profit2;\n      }\n    );\n  }, {});\n};\n\nconst getLastThirtyDays = () =>\n  [...new Array(30)]\n    .map((i, idx) => moment().startOf(\"day\").subtract(idx, \"days\"))\n    .map((date: any) => date.format(\"YYYY-MM-DD\"))\n    .reverse();\n\nexport const getProfit30DaysChartData = (profitObject: any) => {\n  const lastThirtyDays = getLastThirtyDays();\n\n  const profits = lastThirtyDays.map((day: string) => {\n    return day in profitObject ? profitObject[day] : 0;\n  });\n\n  const labels = lastThirtyDays.map((day: any) => moment(day, \"YYYY-MM-DD\"));\n  return [labels, profits];\n};\n\nexport const getAccumulativeProfit30DaysChartData = (profitObject: any) => {\n  const profits = getProfit30DaysChartData(profitObject);\n  let currentvalue = 0;\n  const accProfits = profits[1].map((profit: any) => {\n    const acc = currentvalue + profit;\n    currentvalue = acc;\n    return acc;\n  });\n  return [profits[0], accProfits];\n};\n","import { IDeal } from \"../../interfaces/Deal\";\n\ninterface IGetDealsListForBotFor30Days {\n  type: \"getDealsListForBotFor30Days\";\n  payload: { deals: Array<IDeal>; botId: number };\n}\n\nexport const getDealsListForBotFor30Days = (\n  deals: Array<IDeal>,\n  botId: number\n): IGetDealsListForBotFor30Days => ({\n  type: \"getDealsListForBotFor30Days\",\n  payload: { deals, botId },\n});\n\nexport type DealsAction = IGetDealsListForBotFor30Days;\n","import { getAllDealsWithin30DaysForOneBot } from \"../../utils/DealsUtils\";\nimport { getDealsListForBotFor30Days } from \"./DealsActions\";\nimport { IDealsState } from \"./DealsReducer\";\n\nexport async function fetchDealsForBotFor30Days(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { deals } = dealsState;\n  try {\n    if (botId in deals && \"per30d\" in deals[botId]) {\n      return;\n    }\n    const data = await getAllDealsWithin30DaysForOneBot(botId);\n    dealsDispatch(getDealsListForBotFor30Days(data, botId));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getFundsLocked, differenceInDays } from \"../../../utils/BotsUtils\";\nimport {\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../App\";\nimport {\n  getFundsLockedAndTodaysProfit,\n  getMaxUsageEffect,\n  getReturnsEffect,\n} from \"../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../state/deals/DealsEffects\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TradingView Screener\",\n  rsi: \"RSI\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nconst getBotsStrategyName = (\n  strategiesState: any,\n  constantStrategiesMap: any,\n  botsStrategiesList: any\n) => {\n  if (botsStrategiesList.length > 1) {\n    return \"Combined\";\n  }\n\n  const botsStrategy = botsStrategiesList[0].strategy;\n\n  if (botsStrategy in constantStrategiesMap) {\n    return constantStrategiesMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [statsLoaded, setStatsLoaded] = useState(false);\n  // const [returns, setReturns] = useState(NaN);\n\n  const { deals } = dealsState;\n\n  useEffect(() => {\n    getFundsLockedAndTodaysProfit(\n      botsDispatch,\n      botsState,\n      errorsDispatch,\n      botItem.id\n    ).then(() => {\n      setStatsLoaded(true);\n    });\n  }, [botItem]);\n\n  useEffect(() => {\n    if (statsLoaded) {\n      getMaxUsageEffect(\n        botsDispatch,\n        botsState,\n        errorsDispatch,\n        botItem.id,\n        account\n      ).then();\n    }\n  }, [account, botItem, statsLoaded]);\n\n  useEffect(() => {\n    if (\n      botItem &&\n      !(\"returns\" in botItem) &&\n      \"maxUsage\" in botItem &&\n      botItem.id in deals &&\n      \"per30d\" in deals[botItem.id]\n    ) {\n      getReturnsEffect(\n        botsDispatch,\n        botsState,\n        dealsState,\n        errorsDispatch,\n        botItem.id\n      );\n    }\n  }, [deals, botItem]);\n\n  const getReturns = async () => {\n    fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botItem.id\n    );\n  };\n\n  const age = differenceInDays(new Date(), new Date(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy = getBotsStrategyName(\n    strategiesState,\n    strategyMap,\n    botItem.strategy_list\n  );\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet\n            botType={botItem.type}\n            strategy={botItem.strategy}\n            botId={botItem.id}\n            marketIcon={account.market_icon}\n          />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={botItem.returns}\n              getReturns={getReturns}\n              maxUsage={botItem.maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>{account.name}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>{formatter.format(botItem.todayUsdProfit)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(botItem)\n                )}/${formatter.format(botItem.maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, getReturns }: any) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const returnsCalculated = returns || returns === 0;\n\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      delay={{ show: 100, hide: 200 }}\n      overlay={<Tooltip>30 days profit / Max usage</Tooltip>}\n    >\n      <div className=\"BotReturnsContainer\">\n        {returnsCalculated && (\n          <div\n            className=\"BotReturnsValue\"\n            style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${formatter.format(returns || 0)}`}\n          </div>\n        )}\n        <div className=\"BotReturnsLabel\">Returns (30d)</div>\n        {!returnsCalculated && (\n          <Button\n            onClick={() => {\n              getReturns();\n            }}\n            variant=\"link\"\n            size=\"sm\"\n            active\n          >\n            Calculate\n          </Button>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n};\n","import { IDealsState } from \"./DealsReducer\";\n\nexport const isBots30daysDealsLoaded = (state: IDealsState, botId: number) => {\n  return (\n    botId in state.deals && state.deals[botId] && \"per30d\" in state.deals[botId]\n  );\n};\n","export const ProfitChartOptions = {\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text: \"Total Profit (30 days), $\",\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n};\n\nexport const AccumulativeChartOptions = {\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text: \"Total Accumulative Profit (30 days), $\",\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n};\n\nexport const MaxUsageManyBotsChartOptions = (labels: any) => ({\n  indexAxis: \"y\" as const,\n  scales: {\n    x: {\n      stacked: false,\n      beginAtZero: true,\n    },\n    y: {\n      stacked: true,\n      beginAtZero: true,\n      ticks: {\n        callback: (value: any) => {\n          return labels[value].length > 35\n            ? labels[value].slice(0, 33) + \"...\"\n            : labels[value];\n        },\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text: \"Funds locked/Max usage, $\",\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"y\",\n    },\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { BotsContext, DealsContext, ErrorsContext } from \"../../../App\";\nimport { fetchBots } from \"../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../state/deals/DealsEffects\";\nimport { isBots30daysDealsLoaded } from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport \"./BotsListCharts.css\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport {\n  AccumulativeChartOptions,\n  MaxUsageManyBotsChartOptions,\n  ProfitChartOptions,\n} from \"../../../utils/ChartsUtils\";\nimport {\n  calculateProfitPerDayForListOfBots,\n  getAccumulativeProfit30DaysChartData,\n  getProfit30DaysChartData,\n} from \"../../../utils/DealsUtils\";\nimport { getBotsLeaderboardChartData } from \"../../../utils/BotsUtils\";\n\nconst BotsListCharts = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { deals } = dealsState;\n  const { list, hasMore, offset, bots } = botsState;\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [dealsLoaded, setDealsLoaded] = useState(false);\n  const [botsLoaded, setBotsLoaded] = useState(false);\n\n  const [numberHandled, setNumberHandled] = useState(0);\n  const [profitsChartData, setProfitsChartData] = useState<any>([[], []]);\n  const [accumulativeProfitsChartData, setAccumulativeProfitsChartData] =\n    useState<any>([[], []]);\n  const [botsLeaderboardChartData, setBotsLeaderboardChartData] = useState<any>(\n    [[], [], []]\n  );\n\n  //first get all bots\n  const getBotsList = async () => {\n    if (hasMore && offset !== 0) {\n      await fetchBots(botsDispatch, botsState, errorsDispatch, false, 100);\n    }\n  };\n\n  useEffect(() => {\n    getBotsList().then(() => {\n      if (!hasMore) {\n        setBotsLoaded(true);\n      }\n    });\n  }, [offset]);\n\n  // get deals\n  const getBoatsDeals = async () => {\n    setDealsLimiter(Math.random());\n\n    for (const botId of list) {\n      if (!isBots30daysDealsLoaded(dealsState, botId)) {\n        await fetchDealsForBotFor30Days(\n          dealsState,\n          dealsDispatch,\n          errorsDispatch,\n          botId\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (botsLoaded) {\n      getBoatsDeals().then(() => {\n        setDealsLoaded(true);\n      });\n    }\n  }, [botsLoaded]);\n\n  // then calculate data for charts\n  useEffect(() => {\n    if (dealsLoaded) {\n      const profitsObject = calculateProfitPerDayForListOfBots(\n        dealsState,\n        list\n      );\n      setProfitsChartData(getProfit30DaysChartData(profitsObject));\n      setAccumulativeProfitsChartData(\n        getAccumulativeProfit30DaysChartData(profitsObject)\n      );\n      setBotsLeaderboardChartData(getBotsLeaderboardChartData(botsState));\n    }\n  }, [dealsLoaded, bots]);\n\n  // reset limiter everytime to stop all the jobs\n  useEffect(() => {\n    return () => {\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  // update data for loader\n  useEffect(() => {\n    const botsWithLoadedDeals = list.filter((botId: number) =>\n      isBots30daysDealsLoaded(dealsState, botId)\n    );\n    setNumberHandled((botsWithLoadedDeals.length / list.length) * 100);\n  }, [deals]);\n\n  return (\n    <div className=\"BotsListCharts\">\n      {!dealsLoaded && (\n        <div className=\"ProgressBar\">\n          {!botsLoaded ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <ProgressBar\n              now={Math.ceil(numberHandled)}\n              label={`${Math.ceil(numberHandled)}%`}\n            />\n          )}\n        </div>\n      )}\n      {dealsLoaded && (\n        <>\n          <div className=\"ChartContainer\">\n            <Line\n              options={AccumulativeChartOptions as any}\n              data={{\n                labels: accumulativeProfitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Accumulative Profit, $\",\n                    data: accumulativeProfitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    fill: { value: 0 },\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={ProfitChartOptions as any}\n              data={{\n                labels: profitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Profit, $\",\n                    data: profitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={\n                MaxUsageManyBotsChartOptions(botsLeaderboardChartData[0]) as any\n              }\n              data={{\n                labels: botsLeaderboardChartData[0],\n                datasets: [\n                  {\n                    label: \"Funds locked, $\",\n                    data: botsLeaderboardChartData[1],\n                    borderColor: \"rgb(255, 99, 132)\",\n                    backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                  },\n                  {\n                    label: \"Max usage, $\",\n                    data: botsLeaderboardChartData[2],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BotsListCharts;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport { AccountsContext, ErrorsContext, BotsContext } from \"../../App\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { fetchBots } from \"../../state/bots/BotsEffects\";\nimport BotsListCharts from \"./BotsListCharts/BotsListCharts\";\n\nexport const BotsList = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { list, hasMore, filters, bots } = botsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [showCharts, setShowCharts] = useState(false);\n\n  const getAccountByBotId = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  useEffect(() => {\n    setShowCharts(false);\n  }, [filters]);\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={list.length}\n      next={async () => {\n        await fetchBots(botsDispatch, botsState, errorsDispatch, false);\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      {showCharts ? (\n        <BotsListCharts />\n      ) : (\n        <div className=\"ShowChartsButtonContainer\">\n          <Button\n            className=\"ShowChartsButton\"\n            onClick={() => {\n              setShowCharts(true);\n            }}\n          >\n            Click to load charts\n          </Button>\n          <div className=\"ShowChartsDisclamer\">\n            Be careful, it can take a while if there are many bots in the list!\n          </div>\n        </div>\n      )}\n      <div className=\"BotsList\">\n        {accounts.length > 0 &&\n          list.map((botId: number) => (\n            <BotPreview\n              botItem={bots[botId]}\n              key={botId}\n              account={getAccountByBotId(bots[botId].account_id)}\n            />\n          ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via{\" \"}\n          <Alert.Link\n            onClick={() => {\n              window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n            }}\n          >\n            Telegram\n          </Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import _ from \"lodash\";\nimport { IBot, IBotFilters } from \"../../interfaces/Bot\";\nimport { BotsAction } from \"./BotsActions\";\n\nexport interface IBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IBotFilters;\n  limit: number;\n  bots: { [key: number]: IBot };\n}\n\nexport const botsStateInitializer = (\n  initialValue = initialBotsState\n): IBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"botsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  scope: \"enabled\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 10,\n  offset: 0,\n  filters: initialFiltersState,\n  bots: {},\n};\n\nexport function botsReducer(\n  state: IBotsState = initialBotsState,\n  action: BotsAction\n): IBotsState {\n  switch (action.type) {\n    case \"setNewBotsList\":\n      const newList = action.payload.map((bot) => bot.id);\n      const newBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, bots: newBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToBotsList\":\n      const list = action.payload.map((bot) => bot.id);\n      const bots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        bots: { ...state.bots, ...bots },\n      };\n    case \"setBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setBot\":\n      return {\n        ...state,\n        bots: { ...state.bots, [action.payload.botId]: action.payload.bot },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { DealsAction } from \"./DealsActions\";\nimport { IDeal } from \"../../interfaces/Deal\";\n\nexport interface IDealsState {\n  deals: { [key: string]: { wholeTime: Array<IDeal>; per30d: Array<IDeal> } };\n}\n\nexport const initialDealsState: IDealsState = {\n  deals: {},\n};\n\nexport function dealsReducer(\n  state: IDealsState = initialDealsState,\n  action: DealsAction\n): IDealsState {\n  switch (action.type) {\n    case \"getDealsListForBotFor30Days\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            per30d: action.payload.deals,\n          },\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport \"./NavBar.css\";\n\nexport const NavBar = () => {\n  return (\n    <div className=\"NavBar\">\n      <div className=\"NavBarContainer\">\n        <div className=\"LogoContainer\">\n          <img className=\"Logo\" src={`BotAn__icon.png`} alt=\"logo\" />\n        </div>\n        <div className=\"Navigation\">\n          <Nav activeKey=\"/\">\n            <Nav.Item>\n              <Nav.Link>DCA Bots</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"link-1\" disabled>\n                Grid Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"link-2\" disabled>\n                Smart Trades\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>\n                Accounts\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </div>\n\n        <div\n          className=\"CommunityLink\"\n          onClick={() => {\n            window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n          }}\n        >\n          <span className=\"SupportLabel\">Support</span>\n          <img className=\"TelegramIcon\" src={`image 8.png`} alt=\"logo\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport BotsFilters from \"./components/BotsFilters/BotsFilters\";\nimport { BotsList } from \"./components/BotsList/BotsList\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport {\n  botsReducer,\n  botsStateInitializer,\n  initialBotsState,\n} from \"./state/bots/BotsReducer\";\nimport { dealsReducer, initialDealsState } from \"./state/deals/DealsReducer\";\nimport { getAccounts, getStrategies } from \"./utils/ApiUtils\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\n\nChartJS.register(\n  CategoryScale,\n  PointElement,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  Legend,\n  TimeScale,\n  Filler\n);\n\nconst initialAccountsState: any = {\n  accounts: [],\n};\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction accountsReducer(state = initialAccountsState, action: any) {\n  switch (action.type) {\n    case \"setAccounts\":\n      return { accounts: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nexport const BotsContext = createContext({\n  botsState: initialBotsState,\n  botsDispatch: (state: any) => {},\n});\nexport const DealsContext = createContext({\n  dealsState: initialDealsState,\n  dealsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [botsState, botsDispatch] = useReducer(\n    botsReducer,\n    initialBotsState,\n    botsStateInitializer\n  );\n\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n  const [dealsState, dealsDispatch] = useReducer(\n    dealsReducer,\n    initialDealsState\n  );\n\n  const getAccountData = async () => {\n    try {\n      const data = await getAccounts();\n      accountsDispatch({ type: \"setAccounts\", payload: data });\n    } catch {\n      accountsDispatch({ type: \"setAccounts\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching accounts list\",\n      });\n    }\n  };\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAccountData();\n    getStrategiesData();\n  }, []);\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <BotsContext.Provider value={{ botsState, botsDispatch }}>\n            <DealsContext.Provider value={{ dealsState, dealsDispatch }}>\n              <div className=\"App\">\n                <NavBar />\n                <BotsFilters />\n                <BotsList />\n                <ErrorsAlerts />\n              </div>\n            </DealsContext.Provider>\n          </BotsContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}