{"version":3,"sources":["reportWebVitals.ts","components/ErrorsAlerts/ErrorsAlerts.tsx","state/bots/BotsReducer.tsx","state/deals/DealsReducer.tsx","utils/ApiUtils.tsx","components/NavBar/NavBar.tsx","state/gridBots/GridBotsReducer.tsx","state/smartTrades/SmartTradesReducer.tsx","state/accounts/AccountsReducer.tsx","state/accounts/AccountsActions.tsx","state/accounts/AccountsEffects.tsx","App.tsx","utils/GeneralUtils.tsx","utils/BotsUtils.tsx","components/Accounts/AccountsList/AccountPreview/AccountPreview.tsx","utils/ChartsUtils.tsx","components/Accounts/AccountDetails/AccountDetails.tsx","components/Accounts/AccountsList/AccountsList.tsx","components/Accounts/AccountsSummaryPreview/AccountsSummaryPreview.tsx","components/Accounts/Accounts.tsx","utils/DealsUtils.tsx","state/deals/DealsSelectors.tsx","state/bots/BotsActions.tsx","state/bots/BotsEffects.tsx","state/deals/DealsActions.tsx","state/deals/DealsEffects.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsSafety/DCABotDetailsSafetyCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsCharts/DCABotDetailsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsDealsTable/DCABotDetailsDealsTable.tsx","components/CommonComponents/CurrencyIcon/CurrencyIcon.tsx","components/DCABots/BotsList/BotPreview/BotPreview.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsSettings/DCABotDetailsSettingsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsSafety/DCABotDetailsSafetyInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsInfo/DCABotDetailsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetails.tsx","components/DCABots/BotsFilters/BotsFilters.tsx","components/DCABots/BotsList/BotsListCharts/BotsListCharts.tsx","components/DCABots/BotsList/BotsList.tsx","components/DCABots/DCABots.tsx","utils/GridBotsUtils.tsx","state/gridBots/GridBotsActions.tsx","state/gridBots/GridBotsEffects.tsx","components/GridBots/GridBotsList/GridBotsListTable/GridBotsListTable.tsx","components/GridBots/GridBotDetails/GridBotDetailsCharts/GridBotDetailsCharts.tsx","components/GridBots/GridBotDetails/GridBotDetailsTable/GridBotDetailsTable.tsx","components/GridBots/GridBotDetails/GridBotDetails.tsx","components/GridBots/GridBotsList/GridBotListMetrics/GridBotListMetrics.tsx","components/GridBots/GridBotsList/GridBotsList.tsx","components/GridBots/GridBots.tsx","state/smartTrades/SmartTradesActions.tsx","state/smartTrades/SmartTradesEffects.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsTable/SmartTradeDetailsTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetails.tsx","utils/SmartTradesUtil.tsx","components/SmartTrades/SmartTradesList/SmartTradesCharts/SmartTradesCharts.tsx","components/SmartTrades/SmartTradesList/SmartTradesFilters/SmartTradesFilters.tsx","components/SmartTrades/SmartTradesList/SmartTradesTable/SmartTradesTable.tsx","components/SmartTrades/SmartTradesList/SmartTradesList.tsx","components/SmartTrades/SmartTrades.tsx","Router.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorsAlerts","useContext","ErrorsContext","errors","errorsState","errorsDispatch","className","length","Alert","variant","onClose","type","dismissible","Heading","map","error","Link","onClick","window","open","botsStateInitializer","initialValue","initialBotsState","storedFilters","JSON","parse","localStorage","getItem","filters","list","hasMore","limit","offset","scope","account","sorting","bots","botsReducer","state","action","newList","payload","bot","id","newBots","_","keyBy","botId","Error","initialDealsState","deals","activeDeals","dealsReducer","period","periodInDays","newDeals","omit","commonLimiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","DEAL_LIMITER_SETTINGS","minTime","maxConcurrent","clearDatastore","timeout","API_KEY","URLSearchParams","location","search","get","SECRET","dealsLimiter","setDealsLimiter","limiterId","getDealsLimiter","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","limiter","schedule","fetch","headers","APIKEY","Signature","getBots","accountId","a","resetOffset","split","sortBy","sortDirection","getBotsUrl","response","json","getGridBots","accountTypes","accountTypesParams","accountType","join","getSmartTrades","page","perPage","pair","status","from","getSmartTradesUrl","getSmartTradeTrades","smartTradeId","getBot","getGridBotsProfits","gridBotId","getGridBotsMarketOrders","getDeal","dealId","getAccounts","getAccount","getAccountTableData","getAccountPieChartData","getAccountActiveTradingEntities","getAccountBalanceChartData","dateFrom","getDeals","order","getStrategies","getBotStats","NavBar","useState","activeKey","setActiveKey","navigate","useNavigate","useLocation","useEffect","pathname","src","alt","Nav","Item","active","gridBotsStateInitializer","initialGridBotsState","gridBots","gridBotsReducer","gridBot","newGridBots","smartTradesStateInitializer","initialSmartTradesState","label","to","smartTrades","smartTradesReducer","smartTrade","newSmartTrades","initialAccountsState","accounts","accountTableData","accountPieChartData","accountActiveTradingEntities","accountsReducer","newAccounts","setNewAccountsList","accountsList","setHasMore","addToAccountsList","setAccount","setAccountTableData","setAccountPieChartData","setAccountActiveTradingEntities","accountsDispatch","accountsState","customLimit","data","fetchAccount","fetchAccountTableData","fetchAccountPieChartData","ChartJS","register","CategoryScale","PointElement","LinearScale","BarElement","Title","Tooltip","LineElement","Legend","TimeScale","Filler","ArcElement","initialStrategiesState","strategies","initialErrorsState","errorsReducer","Set","add","Array","strategiesReducer","AccountsContext","createContext","StrategiesContext","strategiesState","strategiesDispatch","BotsContext","botsState","botsDispatch","GridBotsContext","gridBotsState","gridBotsDispatch","SmartTradesContext","smartTradesState","smartTradesDispatch","DealsContext","dealsState","dealsDispatch","App","useReducer","getStrategiesData","fetchAccounts","Provider","value","Spinner","animation","usePrevious","ref","useRef","current","convertFilterValueToDate","filterFrom","dateFormat","filterValue","moment","subtract","format","getCurrencyValueInUsd","market_code","currency","valueInCurrency","includes","Promise","resolve","marketInfo","parseFloat","last","responseUsdt","responseUsd","responseUsdBack","responseUsdtBack","NaN","getMaxUsage","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","find","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getFundsLocked","fundsLocked","getSafetyOrderSize","additionalCurrency","safety_order_volume_type","getCurrencyFormat","signDisplay","Intl","NumberFormat","maximumFractionDigits","maxUsageInUsd","currencyPriceInUsd","getReturns","reduce","currDeal","nextDeal","usd_final_profit","marketTypes","spot","margin","futures","AccountIcons","accountPieChart","supported_market_types","style","backgroundImage","market_icon","AccountPieChart","labels","dataItem","code","datasets","y","backgroundColor","str","hash","i","charCodeAt","colour","substr","stringToColour","borderWidth","options","plugins","legend","display","tooltip","callbacks","tooltipItem","currentValue","dataset","dataIndex","bodyFont","size","AccountInfo","created_at","updated_at","api_key_invalid","AccountPreview","setAccountPieChart","accountActiveTrading","setAccountActiveTrading","fetchAccountActiveTradingEntities","flexGrow","marginLeft","name","Table","fontSize","fontWeight","usd_amount","day_profit_usd","btc_amount","day_profit_btc","marginTop","active_bots_count","active_deals_count","active_smart_trades_count","active_grid_bots_count","Button","ProfitChartOptions","text","tooltipCustomVaueFormat","scales","x","time","unit","tooltipFormat","ticks","source","beginAtZero","responsive","title","intersect","mode","AccumulativeChartOptions","lineTension","gridLines","offsetGridLines","filler","propagate","drawTime","TimeLineChartOptions","maintainAspectRatio","LeaderbordChartOptions","indexAxis","autoSkip","stacked","callback","slice","DealsCountBarChartOptions","isWeekUnit","stepSize","AccountBalancesTable","accountTable","accountFilteredTable","setAccountFilteredTable","accountFilter","setAccountFilter","hideSmallBalances","setHideSmallBalances","balancesCurrency","setBalancesCurrency","orderBy","filter","tableData","toUpperCase","usd_value","percentage","FormControl","onChange","e","target","width","marginRight","FormCheck","checked","ButtonGroup","ToggleButton","currentTarget","row","currency_name","current_price","day_change_percent_usd","day_change_percent_btc","position","btc_value","AccountDetails","setAccountId","setAccountTable","accountHistoryData","setAccountHistoryData","accountMode","setAccountMode","historyCurrency","setHistoryCurrency","toDate","historyDate","setHistoryDate","params","useParams","result","selected","date","selectsStart","strictParsing","usd_profit","usd_profit_percentage","total_usd_profit","btc_profit","btc_profit_percentage","total_btc_profit","parsed","historyData","unix","usd","btc","borderColor","AccountsList","AccountsSummaryPreview","summary","setSummary","summaryPieChart","setSummaryPieChart","summaryTableData","setSummaryTableData","asset","Accounts","differenceInHours","b","Math","ceil","diff","differenceInDays","getDealAgeInHours","deal","closed_at","getAllDealsForOneBot","daysWithin","ofsetCallback","hoursWithin","fetchAllDealsInLoop","lastDeal","filteredDeals","getObjectOfProfitPerDay","groupBy","item","mapValues","sum","getObjectOfSOPerPair","mean","completed_safety_orders_count","getLastNDays","n","idx","startOf","reverse","getProfitChartData","profitObject","nDays","lastDays","profits","day","getAccumulativeProfitChartData","currentvalue","accProfits","profit","acc","getOneBotProfitsChartData","botsDeals","difference","getOneBotCurrencyLeaderbord","profitsByPair","getObjectOfProfitPerPair","sortedProfits","toPairs","getOneBotSOLeaderbord","dir","values","INFINITY_IN_DAYS","is30daysDealsLoaded","isAllDealsLoaded","selectAllDealsWithin30Days","selectAllDeals","filterAllSuccessfulDeals","setNewBotsList","botsList","addToBotsList","setBotsOffset","setBot","fetchBots","offsetLimit","botItem","profits_in_usd","today_usd_profit","funds_locked_in_active_deals","todayUsdProfit","deals30daysForBot","returns","getDealsList","getActiveDealsList","setOffset","resetDeals","resetActiveDeals","fetchDealsForBotFor30Days","message","fetchAllDealsForBot","reset","getAllActiveDeals","DCABotDetailsMainCharts","xLabel","yLabel","dateLabelsDays","timeRangeValue","setFilteredDeals","countsValues","setCountsValues","dealsDurationHistogramData","setDealsDurationHistogramData","dealsStatusData","countsObj","countBy","localized_status","keys","key","dealsStatusesCounts","dates","delsGrouped","getDealsCountPerDay","dealDurations","start","end","getDealsDurationHistogramData","aspectRatio","total","previousValue","floor","legendItem","index","barPercentage","DCABotDetailsProfitsCharts","accumulativeProfitsData","setAccumulativeProfitsData","profitsData","setProfitsData","pairsLeaderbordData","setPairsLeaderbordData","getOneBotAccumulativeProfitsChartData","fill","DCABotDetailsSafetyCharts","dealsSOHistogramData","setDealsSOHistogramData","antiPairsLeaderbordData","setAntiPairsLeaderbordData","dealSO","getDealsSOHistogramData","suggestedMin","DCABotDetailsCharts","infoKey","setDateLabelsDays","oldestDealAgeInDaysSinceOpened","pop","badgeVariant","Cancelled","StopLoss","Failed","Completed","Liquidated","Switched","DCABotDetailsDealsTable","dealStateSwitcher","columns","React","useMemo","Header","accessor","disableSortBy","originalRow","rowIndex","Cell","cell","Badge","bg","Date","sortType","utc","duration","days","asDays","daysFormatted","hours","hoursFormatted","minutes","minutesFormatted","bought_average_price","sold_average_price","amount","bought_amount","sold_amount","volume","bought_volume","sold_volume","completed_manual_safety_orders_count","Number","original","actual_usd_profit","numberValue","color","useTable","disableSortRemove","autoResetPage","autoResetSortBy","initialState","pageSize","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","pageCount","gotoPage","nextPage","previousPage","pageIndex","modalIsOpen","setModalIsOpen","selectedDeal","setSelectedDeal","striped","bordered","hover","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","cursor","isSorted","isSortedDesc","getRowProps","cells","getCellProps","TablePagination","range","renderPaginationNumberItem","Pagination","renderPaginationBeginning","First","Prev","renderPaginationEnd","Next","Last","DealModal","setDeal","dl","Modal","show","onHide","scrollable","closeButton","Body","bot_events","event","Footer","CurrencyIcon","formattedCurrency","replace","height","borderRadius","backgroundSize","toLowerCase","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","buy_or_strong_buy","strong_buy","sell_or_strong_sell","strong_sell","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","getBotsStrategyName","botsStrategy","marketsStrategy","marketStrategy","strategy_key","BotPreview","statsLoaded","setStatsLoaded","getFundsLockedAndTodaysProfit","getMaxUsageEffect","getReturnsEffect","random","age","formatter","strategy_list","is_enabled","marginBottom","preventDefault","href","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","isMulti","BotName","BotInfo","BotReturns","minimumFractionDigits","returnsCalculated","OverlayTrigger","placement","delay","hide","overlay","DCABotDetailsMainInfo","setFundsLocked","fundsLockedShare","setFundsLockedShare","avgDealDuration","setAvgDealDuration","setMaxUsage","reservedFunds","setReservedFunds","percentFormatter","botPairs","botMarket","startCondition","percent","points","getMaxUsageInBotCurrency","mxUsg","reserved_base_funds","reserved_quote_funds","getReservedFundsInBotCurrency","getFundsLockedInBotCurrency","avgDealDurationInMilliseconds","getAverageDealDuration","DCABotDetailsProfitsInfo","fromFilter","toFilter","averageTp","setAverageTp","averageProfitFromDeal","setAverageProfitFromDeal","averageDailyProfit","setAverageDailyProfit","setReturns","totalProfitUsd","setTotalProfitUsd","createdAt","startBotDate","fromFilterMoment","toFilterMoment","maxDate","max","unzip","zip","chartData","isBefore","isAfter","getAverageDailyProfit","getTotalProfitUsd","final_profit_percentage","getAverageTp","getAverageProfitFromDeal","DCABotDetailsSettingsInfo","baseOrderSize","setBaseOrderSize","setSafetyOrderSize","getBaseOrderSize","leverageType","leverage_type","profit_currency","take_profit","take_profit_type","trailing_enabled","trailing_deviation","stop_loss_percentage","stop_loss_timeout_in_seconds","start_order_type","DCABotDetailsSafetyInfo","safetyOrderSize","maxPriceDeviation","setMaxPriceDeviation","priceDeviation","stepScale","safety_order_step_percentage","martingale_step_coefficient","avgSOCompleted","setAvgSOCompleted","nonSOCompleted","setNonSOCompleted","allSOCompleted","setAllSOCompleted","active_safety_orders_count","DCABotDetailsInfo","setInfoKey","Tabs","onSelect","k","Tab","eventKey","tabClassName","statusFilterOptions","DCABotDetails","setTimeRangeValue","setBotId","previousBotId","setBotsDeals","isDataLoading","setIsDataLoading","isAllDataLoading","setIsAllDataLoading","percentLoadedDeals","setPercentLoadedDeals","statusFilter","setStatusFilter","setDealStateSwitcher","pairFilter","setPairFilter","pairFilterOptions","setPairFilterOptions","setFromFilter","setToFilter","clearFilters","refreshData","fetchBot","isSame","dateTo","filterTo","filterByStatus","filterByPair","loadedDeals","finished_deals_count","stop","dropWaitingJobs","disconnect","ProgressBar","now","animated","radio","option","theme","colors","primary25","primary","startDate","endDate","selectsEnd","minDate","BotsFilters","updateFilter","filterItem","accountsOptions","label_id","scopeOptions","typeOptions","sortingOptions","setItem","stringify","filterOption","candidate","input","BotsListCharts","dealsLoaded","setDealsLoaded","botsLoaded","setBotsLoaded","numberHandled","setNumberHandled","profitsChartData","setProfitsChartData","accumulativeProfitsChartData","setAccumulativeProfitsChartData","botsLeaderboardChartData","setBotsLeaderboardChartData","getBotsList","getBoatsDeals","profitsObject","botsIds","currentObj","mergeWith","profit1","profit2","calculateProfitPerDayForListOfBots","sortedAndSelected10FirstBots","round","EPSILON","getBotsLeaderboardChartData","botsWithLoadedDeals","BotsList","showCharts","setShowCharts","isNothingFound","previousFilters","every","haveAllBotsDealsFor30Days","textAlign","dataLength","next","loader","endMessage","DCABots","cryptoCoins","BTC","ETH","BNB","USDT","USDC","XRP","TRX","BUSD","DOGE","getInitialInvestment","startPrice","start_price","quantityPerGrid","quantity_per_grid","pureInitialGrids","grid_lines","sort","abs","price","shift","baseInvestment","gridLine","quoteInvestment","allInQuote","allInUsd","createdOnDay","marketData","market_data","getCurrentInvestment","currentPrice","investment_base_currency","investment_quote_currency","getProfitsWithin30days","getProfitAgeInHours","getMarketOrdersWithin30days","marketOrders","grid_lines_orders","marketOrder","getMarketOrderAgeInHours","tradingFee","resultProfits","resultMarketOrders","objectProfits","objectMarketOrders","setNewGridBotsList","gridBotsList","addToGridBotsList","setGridBot","spotAccountsTypes","fetchInitialInvestments","gridBotItem","initialInvestments","fetchCurrentInvestments","currentInvestments","fetchProfits","fetchMarketOrders","fetchGridBotsMetrics","GridBotsListTable","investment","setModalGridBotId","accId","upper_price","lower_price","grids_quantity","grigLinesNumber","sellOrdersNumber","line","order_placed","side","buyOrdersNumber","cur","val","invesmentChange","quoteProfit","profitPercent","usdProfit","pnl","pnlPercent","alignItems","justifyContent","rows","GridBotDetailsCharts","chartTooltipFormatLabel","botsProfits","getOneGridBotAccumulativeProfitsChartData","getOneGridBotProfitsChartData","GridBotDetailsTable","setProfit","avgProfit","setAvgProfit","running","setRunning","summarizedProfits","realProfit","realAvgProfit","realReturns","timeRangeRadios","GridBotDetails","setTradingFee","setMarketOrders","setProfits","fetchDetails","status_string","InputGroup","Text","GridBotListMetrics","totalInvestments","setTotalInvestments","totalProfits","setTotalProfits","totaPnL","setTotalPnL","isLoading","setIsLoading","allHaveInvestments","allHaveCurrentInvestments","allHaveProfits","calculatedInitialInvestments","calculatedCurrentInvestments","calculatedProfits","investmentRadios","valuesRadios","GridBotsList","setInvestment","setValues","modalGridBotId","fetchGridBots","GridBots","setNewSmartTradesList","smartTradesList","addToSmartTradesList","setSmartTrade","fromDate","fetchTrades","smartTradeItem","trades","smartTradeTrades","SmartTradeDetailsStatusTable","average_enter_price","average_close_price","SmartTradeDetailsTable","triggerSignMap","less","less_or_equal","greater_or_equal","greater","trade","order_type","order_side","initial_price","realised_price","initial_amount","realised_amount","initial_total","realised_total","trigger_condition","trigger_price","trail_value","trail_percentage","purposeRadios","SmartTradeDetails","purpose","setPurpose","setTrades","trade_purpose","getObjectOfSmartTradesProfitsPerDay","filteredSmartTrades","SmartTradesCharts","pairProfitsLeaderboardData","setPairProfitsLeaderboardData","smartTradesProfitsByDays","oldestTradeDate","min","getSmartTradesAccumulativeProfitsChartData","getSmartTradesProfitsChartData","groupedResultProfits","groupedSmartTrades","getSmartTradesPairsLeaderboardChartData","SmartTradesFilters","statusOptions","disabled","isDisabled","smartTradeTypes","simple_buy","simple_sell","smart_sell","smart_trade","smart_cover","smart_buy","SmartTradesTable","setModalSmartTradeId","pnl_percent","pnl_usd","units","enabled","SmartTradesList","modalSmartTradeId","SmartTrades","fetchSmartTrades","Router","element","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d16b43f0.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via{\" \"}\n          <Alert.Link\n            onClick={() => {\n              window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n            }}\n          >\n            Telegram\n          </Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import _ from \"lodash\";\nimport { IBot, IBotFilters } from \"../../interfaces/Bot\";\nimport { BotsAction } from \"./BotsActions\";\n\nexport interface IBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IBotFilters;\n  limit: number;\n  bots: { [key: number]: IBot };\n}\n\nexport const botsStateInitializer = (\n  initialValue = initialBotsState\n): IBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"botsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  scope: \"enabled\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 15,\n  offset: 0,\n  filters: initialFiltersState,\n  bots: {},\n};\n\nexport function botsReducer(\n  state: IBotsState = initialBotsState,\n  action: BotsAction\n): IBotsState {\n  switch (action.type) {\n    case \"setNewBotsList\":\n      const newList = action.payload.map((bot) => bot.id);\n      const newBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, bots: newBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToBotsList\":\n      const list = action.payload.map((bot) => bot.id);\n      const bots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        bots: { ...state.bots, ...bots },\n      };\n    case \"setBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setBot\":\n      return {\n        ...state,\n        bots: { ...state.bots, [action.payload.botId]: action.payload.bot },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { DealsAction } from \"./DealsActions\";\nimport { IDeal } from \"../../interfaces/Deal\";\nimport _ from \"lodash\";\n\nexport interface IDealsState {\n  deals: {\n    [key: string]: { list: Array<IDeal>; period: number; offset?: number };\n  };\n  activeDeals: {\n    [key: string]: { list: Array<IDeal> };\n  };\n}\n\nexport const initialDealsState: IDealsState = {\n  deals: {},\n  activeDeals: {},\n};\n\nexport function dealsReducer(\n  state: IDealsState = initialDealsState,\n  action: DealsAction\n): IDealsState {\n  switch (action.type) {\n    case \"getDealsList\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            list: action.payload.deals,\n            period: action.payload.periodInDays,\n          },\n        },\n      };\n    case \"getActiveDealsList\":\n      return {\n        ...state,\n        activeDeals: {\n          ...state.activeDeals,\n          [action.payload.botId]: {\n            ...state.activeDeals[action.payload.botId],\n            list: action.payload.activeDeals,\n          },\n        },\n      };\n    case \"setOffset\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            offset: action.payload.offset,\n          },\n        },\n      };\n    case \"resetDeals\":\n      if (action.payload.botId in state.deals) {\n        const newDeals = _.omit(state.deals, [action.payload.botId]);\n        return {\n          ...state,\n          deals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    case \"resetActiveDeals\":\n      if (action.payload.botId in state.activeDeals) {\n        const newDeals = _.omit(state.activeDeals, [action.payload.botId]);\n        return {\n          ...state,\n          activeDeals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    default:\n      throw new Error();\n  }\n}\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\nimport { IBotApi } from \"../interfaces/Bot\";\nimport { IDealApi } from \"../interfaces/Deal\";\nimport { IGridBotApi } from \"../interfaces/GridBot\";\n\nconst commonLimiter = new Bottleneck({\n  reservoir: 13,\n  reservoirRefreshAmount: 13,\n  reservoirRefreshInterval: 1000,\n});\n\nexport const DEAL_LIMITER_SETTINGS = {\n  id: \"DEAL_LIMITER\",\n  reservoir: 0,\n  reservoirRefreshAmount: 1,\n  reservoirRefreshInterval: 1000,\n  minTime: 1000,\n  maxConcurrent: 1,\n  clearDatastore: true,\n  timeout: 2000,\n};\n\nconst API_KEY =\n  new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\nconst SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n//we need that hack for stopping loading heavy deals request\nexport let dealsLimiter = new Bottleneck(DEAL_LIMITER_SETTINGS);\n\nexport function setDealsLimiter(limiterId: any) {\n  dealsLimiter = new Bottleneck({ ...DEAL_LIMITER_SETTINGS, id: limiterId });\n}\n\nexport function getDealsLimiter() {\n  return dealsLimiter;\n}\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (\n  method: string,\n  path: string,\n  limiter: any = commonLimiter\n) => {\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n): Promise<Array<IBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      scope ? `&scope=${scope}` : \"\"\n    }${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getGridBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  accountId: string,\n  accountTypes: string[],\n  state = \"enabled\"\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const accountTypesParams = accountTypes\n    .map((accountType) => `&account_types[]=${accountType}`)\n    .join(\"\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/grid_bots?offset=${offset}&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      accountId ? `&account_ids[]=${accountId}` : accountTypesParams\n    }${state ? `&state=${state}` : \"\"}`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getSmartTrades = async (\n  page: number,\n  perPage: number,\n  sorting: string,\n  accountId: string,\n  type: string,\n  pair: string,\n  status: string,\n  from: string\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getSmartTradesUrl = () =>\n    `/public/api/v2/smart_trades?page=${page}&per_page=${perPage}&order_by=${sortBy}&order_direction=${sortDirection}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }${type ? `&type=${type}` : \"\"}${\n      pair ? `&pair=${pair}` : \"\"\n    }&status=${status}${from ? `&from=${from}` : \"\"}`;\n\n  return callApi(\"GET\", getSmartTradesUrl()).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getSmartTradeTrades = async (\n  smartTradeId: number\n): Promise<IBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/v2/smart_trades/${smartTradeId}/trades`\n  ).then((response: any) => response.json());\n};\nexport const getBot = async (botId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/bots/${botId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBot = async (gridBotId: number): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsProfits = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}/profits`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsMarketOrders = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/grid_bots/${gridBotId}/market_orders`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeal = async (dealId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/deals/${dealId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccounts = async (page: any, perPage: any) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts?page=${page}&per_page=${perPage}`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccount = async (accountId: number | string) => {\n  return callApi(\"GET\", `/public/api/ver1/accounts/${accountId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccountTableData = async (accountId: number | string) => {\n  return callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountPieChartData = async (accountId: number | string) => {\n  return callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/pie_chart_data`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountActiveTradingEntities = async (\n  accountId: number | string\n) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts/${accountId}/active_trading_entities`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountBalanceChartData = async (\n  accountId: number | string,\n  dateFrom: string\n) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts/${accountId}/balance_chart_data?date_from=${dateFrom}`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeals = async (\n  botId: number,\n  offset: number,\n  limit: number,\n  scope: string,\n  order: string\n): Promise<Array<IDealApi>> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=${scope}&order=${order}`,\n    dealsLimiter\n  ).then((response: any) => response.json());\n};\n\nexport const getStrategies = async () => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/marketplace/items?&limit=1000`\n  ).then((response: any) => response.json());\n};\n\nexport const getBotStats = async (botId: number) => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/bots/stats?bot_id=${botId}`\n  ).then((response: any) => response.json());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"./NavBar.css\";\n\nexport const NavBar = () => {\n  const [activeKey, setActiveKey] = useState(\"DCA\");\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const goToGridbots = () => {\n    navigate({\n      pathname: `/gridbots`,\n      search: window.location.search,\n    });\n  };\n  const goToDCABots = () => {\n    navigate({\n      pathname: `/`,\n      search: window.location.search,\n    });\n  };\n  const goToSmartTrades = () => {\n    navigate({\n      pathname: `/smarttrades`,\n      search: window.location.search,\n    });\n  };\n\n  const goToSmartAccounts = () => {\n    navigate({\n      pathname: `/accounts`,\n      search: window.location.search,\n    });\n  };\n\n  useEffect(() => {\n    if (location.pathname === \"/\") {\n      setActiveKey(\"DCA\");\n    } else if (location.pathname === \"/gridbots\") {\n      setActiveKey(\"grid\");\n    } else if (location.pathname === \"/smarttrades\") {\n      setActiveKey(\"smarttrades\");\n    } else if (location.pathname === \"/accounts\") {\n      setActiveKey(\"accounts\");\n    }\n  }, [location]);\n\n  return (\n    <div className=\"NavBar\">\n      <div className=\"NavBarContainer\">\n        <div className=\"LogoContainer\">\n          <img className=\"Logo\" src={`/BotAn__icon.png`} alt=\"logo\" />\n        </div>\n        <div className=\"Navigation\">\n          <Nav>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"DCA\"} onClick={goToDCABots}>\n                DCA Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"grid\"} onClick={goToGridbots}>\n                Grid Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                active={activeKey === \"smarttrades\"}\n                onClick={goToSmartTrades}\n              >\n                Smart Trades\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                active={activeKey === \"accounts\"}\n                onClick={goToSmartAccounts}\n              >\n                Accounts\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </div>\n\n        <div\n          className=\"CommunityLink\"\n          onClick={() => {\n            window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n          }}\n        >\n          <span className=\"SupportLabel\">Community</span>\n          <img className=\"TelegramIcon\" src={`image 8.png`} alt=\"logo\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\nimport { GridBotsAction } from \"./GridBotsActions\";\n\nexport interface IGridBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IGridBotFilters;\n  limit: number;\n  gridBots: { [key: number]: IGridBot };\n}\n\nexport const gridBotsStateInitializer = (\n  initialValue = initialGridBotsState\n): IGridBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"GridBotsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountType: \"spot\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialGridBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 10,\n  offset: 0,\n  filters: initialFiltersState,\n  gridBots: {},\n};\n\nexport function gridBotsReducer(\n  state: IGridBotsState = initialGridBotsState,\n  action: GridBotsAction\n): IGridBotsState {\n  switch (action.type) {\n    case \"setNewGridBotsList\":\n      const newList = action.payload.map((gridBot) => gridBot.id);\n      const newGridBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, gridBots: newGridBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToGridBotsList\":\n      const list = action.payload.map((gridBot) => gridBot.id);\n      const gridBots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        gridBots: { ...state.gridBots, ...gridBots },\n      };\n    case \"setGridBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setGridBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setGridBot\":\n      return {\n        ...state,\n        gridBots: {\n          ...state.gridBots,\n          [action.payload.gridBotId]: action.payload.gridBot,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import _ from \"lodash\";\nimport { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\nimport { SmartTradesAction } from \"./SmartTradesActions\";\n\nexport interface ISmartTradesState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: ISmartTradeFilters;\n  limit: number;\n  smartTrades: { [key: number]: ISmartTrade };\n}\n\nexport const smartTradesStateInitializer = (\n  initialValue = initialSmartTradesState\n): ISmartTradesState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"smartTradesFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountId: \"\",\n  sorting: \"created_at-desc\",\n  type: \"\",\n  status: \"all\",\n  from: { label: \"month\", from: \"\", to: \"\" },\n  pair: \"\",\n};\n\nexport const initialSmartTradesState: any = {\n  list: [],\n  hasMore: true,\n  limit: 100,\n  offset: 1,\n  filters: initialFiltersState,\n  smartTrades: {},\n};\n\nexport function smartTradesReducer(\n  state: ISmartTradesState = initialSmartTradesState,\n  action: SmartTradesAction\n): ISmartTradesState {\n  switch (action.type) {\n    case \"setNewSmartTradesList\":\n      const newList = action.payload.map((smartTrade) => smartTrade.id);\n      const newSmartTrades = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, smartTrades: newSmartTrades };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToSmartTradesList\":\n      const list = action.payload.map((smartTrade) => smartTrade.id);\n      const smartTrades = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        smartTrades: { ...state.smartTrades, ...smartTrades },\n      };\n    case \"setSmartTradesOffset\":\n      return { ...state, offset: action.payload };\n    case \"setSmartTradesFilters\":\n      return { ...state, filters: action.payload };\n    case \"setSmartTrade\":\n      return {\n        ...state,\n        smartTrades: {\n          ...state.smartTrades,\n          [action.payload.smartTradeId]: action.payload.smartTrade,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import _ from \"lodash\";\nimport { IAccount } from \"../../interfaces/Account\";\nimport { AccountsAction } from \"./AccountsActions\";\n\nexport interface IAccountsState {\n  list: Array<number>;\n  accounts: { [key: number]: IAccount };\n  accountTableData: { [key: number]: IAccount };\n  accountPieChartData: { [key: number]: IAccount };\n  accountActiveTradingEntities: { [key: number]: IAccount };\n  hasMore: boolean;\n  offset: number;\n  limit: number;\n}\n\nexport const initialAccountsState: any = {\n  offset: 0,\n  hasMore: false,\n  list: [],\n  limit: 100,\n  accounts: {},\n  accountTableData: {},\n  accountPieChartData: {},\n  accountActiveTradingEntities: {},\n};\n\nexport function accountsReducer(\n  state: IAccountsState,\n  action: AccountsAction\n): IAccountsState {\n  switch (action.type) {\n    case \"setNewAccountsList\":\n      const newList = action.payload.map((account: any) => account.id);\n      const newAccounts = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, accounts: newAccounts };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToAccountsList\":\n      const list = action.payload.map((account) => account.id);\n      const accounts = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        accounts: { ...state.accounts, ...accounts },\n      };\n    case \"setAccountsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setAccount\":\n      return {\n        ...state,\n        accounts: {\n          ...state.accounts,\n          [action.payload.accountId]: action.payload.account,\n        },\n      };\n    case \"setAccountTableData\":\n      return {\n        ...state,\n        accountTableData: {\n          ...state.accountTableData,\n          [action.payload.accountId]: action.payload.accountTableData,\n        },\n      };\n    case \"setAccountPieChartData\":\n      return {\n        ...state,\n        accountPieChartData: {\n          ...state.accountPieChartData,\n          [action.payload.accountId]: action.payload.accountPieChartData,\n        },\n      };\n    case \"setAccountActiveTradingEntities\":\n      return {\n        ...state,\n        accountActiveTradingEntities: {\n          ...state.accountActiveTradingEntities,\n          [action.payload.accountId]:\n            action.payload.accountActiveTradingEntities,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { IAccount } from \"../../interfaces/Account\";\n\ninterface ISetNewAccountsList {\n  type: \"setNewAccountsList\";\n  payload: Array<IAccount>;\n}\n\nexport const setNewAccountsList = (\n  accountsList: Array<IAccount>\n): ISetNewAccountsList => ({\n  type: \"setNewAccountsList\",\n  payload: accountsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToAccountsList {\n  type: \"addToAccountsList\";\n  payload: Array<IAccount>;\n}\n\nexport const addToAccountsList = (\n  accountsList: Array<IAccount>\n): IAddToAccountsList => ({\n  type: \"addToAccountsList\",\n  payload: accountsList,\n});\n\ninterface ISetAccountsOffset {\n  type: \"setAccountsOffset\";\n  payload: number;\n}\n\nexport const setAccountsOffset = (offset: number): ISetAccountsOffset => ({\n  type: \"setAccountsOffset\",\n  payload: offset,\n});\n\ninterface ISetAccount {\n  type: \"setAccount\";\n  payload: { accountId: number | string; account: any };\n}\n\nexport const setAccount = (\n  accountId: number | string,\n  account: any\n): ISetAccount => ({\n  type: \"setAccount\",\n  payload: { accountId, account },\n});\n\ninterface ISetAccountTableData {\n  type: \"setAccountTableData\";\n  payload: { accountId: number | string; accountTableData: any };\n}\n\nexport const setAccountTableData = (\n  accountId: number | string,\n  accountTableData: any\n): ISetAccountTableData => ({\n  type: \"setAccountTableData\",\n  payload: { accountId, accountTableData },\n});\n\ninterface ISetAccountPieChartData {\n  type: \"setAccountPieChartData\";\n  payload: { accountId: number | string; accountPieChartData: any };\n}\n\nexport const setAccountPieChartData = (\n  accountId: number | string,\n  accountPieChartData: any\n): ISetAccountPieChartData => ({\n  type: \"setAccountPieChartData\",\n  payload: { accountId, accountPieChartData },\n});\n\ninterface ISetAccountActiveTradingEntities {\n  type: \"setAccountActiveTradingEntities\";\n  payload: { accountId: number | string; accountActiveTradingEntities: any };\n}\n\nexport const setAccountActiveTradingEntities = (\n  accountId: number | string,\n  accountActiveTradingEntities: any\n): ISetAccountActiveTradingEntities => ({\n  type: \"setAccountActiveTradingEntities\",\n  payload: { accountId, accountActiveTradingEntities },\n});\n\nexport type AccountsAction =\n  | ISetAccountTableData\n  | ISetNewAccountsList\n  | ISetAccountActiveTradingEntities\n  | ISetAccountPieChartData\n  | ISetAccount\n  | IAddToAccountsList\n  | ISetAccountsOffset\n  | ISetHasMore;\n","import {\n  getAccount,\n  getAccountActiveTradingEntities,\n  getAccountPieChartData,\n  getAccounts,\n  getAccountTableData,\n} from \"../../utils/ApiUtils\";\n\nimport {\n  setNewAccountsList,\n  setAccountTableData,\n  setAccountPieChartData,\n  setAccountActiveTradingEntities,\n  setHasMore,\n  addToAccountsList,\n  setAccount,\n} from \"./AccountsActions\";\nimport { IAccountsState } from \"./AccountsReducer\";\n\nexport async function fetchAccounts(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  accountsDispatch(setHasMore(true));\n  accountsDispatch(setNewAccountsList([]));\n  const { limit } = accountsState;\n\n  const perPage = customLimit ? customLimit : limit;\n  try {\n    let hasMore = true;\n    let page = 1;\n\n    while (hasMore) {\n      const data: any = await getAccounts(page, perPage);\n      if (data.error) {\n        break;\n      }\n      accountsDispatch(addToAccountsList(data));\n      page = page + 1;\n      if (data.length < perPage) {\n        hasMore = false;\n      }\n    }\n    accountsDispatch(setHasMore(false));\n  } catch {\n    accountsDispatch(setNewAccountsList([]));\n    accountsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching accounts list\",\n    });\n  }\n}\n\nexport async function fetchAccount(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  try {\n    const account = await getAccount(accountId);\n    accountsDispatch(setAccount(accountId, account));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account ${accountId}`,\n    });\n  }\n}\n\nexport async function fetchAccountTableData(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountTableData } = accountsState;\n  try {\n    if (!(accountId in accountTableData)) {\n      const accountTableData = await getAccountTableData(accountId);\n      accountsDispatch(setAccountTableData(accountId, accountTableData));\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account table data`,\n    });\n  }\n}\nexport async function fetchAccountPieChartData(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountPieChartData } = accountsState;\n  try {\n    if (!(accountId in accountPieChartData)) {\n      const accountPieChartData = await getAccountPieChartData(accountId);\n      accountsDispatch(setAccountPieChartData(accountId, accountPieChartData));\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account pie chart data`,\n    });\n  }\n}\nexport async function fetchAccountActiveTradingEntities(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountActiveTradingEntities } = accountsState;\n  try {\n    if (!(accountId in accountActiveTradingEntities)) {\n      const accountActiveTradingEntities =\n        await getAccountActiveTradingEntities(accountId);\n      accountsDispatch(\n        setAccountActiveTradingEntities(accountId, accountActiveTradingEntities)\n      );\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account active trading entities data`,\n    });\n  }\n}\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport {\n  botsReducer,\n  botsStateInitializer,\n  initialBotsState,\n} from \"./state/bots/BotsReducer\";\nimport { dealsReducer, initialDealsState } from \"./state/deals/DealsReducer\";\nimport { getStrategies } from \"./utils/ApiUtils\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { Outlet } from \"react-router-dom\";\nimport {\n  gridBotsReducer,\n  gridBotsStateInitializer,\n  initialGridBotsState,\n} from \"./state/gridBots/GridBotsReducer\";\nimport {\n  initialSmartTradesState,\n  smartTradesReducer,\n  smartTradesStateInitializer,\n} from \"./state/smartTrades/SmartTradesReducer\";\nimport {\n  accountsReducer,\n  initialAccountsState,\n} from \"./state/accounts/AccountsReducer\";\nimport { fetchAccounts } from \"./state/accounts/AccountsEffects\";\nimport { Spinner } from \"react-bootstrap\";\n\nChartJS.register(\n  CategoryScale,\n  PointElement,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement\n);\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nexport const BotsContext = createContext({\n  botsState: initialBotsState,\n  botsDispatch: (state: any) => {},\n});\nexport const GridBotsContext = createContext({\n  gridBotsState: initialGridBotsState,\n  gridBotsDispatch: (state: any) => {},\n});\nexport const SmartTradesContext = createContext({\n  smartTradesState: initialSmartTradesState,\n  smartTradesDispatch: (state: any) => {},\n});\nexport const DealsContext = createContext({\n  dealsState: initialDealsState,\n  dealsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [botsState, botsDispatch] = useReducer(\n    botsReducer,\n    initialBotsState,\n    botsStateInitializer\n  );\n  const [gridBotsState, gridBotsDispatch] = useReducer(\n    gridBotsReducer,\n    initialGridBotsState,\n    gridBotsStateInitializer\n  );\n\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n  const [smartTradesState, smartTradesDispatch] = useReducer(\n    smartTradesReducer,\n    initialSmartTradesState,\n    smartTradesStateInitializer\n  );\n  const [dealsState, dealsDispatch] = useReducer(\n    dealsReducer,\n    initialDealsState\n  );\n\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchAccounts(accountsDispatch, accountsState, errorsDispatch);\n    getStrategiesData();\n  }, []);\n\n  const { list } = accountsState;\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <BotsContext.Provider value={{ botsState, botsDispatch }}>\n            <SmartTradesContext.Provider\n              value={{ smartTradesState, smartTradesDispatch }}\n            >\n              <GridBotsContext.Provider\n                value={{ gridBotsState, gridBotsDispatch }}\n              >\n                <DealsContext.Provider value={{ dealsState, dealsDispatch }}>\n                  <div className=\"App\">\n                    <NavBar />\n                    {list.length > 0 ? (\n                      <Outlet />\n                    ) : (\n                      <div className=\"SpinnerContainer\">\n                        <Spinner animation=\"grow\" />\n                      </div>\n                    )}\n                    <ErrorsAlerts />\n                  </div>\n                </DealsContext.Provider>\n              </GridBotsContext.Provider>\n            </SmartTradesContext.Provider>\n          </BotsContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import moment from \"moment\";\nimport React, { useEffect, useRef } from \"react\";\nimport { callApi } from \"./ApiUtils\";\n\nexport const usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const convertFilterValueToDate = (filterFrom: any) => {\n  const dateFormat = \"YYYY-MM-DD\";\n\n  const filterValue = filterFrom.label;\n\n  if (filterValue === \"today\") {\n    return moment().subtract(1, \"day\").format(dateFormat);\n  } else if (filterValue === \"week\") {\n    return moment().subtract(1, \"week\").format(dateFormat);\n  } else if (filterValue === \"month\") {\n    return moment().subtract(1, \"months\").format(dateFormat);\n  } else if (filterValue === \"custom\") {\n    return filterFrom.from\n      ? moment(filterFrom.from).format(dateFormat)\n      : moment().format(dateFormat);\n  }\n  return \"\";\n};\n\nexport const getCurrencyValueInUsd = async (\n  market_code: any,\n  currency: any,\n  valueInCurrency: any\n) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(valueInCurrency);\n  } else {\n    const responseUsdt = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n\n    if (responseUsdt) {\n      return responseUsdt * valueInCurrency;\n    }\n\n    const responseUsd = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USD_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n\n    if (responseUsd) {\n      return responseUsd * valueInCurrency;\n    }\n\n    const responseUsdBack = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=${currency}_USD`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n    if (responseUsdBack) {\n      return valueInCurrency / responseUsdBack;\n    }\n\n    const responseUsdtBack = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=${currency}_USDT`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n    if (responseUsdtBack) {\n      return valueInCurrency / responseUsdtBack;\n    }\n\n    return NaN;\n  }\n};\n","import _ from \"lodash\";\nimport { IBot } from \"../interfaces/Bot\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\nimport { callApi } from \"./ApiUtils\";\nimport { getCurrencyValueInUsd } from \"./GeneralUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account || !account.id) {\n    return 0;\n  }\n\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  return {\n    baseOrderVolume: await getCurrencyValueInUsd(\n      market_code,\n      currency,\n      baseOrderVolume\n    ),\n    safetyOrderVolume: await getCurrencyValueInUsd(\n      market_code,\n      currency,\n      safetyOrderVolume\n    ),\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nexport const isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nexport function getFundsLocked(bot: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? bot.fundsLocked / leverage : bot.fundsLocked;\n}\n\nexport function getFundsLockedInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let fundsLocked = 0;\n  let currency = quoteCurrency;\n\n  if (bot.strategy === \"long\") {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.bought_volume),\n      0\n    );\n    currency = quoteCurrency;\n  } else if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_amount),\n      0\n    );\n    currency = baseCurrency;\n  } else if (bot.strategy === \"short\" && !isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_volume),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  const leverage = parseFloat(bot.leverage_custom_value);\n\n  return {\n    value: leverage ? fundsLocked / leverage : fundsLocked,\n    currency,\n  };\n}\n\nexport const getBaseOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let additionalCurrency = \"\";\n\n  if (bot.base_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.base_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.base_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getSafetyOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n\n  let additionalCurrency = \"\";\n\n  if (bot.safety_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.safety_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.safety_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getCurrencyFormat = (\n  { value, currency }: any,\n  signDisplay: any = \"auto\"\n) => {\n  if (currency.includes(\"BTC\")) {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 6,\n      signDisplay,\n    }).format(value);\n  } else if (currency === \"marketPrice\") {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 8,\n      signDisplay,\n    }).format(value);\n  } else {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 2,\n      signDisplay,\n    }).format(value);\n  }\n};\n\nexport async function getMaxUsageInBotCurrency(bot: IBot, account: any) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let maxUsageInUsd = 0;\n\n  if (bot.maxUsage) {\n    maxUsageInUsd = bot.maxUsage;\n  } else {\n    maxUsageInUsd = await getMaxUsage(bot, account);\n  }\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    currency = baseCurrency;\n  } else {\n    currency = quoteCurrency;\n  }\n  const currencyPriceInUsd = await getCurrencyValueInUsd(\n    account.market_code,\n    currency,\n    1\n  );\n  return {\n    value: maxUsageInUsd / currencyPriceInUsd,\n    currency,\n  };\n}\n\nexport function getReservedFundsInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let reservedFunds = 0;\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_base_funds.toString()),\n      0\n    );\n    currency = baseCurrency;\n  } else {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_quote_funds.toString()),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  return {\n    value: reservedFunds,\n    currency,\n  };\n}\n\nexport function getReturns(maxUsage: any, deals: any) {\n  if (maxUsage === 0) {\n    return 0;\n  }\n  const profit30Days = deals.reduce(\n    (currDeal: any, nextDeal: any) => ({\n      usd_final_profit:\n        parseFloat(currDeal.usd_final_profit) +\n        parseFloat(nextDeal.usd_final_profit),\n    }),\n    { usd_final_profit: 0 }\n  )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n\nexport function getBotsLeaderboardChartData(botsState: IBotsState) {\n  const bots = botsState.list.map((botId: number) => {\n    const bot = botsState.bots[botId];\n    return {\n      maxUsage: bot.maxUsage || 0,\n      name: bot.name,\n      fundsLocked: getFundsLocked(bot),\n    };\n  });\n  const sortedAndSelected10FirstBots = _.sortBy(bots, [\n    \"maxUsage\",\n    \"fundsLocked\",\n  ])\n    .reverse()\n    .slice(0, 10);\n  return [\n    sortedAndSelected10FirstBots.map((bot) => bot.name),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.fundsLocked + Number.EPSILON) * 100) / 100\n    ),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.maxUsage + Number.EPSILON) * 100) / 100\n    ),\n  ];\n}\n","import moment from \"moment\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext } from \"../../../../App\";\nimport { IAccount } from \"../../../../interfaces/Account\";\nimport {\n  fetchAccountActiveTradingEntities,\n  fetchAccountPieChartData,\n} from \"../../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./AccountPreview.css\";\n\nvar stringToColour = function (str: any) {\n  var hash = 0;\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  var colour = \"#\";\n  for (var i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n};\n\nconst AccountPreview: FC<any> = ({ accountId }: any) => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountActiveTradingEntities } =\n    accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [account, setAccount] = useState<IAccount | null>(null);\n  const [accountPieChart, setAccountPieChart] = useState<any>(null);\n  const [accountActiveTrading, setAccountActiveTrading] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchAccountPieChartData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      accountId\n    );\n    fetchAccountActiveTradingEntities(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      accountId\n    );\n    setAccount(accounts[accountId]);\n  }, [accountId]);\n\n  useEffect(() => {\n    if (accountId in accountPieChartData) {\n      setAccountPieChart(accountPieChartData[accountId]);\n    }\n  }, [accountPieChartData]);\n\n  useEffect(() => {\n    if (accountId in accountActiveTradingEntities) {\n      setAccountActiveTrading(accountActiveTradingEntities[accountId]);\n    }\n  }, [accountActiveTradingEntities]);\n\n  return (\n    <div className=\"AccountPreview\">\n      <div className=\"AccountPreviewColumn\">\n        {account && accountPieChart && (\n          <AccountIcons account={account} accountPieChart={accountPieChart} />\n        )}\n        {account && <AccountInfo account={account} />}\n      </div>\n      <div\n        className=\"AccountPreviewColumn\"\n        style={{ flexGrow: 1, marginLeft: \"16px\" }}\n      >\n        {account && (\n          <>\n            <div className=\"AccountNameContainer\">\n              <span className=\"AccountName\">{account.name}</span>\n            </div>\n\n            <div className=\"AccountPreviewTable\">\n              <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                <thead>\n                  <tr>\n                    <th>Balance value</th>\n                    <th>24 hr change</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>{`${getCurrencyFormat({\n                      value: parseFloat(account.usd_amount),\n                      currency: \"USD\",\n                    })} $`}</td>\n                    <td\n                      className={\n                        parseFloat(account.day_profit_usd) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(account.day_profit_usd),\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>{`${getCurrencyFormat({\n                      value: parseFloat(account.btc_amount),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                    <td\n                      className={\n                        parseFloat(account.day_profit_btc) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(account.day_profit_btc),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          </>\n        )}\n        {accountActiveTrading && accountActiveTrading.data && (\n          <div className=\"AccountPreviewTable\" style={{ marginTop: \"16px\" }}>\n            <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n              <thead>\n                <tr>\n                  <th>DCA bots</th>\n                  <th>Deals</th>\n                  <th>Smart Trades</th>\n                  <th>Grid Bots</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{accountActiveTrading.data.active_bots_count}</td>\n                  <td>{accountActiveTrading.data.active_deals_count}</td>\n                  <td>{accountActiveTrading.data.active_smart_trades_count}</td>\n                  <td>{accountActiveTrading.data.active_grid_bots_count}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </div>\n        )}\n        <div className=\"AccountPreviewButtonContainer\">\n          <Button\n            className=\"AccountPreviewButton\"\n            onClick={() => {\n              navigate({\n                pathname: `/accounts/${accountId}`,\n                search: window.location.search,\n              });\n            }}\n          >\n            View\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst marketTypes = { spot: \"S\", margin: \"M\", futures: \"F\" } as any;\n\nexport const AccountIcons = ({ account, accountPieChart }: any) => (\n  <div className=\"AccountPieChart\">\n    <div className=\"AccountTypeIconContainer\">\n      {marketTypes[account.supported_market_types[0]]}\n    </div>\n    {\"market_icon\" in account && (\n      <div className=\"AccountIconContainer\">\n        <div\n          className=\"AccountIcon\"\n          style={{\n            backgroundImage: `url(${account.market_icon})`,\n          }}\n        ></div>\n      </div>\n    )}\n    {account && accountPieChart.length > 0 ? (\n      <div className=\"AccountPieChartContainer\">\n        <AccountPieChart accountPieChart={accountPieChart} />\n      </div>\n    ) : (\n      <div className=\"AccountPieChartContainerEmpty\"></div>\n    )}\n  </div>\n);\n\nexport const AccountPieChart = ({ accountPieChart }: any) => (\n  <Pie\n    data={{\n      labels: accountPieChart.map((dataItem: any) => dataItem.code),\n      datasets: [\n        {\n          data: accountPieChart.map((dataItem: any) => dataItem.y),\n          backgroundColor: accountPieChart.map((dataItem: any) =>\n            dataItem.code.includes(\"USD\") && dataItem.code.length < 6\n              ? \"#00a59a\"\n              : stringToColour(dataItem.code)\n          ),\n          borderWidth: 0,\n        },\n      ],\n    }}\n    options={\n      {\n        plugins: {\n          legend: {\n            display: false,\n          },\n          tooltip: {\n            callbacks: {\n              label: (tooltipItem: any) => {\n                const dataset = tooltipItem.dataset;\n                const currentValue = dataset.data[tooltipItem.dataIndex];\n                return `${tooltipItem.label} ${currentValue}%`;\n              },\n            },\n            bodyFont: { size: 10 },\n          },\n        },\n      } as any\n    }\n  />\n);\n\nexport const AccountInfo = ({ account }: any) => (\n  <div className=\"AccountInfoContainer\">\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">Created:</div>\n      <div className=\"AccountInfoValue\">{`${moment(account.created_at).format(\n        \"DD/MM/YYYY\"\n      )}`}</div>\n    </div>\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">Updated:</div>\n      <div className=\"AccountInfoValue\">{`${moment(account.updated_at).format(\n        \"DD/MM/YYYY\"\n      )}`}</div>\n    </div>\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">API status:</div>\n      <div className=\"AccountInfoValue\">{`${\n        account.api_key_invalid ? \"Invalid\" : \"OK\"\n      }`}</div>\n    </div>\n  </div>\n);\n\nexport default AccountPreview;\n","export const ProfitChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const AccumulativeChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\nexport const TimeLineChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const LeaderbordChartOptions = (text: string, labels: any) => ({\n  indexAxis: \"y\" as const,\n  scales: {\n    x: {\n      autoSkip: false,\n      stacked: false,\n      beginAtZero: true,\n    },\n    y: {\n      stacked: true,\n      beginAtZero: true,\n      ticks: {\n        autoSkip: false,\n        callback: (value: any) => {\n          return labels[value].length > 35\n            ? labels[value].slice(0, 33) + \"...\"\n            : labels[value];\n        },\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"y\",\n    },\n  },\n});\n\nexport const DealsCountBarChartOptions = (\n  text: string,\n  isWeekUnit: boolean = true\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: isWeekUnit ? \"week\" : \"month\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const HistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  // crossAlign: \"near\",\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        label: (tooltipItem: any) => {\n          const dataset = tooltipItem.dataset;\n          const total = dataset.data.reduce(function (\n            previousValue: any,\n            currentValue: any\n          ) {\n            return previousValue + currentValue;\n          });\n          const currentValue = dataset.data[tooltipItem.dataIndex];\n          const percentage = Math.floor((currentValue / total) * 100 + 0.5);\n          return ` ${currentValue} deals (${percentage}%)`;\n        },\n        title: (tooltipItem: any) => {\n          const label = parseInt(tooltipItem[0].label);\n          return `Duration from ${label - 1} to ${label} hours`;\n        },\n      },\n    },\n  },\n});\n\nexport const NumberHistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      beginAtZero: true,\n      suggestedMin: 0,\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n","import moment from \"moment\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  FormControl,\n  Table,\n  ToggleButton,\n  FormCheck,\n  Button,\n} from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { AccountsContext, ErrorsContext } from \"../../../App\";\nimport { IAccount } from \"../../../interfaces/Account\";\nimport {\n  fetchAccount,\n  fetchAccountPieChartData,\n  fetchAccountTableData,\n} from \"../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../utils/BotsUtils\";\nimport { AccountPieChart } from \"../AccountsList/AccountPreview/AccountPreview\";\nimport \"./AccountDetails.css\";\nimport DatePicker from \"react-datepicker\";\nimport { getAccountBalanceChartData } from \"../../../utils/ApiUtils\";\nimport { Line } from \"react-chartjs-2\";\nimport { TimeLineChartOptions } from \"../../../utils/ChartsUtils\";\nimport _ from \"lodash\";\n\nconst chartTooltipFormatLabel =\n  (quoteCurrency: string) => (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\nconst AccountDetails: FC<any> = () => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountTableData } = accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [accountId, setAccountId] = useState<any>(null);\n  const [account, setAccount] = useState<IAccount | null>(null);\n  const [accountPieChart, setAccountPieChart] = useState<any>(null);\n  const [accountTable, setAccountTable] = useState<any>(null);\n  const [accountHistoryData, setAccountHistoryData] = useState<any>(null);\n  const [accountMode, setAccountMode] = useState<any>(\"current\");\n  const [historyCurrency, setHistoryCurrency] = useState<any>(\"usd\");\n  const [historyDate, setHistoryDate] = useState<any>(\n    moment().subtract(1, \"months\").toDate()\n  );\n\n  let params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (params.accountId) {\n      setAccountId(\n        params.accountId === \"summary\"\n          ? params.accountId\n          : parseInt(params.accountId)\n      );\n    }\n  }, [params]);\n\n  useEffect(() => {\n    if (accountId) {\n      fetchAccountPieChartData(\n        accountsDispatch,\n        accountsState,\n        errorsDispatch,\n        accountId\n      );\n      fetchAccountTableData(\n        accountsDispatch,\n        accountsState,\n        errorsDispatch,\n        accountId\n      );\n      fetchAccount(accountsDispatch, accountsState, errorsDispatch, accountId);\n    }\n  }, [accountId]);\n\n  useEffect(() => {\n    if (accountPieChartData && accountId in accountPieChartData) {\n      setAccountPieChart(accountPieChartData[accountId]);\n    }\n  }, [accountPieChartData, accountId]);\n\n  useEffect(() => {\n    if (accountTableData && accountId in accountTableData) {\n      setAccountTable(accountTableData[accountId]);\n    }\n  }, [accountTableData, accountId]);\n\n  useEffect(() => {\n    if (accounts && accountId in accounts) {\n      setAccount(accounts[accountId]);\n    }\n  }, [accounts, accountId]);\n\n  useEffect(() => {\n    if (accountId && historyDate) {\n      getAccountBalanceChartData(\n        accountId,\n        moment(historyDate).format(\"DD-MM-YYYY\")\n      ).then((result: any) => {\n        setAccountHistoryData(result);\n      });\n    }\n  }, [historyDate, accountId]);\n\n  return (\n    <div className=\"AccountDetails\">\n      <div style={{ display: \"flex\" }}>\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          className=\"AccountDetailsBackButton\"\n          onClick={() => {\n            navigate(-1);\n          }}\n        >\n          {`< Back`}\n        </Button>\n        <Button\n          style={{ marginLeft: \"16px\" }}\n          className=\"AccountDetailsBackButton\"\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            window.open(`https://3commas.io/accounts/${accountId}`, \"_blank\");\n          }}\n        >\n          Open in 3commas\n        </Button>\n      </div>\n      <div className=\"AccountDetailsMode\">\n        <div className=\"AccountDetailsControl\">\n          <ButtonGroup id=\"foo\">\n            <ToggleButton\n              key=\"current\"\n              id={`radio-account-current`}\n              type=\"radio\"\n              variant=\"outline-primary\"\n              name=\"radioAccountMode\"\n              value={\"current\"}\n              checked={accountMode === \"current\"}\n              onChange={(e) => {\n                setAccountMode(e.currentTarget.value);\n              }}\n            >\n              Current\n            </ToggleButton>\n            <ToggleButton\n              key=\"history\"\n              id={`radio-account-history`}\n              type=\"radio\"\n              variant=\"outline-primary\"\n              name=\"radioAccountMode\"\n              value={\"history\"}\n              checked={accountMode === \"history\"}\n              onChange={(e) => {\n                setAccountMode(e.currentTarget.value);\n              }}\n            >\n              History\n            </ToggleButton>\n          </ButtonGroup>\n        </div>\n        {accountMode === \"history\" && (\n          <div className=\"AccountDetailsControl\">\n            <ButtonGroup id=\"foo\">\n              <ToggleButton\n                key=\"usd\"\n                id={`radio-account-currency-usd`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioAccountCurrencyMode\"\n                value={\"usd\"}\n                checked={historyCurrency === \"usd\"}\n                onChange={(e) => {\n                  setHistoryCurrency(e.currentTarget.value);\n                }}\n              >\n                USD\n              </ToggleButton>\n              <ToggleButton\n                key=\"btc\"\n                id={`radio-account-currency-btc`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioAccountCurrencyMode\"\n                value={\"btc\"}\n                checked={historyCurrency === \"btc\"}\n                onChange={(e) => {\n                  setHistoryCurrency(e.currentTarget.value);\n                }}\n              >\n                BTC\n              </ToggleButton>\n            </ButtonGroup>\n          </div>\n        )}\n        {accountMode === \"history\" && (\n          <div className=\"AccountDetailsNamedControl\">\n            <div className=\"AccountDetailsFilterTitle\">From:</div>\n            <DatePicker\n              dateFormat=\"dd/MM/yyyy\"\n              selected={historyDate}\n              onChange={(date) => {\n                setHistoryDate(date as any);\n              }}\n              selectsStart\n              className=\"AccountDetailsDateFilter\"\n              strictParsing\n            />\n          </div>\n        )}\n      </div>\n      <div className=\"AccountDetailsOverview\">\n        {accountMode === \"current\" && (\n          <>\n            <div className=\"AccountDetailsOverviewPieChart\">\n              {account && accountPieChart && (\n                <AccountPieChart accountPieChart={accountPieChart} />\n              )}\n            </div>\n            {account && (\n              <div className=\"AccountDetailsOverviewTable\">\n                <div className=\"AccountNameContainer\">\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"AccountDetailsAccountIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <span className=\"AccountName\">{account.name}</span>\n                </div>\n                <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                  <thead>\n                    <tr>\n                      <th>Balance value</th>\n                      <th>24 hr change</th>\n                      <th>30 days change</th>\n                      <th>30 days change, %</th>\n                      <th>All time change</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_amount),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.day_profit_usd) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.day_profit_usd),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.usd_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_profit),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.usd_profit_percentage) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_profit_percentage),\n                        currency: \"USD\",\n                      })} %`}</td>\n                      <td\n                        className={\n                          parseFloat(account.total_usd_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.total_usd_profit),\n                        currency: \"USD\",\n                      })} $`}</td>\n                    </tr>\n                    <tr>\n                      <td>{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_amount),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.day_profit_btc) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.day_profit_btc),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.btc_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_profit),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.btc_profit_percentage) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_profit_percentage),\n                        currency: \"USD\",\n                      })} %`}</td>\n                      <td\n                        className={\n                          parseFloat(account.total_btc_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.total_btc_profit),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </div>\n            )}\n          </>\n        )}\n        {accountMode === \"history\" && accountHistoryData && (\n          <div className=\"AccountDetailsOverviewBalances\">\n            {account && (\n              <div className=\"AccountNameContainer\">\n                {\"market_icon\" in account && (\n                  <div\n                    className=\"AccountDetailsAccountIcon\"\n                    style={{\n                      backgroundImage: `url(${account.market_icon})`,\n                    }}\n                  ></div>\n                )}\n                <span className=\"AccountName\">{account.name}</span>\n              </div>\n            )}\n            <div className=\"AccountDetailsOverviewBalancesChart\">\n              <Line\n                options={\n                  TimeLineChartOptions(\n                    \"\",\n                    chartTooltipFormatLabel(\n                      historyCurrency === \"usd\" ? \"USD\" : \"BTC\"\n                    )\n                  ) as any\n                }\n                data={{\n                  labels: accountHistoryData.map((historyData: any) =>\n                    moment.unix(historyData.date).toDate()\n                  ),\n                  datasets: [\n                    {\n                      label: historyCurrency === \"usd\" ? \"USD\" : \"BTC\",\n                      data: accountHistoryData.map((historyData: any) =>\n                        historyCurrency === \"usd\"\n                          ? historyData.usd\n                          : historyData.btc\n                      ),\n                      borderColor: \"rgb(53, 162, 235)\",\n                      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    },\n                  ],\n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n      {accountTable && (\n        <AccountBalancesTable\n          accountTable={accountTable}\n          accountId={accountId}\n        />\n      )}\n    </div>\n  );\n};\n\nconst AccountBalancesTable: FC<any> = ({ accountTable, accountId }) => {\n  const [accountFilteredTable, setAccountFilteredTable] = useState<any>(null);\n  const [accountFilter, setAccountFilter] = useState<any>(\"\");\n  const [hideSmallBalances, setHideSmallBalances] = useState<any>(false);\n  const [balancesCurrency, setBalancesCurrency] = useState<any>(\"usd\");\n\n  useEffect(() => {\n    if (accountTable && !accountFilter && !hideSmallBalances) {\n      setAccountFilteredTable(\n        _.orderBy(accountTable, [\"percentage\"], [\"desc\"])\n      );\n    } else if (accountTable) {\n      setAccountFilteredTable(\n        _.orderBy(\n          accountTable\n            .filter(\n              (tableData: any) =>\n                tableData.currency_code &&\n                tableData.currency_code.includes(accountFilter.toUpperCase())\n            )\n            .filter((tableData: any) =>\n              hideSmallBalances\n                ? tableData.usd_value > 10 && tableData.percentage > 1\n                : true\n            ),\n          [\"percentage\"],\n          [\"desc\"]\n        )\n      );\n    }\n  }, [accountTable, accountFilter, hideSmallBalances]);\n\n  return (\n    <div className=\"AccountDetailsTableContainer\">\n      <div className=\"AccountDetailsTableFilters\">\n        <FormControl\n          onChange={(e: any) => {\n            setAccountFilter(e.target.value);\n          }}\n          value={accountFilter}\n          type=\"text\"\n          style={{ width: \"200px\", marginRight: \"16px\" }}\n        />\n        <FormCheck\n          type=\"switch\"\n          onChange={(e: any) => {\n            setHideSmallBalances(e.target.checked);\n          }}\n          value={hideSmallBalances}\n          id={`default-f`}\n          label={`Hide small balances`}\n        />\n        <ButtonGroup style={{ marginLeft: \"auto\" }}>\n          <ToggleButton\n            key=\"usd\"\n            id={`radio-account-balances-currency-usd`}\n            type=\"radio\"\n            variant=\"outline-primary\"\n            name=\"radioAccountBalancesCurrencyMode\"\n            value={\"usd\"}\n            checked={balancesCurrency === \"usd\"}\n            onChange={(e) => {\n              setBalancesCurrency(e.currentTarget.value);\n            }}\n          >\n            USD\n          </ToggleButton>\n          <ToggleButton\n            key=\"btc\"\n            id={`radio-account-balances-currency-btc`}\n            type=\"radio\"\n            variant=\"outline-primary\"\n            name=\"radioAccountBalancesCurrencyMode\"\n            value={\"btc\"}\n            checked={balancesCurrency === \"btc\"}\n            onChange={(e) => {\n              setBalancesCurrency(e.currentTarget.value);\n            }}\n          >\n            BTC\n          </ToggleButton>\n        </ButtonGroup>\n      </div>\n      <div className=\"AccountDetailsTable\">\n        {accountFilteredTable && (\n          <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n            <thead>\n              <tr>\n                <th>Token</th>\n                <th>Share</th>\n                <th>Price</th>\n                <th>Price change, 24h</th>\n                <th>Amount</th>\n                {accountId !== \"summary\" && <th>On orders</th>}\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              {accountFilteredTable.map((row: any) => (\n                <tr key={row.currency_code}>\n                  <td>\n                    {row.currency_name\n                      ? `${row.currency_name} (${row.currency_code})`\n                      : row.currency_code}\n                  </td>\n                  <td>{`${getCurrencyFormat({\n                    value: row.percentage,\n                    currency: \"USD\",\n                  })} %`}</td>\n                  <td>\n                    {balancesCurrency === \"usd\"\n                      ? `${getCurrencyFormat({\n                          value: row.current_price_usd,\n                          currency: \"USD\",\n                        })} $`\n                      : `${getCurrencyFormat({\n                          value: row.current_price,\n                          currency: \"BTC\",\n                        })} BTC`}\n                  </td>\n                  <td\n                    className={\n                      parseFloat(\n                        balancesCurrency === \"usd\"\n                          ? row.day_change_percent_usd\n                          : row.day_change_percent_btc\n                      ) >= 0\n                        ? \"showGreen\"\n                        : \"showRed\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value:\n                      balancesCurrency === \"usd\"\n                        ? row.day_change_percent_usd\n                        : row.day_change_percent_btc,\n                    currency: \"USD\",\n                  })} %`}</td>\n                  <td>{`${getCurrencyFormat({\n                    value: row.position,\n                    currency: row.currency_code,\n                  })}`}</td>\n                  {accountId !== \"summary\" && (\n                    <td>{`${getCurrencyFormat({\n                      value: row.on_orders,\n                      currency: row.currency_code,\n                    })}`}</td>\n                  )}\n                  <td>\n                    {balancesCurrency === \"usd\"\n                      ? `${getCurrencyFormat({\n                          value: row.usd_value,\n                          currency: \"USD\",\n                        })} $`\n                      : `${getCurrencyFormat({\n                          value: row.btc_value,\n                          currency: \"BTC\",\n                        })} BTC`}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AccountDetails;\n","import React, { FC, useContext } from \"react\";\nimport { AccountsContext } from \"../../../App\";\nimport AccountPreview from \"./AccountPreview/AccountPreview\";\nimport \"./AccountsList.css\";\n\ninterface AccountsListProps {}\n\nconst AccountsList: FC<AccountsListProps> = () => {\n  const {\n    accountsState: { list },\n  } = useContext(AccountsContext);\n\n  return (\n    <div className=\"AccountsList\">\n      {list.map((accountId: any) => (\n        <AccountPreview accountId={accountId} key={accountId} />\n      ))}\n    </div>\n  );\n};\n\nexport default AccountsList;\n","import _ from \"lodash\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext } from \"../../../App\";\nimport { IAccount } from \"../../../interfaces/Account\";\nimport {\n  fetchAccount,\n  fetchAccountPieChartData,\n  fetchAccountTableData,\n} from \"../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../utils/BotsUtils\";\nimport { AccountPieChart } from \"../AccountsList/AccountPreview/AccountPreview\";\nimport \"./AccountsSummaryPreview.css\";\n\ninterface AccountsSummaryPreviewProps {}\n\nconst AccountsSummaryPreview: FC<AccountsSummaryPreviewProps> = () => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountTableData } = accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [summary, setSummary] = useState<IAccount | null>(null);\n  const [summaryPieChart, setSummaryPieChart] = useState<any>(null);\n  const [summaryTableData, setSummaryTableData] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchAccountPieChartData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      \"summary\"\n    );\n    fetchAccountTableData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      \"summary\"\n    );\n    fetchAccount(accountsDispatch, accountsState, errorsDispatch, \"summary\");\n  }, []);\n\n  useEffect(() => {\n    if (\"summary\" in accountPieChartData) {\n      setSummaryPieChart(accountPieChartData[\"summary\"]);\n    }\n  }, [accountPieChartData]);\n\n  useEffect(() => {\n    if (\"summary\" in accountTableData) {\n      setSummaryTableData(\n        _.orderBy(accountTableData[\"summary\"], [\"percentage\"], [\"desc\"]).slice(\n          0,\n          3\n        )\n      );\n    }\n  }, [accountTableData]);\n\n  useEffect(() => {\n    if (\"summary\" in accounts) {\n      setSummary(accounts[\"summary\"]);\n    }\n  }, [accounts]);\n\n  return (\n    <div className=\"AccountsSummaryPreview\">\n      <div className=\"AccountsSummaryPreviewColumn\">\n        <div className=\"AccountNameContainer\">\n          <span className=\"AccountName\">Agrregate / Summary account</span>\n        </div>\n        <div className=\"AccountsSummaryPreviewCharts\">\n          <div className=\"AccountsSummaryPreviewPieChart\">\n            {summary && summaryPieChart && (\n              <AccountPieChart accountPieChart={summaryPieChart} />\n            )}\n          </div>\n          {summary && (\n            <div className=\"AccountsSummaryPreviewBalanceTable\">\n              <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                <thead>\n                  <tr>\n                    <th>Balance value</th>\n                    <th>24 hr change</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{`${getCurrencyFormat({\n                      value: parseFloat(summary.usd_amount),\n                      currency: \"USD\",\n                    })} $`}</td>\n                    <td\n                      className={\n                        parseFloat(summary.day_profit_usd) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(summary.day_profit_usd),\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                  <tr>\n                    <td>{`${getCurrencyFormat({\n                      value: parseFloat(summary.btc_amount),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                    <td\n                      className={\n                        parseFloat(summary.day_profit_btc) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(summary.day_profit_btc),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"AccountsSummaryPreviewColumn\">\n        <div className=\"AccountNameContainer\">\n          <span className=\"AccountName\">Top assets</span>\n        </div>\n        {summaryTableData && (\n          <div className=\"AccountsSummaryPreviewAssetsTable\">\n            <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n              <thead>\n                <tr>\n                  <th>Token</th>\n                  <th>Amount</th>\n                  <th>Total value, $</th>\n                </tr>\n              </thead>\n              <tbody>\n                {summaryTableData.map((asset: any) => (\n                  <tr key={asset.currency_code}>\n                    <td>{asset.currency_code}</td>\n                    <td>{`${getCurrencyFormat({\n                      value: asset.position,\n                      currency: asset.currency_code,\n                    })}`}</td>\n                    <td>{`${getCurrencyFormat({\n                      value: asset.usd_value,\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </div>\n        )}\n      </div>\n      <div className=\"AccountsSummaryButtonContainer\">\n        <Button\n          className=\"AccountPreviewButton\"\n          onClick={() => {\n            navigate({\n              pathname: `/accounts/summary`,\n              search: window.location.search,\n            });\n          }}\n        >\n          View\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountsSummaryPreview;\n","import React, { FC } from \"react\";\nimport \"./Accounts.css\";\nimport AccountsList from \"./AccountsList/AccountsList\";\nimport AccountsSummaryPreview from \"./AccountsSummaryPreview/AccountsSummaryPreview\";\n\ninterface AccountsProps {}\n\nconst Accounts: FC<AccountsProps> = () => {\n  return (\n    <div className=\"Accounts\">\n      <AccountsSummaryPreview />\n      <AccountsList />\n    </div>\n  );\n};\n\nexport default Accounts;\n","import { getDeals } from \"./ApiUtils\";\nimport moment from \"moment\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport _ from \"lodash\";\nimport { IDealsState } from \"../state/deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../state/deals/DealsSelectors\";\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60));\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60 * 24));\n\nexport const getDealAgeInHours = (deal: any) =>\n  differenceInHours(moment(), moment(deal.closed_at));\n\nexport const getDealAgeInDaysSinceOpened = (deal: any) =>\n  differenceInDays(moment(), moment(deal.created_at));\n\nexport const getAllDealsForOneBot = async (\n  botId: number,\n  daysWithin = 30,\n  ofsetCallback = (offset: number) => {}\n) => {\n  const hoursWithin = 24 * daysWithin;\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsInLoop = async () => {\n    const newDeals = await getDeals(\n      botId,\n      offset,\n      limit,\n      \"finished\",\n      \"closed_at\"\n    );\n\n    if (newDeals.length === 0) {\n      return;\n    }\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= hoursWithin\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      ofsetCallback(offset);\n      await fetchAllDealsInLoop();\n    } else {\n      const filteredDeals = newDeals.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin\n      );\n      deals = [...deals, ...filteredDeals];\n    }\n  };\n\n  await fetchAllDealsInLoop();\n\n  return deals;\n};\n\nexport const getObjectOfProfitPerDay = (deals: Array<IDeal>) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  let result = _.groupBy(deals, dateString);\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfProfitPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfSOPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.mean(deals.map((deal: IDeal) => deal.completed_safety_orders_count))\n  );\n};\n\nexport const calculateProfitPerDayForListOfBots = (\n  dealsState: IDealsState,\n  botsIds: Array<number>\n) => {\n  return botsIds.reduce((currentObj: any, botId: number) => {\n    const botsDeals = getObjectOfProfitPerDay(\n      selectAllDealsWithin30Days(dealsState, botId)\n    );\n\n    return _.mergeWith(\n      botsDeals,\n      currentObj,\n      (profit1: number, profit2: number) => {\n        profit1 = profit1 || 0;\n        profit2 = profit2 || 0;\n        return profit1 + profit2;\n      }\n    );\n  }, {});\n};\n\nexport const getLastNDays = (n: number = 30) =>\n  [...new Array(n)]\n    .map((i, idx) => moment().startOf(\"day\").subtract(idx, \"days\"))\n    .map((date: any) => date.format(\"YYYY-MM-DD\"))\n    .reverse();\n\nexport const getProfitChartData = (profitObject: any, nDays = 30) => {\n  const lastDays = getLastNDays(nDays);\n\n  const profits = lastDays.map((day: string) => {\n    return day in profitObject ? profitObject[day] : 0;\n  });\n\n  const labels = lastDays.map((day: any) => moment(day, \"YYYY-MM-DD\"));\n  return [labels, profits];\n};\n\nexport const getAccumulativeProfitChartData = (\n  profitObject: any,\n  nDays = 30\n) => {\n  const profits = getProfitChartData(profitObject, nDays);\n  let currentvalue = 0;\n  const accProfits = profits[1].map((profit: any) => {\n    const acc = currentvalue + profit;\n    currentvalue = acc;\n    return acc;\n  });\n  return [profits[0], accProfits];\n};\n\nexport const getDealsCountPerDay = (deals: IDeal[], dates: string[]) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  const delsGrouped = _.groupBy(deals, dateString);\n  const result = _.mapValues(\n    delsGrouped,\n    (deals: Array<IDeal>) => deals.length\n  );\n\n  return dates.map((day: string) => {\n    return day in result ? result[day] : 0;\n  });\n};\n\nexport const dealsStatusesCounts = (deals: IDeal[]) => {\n  const countsObj = _.countBy(deals, (deal) => deal.localized_status);\n  const keys = [\n    \"Cancelled\",\n    \"StopLoss\",\n    \"Failed\",\n    \"Completed\",\n    \"Closed at Market Price\",\n    \"Liquidated\",\n    \"Switched\",\n  ];\n  const values = keys.map((key) => countsObj[key]);\n  return [keys, values];\n};\n\nexport const getDealsDurationHistogramData = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return differenceInHours(end, start);\n  });\n  const countsObj = _.countBy(dealDurations);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getDealsSOHistogramData = (deals: IDeal[]) => {\n  const dealSO = deals.map((deal) => deal.completed_safety_orders_count);\n  const countsObj = _.countBy(dealSO);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getAverageDealDuration = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return end.diff(start);\n  });\n\n  const avgDealDurationInMilliseconds =\n    _.sum(dealDurations) / dealDurations.length || 0;\n\n  return moment.utc(avgDealDurationInMilliseconds).format(\"HH:mm\");\n};\n\nexport const getOneBotAccumulativeProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getAccumulativeProfitChartData(botsDeals, 30)\n    : getAccumulativeProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getProfitChartData(botsDeals, 30)\n    : getProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotCurrencyLeaderbord = (deals: IDeal[]) => {\n  const profitsByPair = getObjectOfProfitPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getOneBotSOLeaderbord = (deals: IDeal[], dir = \"desc\") => {\n  const profitsByPair = getObjectOfSOPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [dir as any])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getAverageTp = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(deals.map((deal) => parseFloat(deal.final_profit_percentage))) ||\n      0,\n    currency: \"%\",\n  };\n};\n\nexport const getAverageProfitFromDeal = (deals: IDeal[]) => {\n  return {\n    value: _.mean(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0,\n    currency: \"$\",\n  };\n};\n\nexport const getTotalProfitUsd = (deals: IDeal[]) => {\n  return _.sum(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0;\n};\n\nexport const getAverageDailyProfit = (\n  createdAt: string,\n  deals: IDeal[],\n  fromFilter: any,\n  toFilter: any\n) => {\n  const startBotDate = moment.utc(createdAt);\n  const fromFilterMoment = moment.utc(fromFilter).startOf(\"day\");\n  const toFilterMoment = moment.utc(toFilter).startOf(\"day\");\n\n  const maxDate = moment.max([fromFilterMoment, startBotDate]);\n\n  const profitsData = _.unzip(\n    _.zip(...getOneBotProfitsChartData(deals)).filter(\n      (chartData) =>\n        !chartData[0].isBefore(maxDate, \"day\") &&\n        !chartData[0].isAfter(toFilterMoment, \"day\")\n    )\n  );\n\n  return {\n    value: _.mean(profitsData[1]),\n    currency: \"$\",\n  };\n};\n","import { IDeal } from \"../../interfaces/Deal\";\nimport { getDealAgeInHours } from \"../../utils/DealsUtils\";\nimport { IDealsState } from \"./DealsReducer\";\n\nexport const INFINITY_IN_DAYS = 100000;\nconst hoursWithin30Days = 24 * 30;\n\nexport const is30daysDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals && state.deals[botId] && state.deals[botId].period >= 30;\n\nexport const isAllDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals &&\n  state.deals[botId] &&\n  state.deals[botId].period >= INFINITY_IN_DAYS;\n\nexport const selectAllDealsWithin30Days = (\n  state: IDealsState,\n  botId: number\n) => {\n  return is30daysDealsLoaded(state, botId)\n    ? state.deals[botId].list.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin30Days\n      )\n    : [];\n};\n\nexport const selectAllDeals = (state: IDealsState, botId: number) => {\n  return isAllDealsLoaded(state, botId) ? state.deals[botId].list : [];\n};\n\nexport const filterAllSuccessfulDeals = (deals: IDeal[]) => {\n  return deals.filter(\n    (deal: IDeal) => deal.status !== \"failed\" && deal.status !== \"cancelled\"\n  );\n};\n","import { IBot, IBotFilters } from \"../../interfaces/Bot\";\n\ninterface ISetNewBotsList {\n  type: \"setNewBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const setNewBotsList = (botsList: Array<IBot>): ISetNewBotsList => ({\n  type: \"setNewBotsList\",\n  payload: botsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToBotsList {\n  type: \"addToBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const addToBotsList = (botsList: Array<IBot>): IAddToBotsList => ({\n  type: \"addToBotsList\",\n  payload: botsList,\n});\n\ninterface ISetBotsOffset {\n  type: \"setBotsOffset\";\n  payload: number;\n}\n\nexport const setBotsOffset = (offset: number): ISetBotsOffset => ({\n  type: \"setBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetBotsFilters {\n  type: \"setBotsFilters\";\n  payload: IBotFilters;\n}\n\nexport const setBotsFilters = (botsFilter: IBotFilters): ISetBotsFilters => ({\n  type: \"setBotsFilters\",\n  payload: botsFilter,\n});\n\ninterface ISetBot {\n  type: \"setBot\";\n  payload: { botId: number; bot: IBot };\n}\n\nexport const setBot = (botId: number, bot: IBot): ISetBot => ({\n  type: \"setBot\",\n  payload: { botId, bot },\n});\n\nexport type BotsAction =\n  | ISetNewBotsList\n  | ISetHasMore\n  | IAddToBotsList\n  | ISetBotsOffset\n  | ISetBotsFilters\n  | ISetBot;\n","import { getBot, getBots, getBotStats } from \"../../utils/ApiUtils\";\nimport { getMaxUsage, getReturns } from \"../../utils/BotsUtils\";\nimport { IDealsState } from \"../deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../deals/DealsSelectors\";\nimport {\n  addToBotsList,\n  setBotsOffset,\n  setHasMore,\n  setNewBotsList,\n  setBot,\n} from \"./BotsActions\";\nimport { IBotsState } from \"./BotsReducer\";\n\nexport async function fetchBots(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  resetOffset: boolean = false,\n  customLimit?: number\n) {\n  botsDispatch(setHasMore(true));\n  const {\n    offset,\n    limit,\n    filters: { sorting, scope, type, account },\n  } = botsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    const data = await getBots(\n      offset,\n      offsetLimit,\n      sorting,\n      scope,\n      type,\n      account,\n      resetOffset\n    );\n    if (resetOffset) {\n      botsDispatch(setBotsOffset(offsetLimit));\n      botsDispatch(setNewBotsList(data));\n    } else {\n      botsDispatch(setBotsOffset(offset + offsetLimit));\n      botsDispatch(addToBotsList(data));\n    }\n    if (data.length < offsetLimit) {\n      botsDispatch(setHasMore(false));\n    }\n  } catch {\n    botsDispatch(setNewBotsList([]));\n    botsDispatch(setBotsOffset(offsetLimit));\n    botsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching bots list\",\n    });\n  }\n}\n\nexport async function fetchBot(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    const bot = await getBot(botId);\n    botsDispatch(setBot(botId, bot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching bot ${botId}`,\n    });\n  }\n}\n\nexport async function getMaxUsageEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number,\n  account: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"maxUsage\" in bots[botId])) {\n      const maxUsage = await getMaxUsage(botItem, account);\n      const bot = { ...botItem, maxUsage: maxUsage };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = { ...botItem, maxUsage: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching max usage for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getFundsLockedAndTodaysProfit(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"fundsLocked\" in bots[botId])) {\n      const {\n        profits_in_usd: { today_usd_profit, funds_locked_in_active_deals },\n      } = await getBotStats(botId);\n\n      const bot = {\n        ...botItem,\n        fundsLocked: funds_locked_in_active_deals,\n        todayUsdProfit: today_usd_profit,\n      };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = {\n      ...botItem,\n      fundsLocked: 0,\n      todayUsdProfit: 0,\n    };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching stats for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getReturnsEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  dealsState: IDealsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    const deals30daysForBot = selectAllDealsWithin30Days(dealsState, botId);\n    const maxUsage = botItem.maxUsage;\n    const bot = {\n      ...botItem,\n      returns: getReturns(maxUsage, deals30daysForBot),\n    };\n    botsDispatch(setBot(botItem.id, bot));\n  } catch {\n    const bot = { ...botItem, returns: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when getting returns for bot ${botItem.name}`,\n    });\n  }\n}\n","import { IDeal } from \"../../interfaces/Deal\";\n\ninterface IGetDealsList {\n  type: \"getDealsList\";\n  payload: { deals: Array<IDeal>; botId: number; periodInDays: number };\n}\n\nexport const getDealsList = (\n  deals: Array<IDeal>,\n  botId: number,\n  periodInDays: number\n): IGetDealsList => ({\n  type: \"getDealsList\",\n  payload: { deals, botId, periodInDays },\n});\n\ninterface IGetActiveDealsList {\n  type: \"getActiveDealsList\";\n  payload: { activeDeals: Array<IDeal>; botId: number };\n}\nexport const getActiveDealsList = (\n  activeDeals: Array<IDeal>,\n  botId: number\n): IGetActiveDealsList => ({\n  type: \"getActiveDealsList\",\n  payload: { activeDeals, botId },\n});\n\ninterface ISetOffset {\n  type: \"setOffset\";\n  payload: { botId: number; offset: number };\n}\n\nexport const setOffset = (botId: number, offset: number): ISetOffset => ({\n  type: \"setOffset\",\n  payload: { botId, offset },\n});\n\ninterface IResetDeals {\n  type: \"resetDeals\";\n  payload: { botId: number };\n}\n\nexport const resetDeals = (botId: number): IResetDeals => ({\n  type: \"resetDeals\",\n  payload: { botId },\n});\ninterface IResetActiveDeals {\n  type: \"resetActiveDeals\";\n  payload: { botId: number };\n}\n\nexport const resetActiveDeals = (botId: number): IResetActiveDeals => ({\n  type: \"resetActiveDeals\",\n  payload: { botId },\n});\n\nexport type DealsAction =\n  | IGetDealsList\n  | ISetOffset\n  | IResetDeals\n  | IGetActiveDealsList\n  | IResetActiveDeals;\n","import { getDeals } from \"../../utils/ApiUtils\";\nimport { getAllDealsForOneBot } from \"../../utils/DealsUtils\";\nimport {\n  getActiveDealsList,\n  getDealsList,\n  resetActiveDeals,\n  resetDeals,\n  setOffset,\n} from \"./DealsActions\";\nimport { IDealsState } from \"./DealsReducer\";\nimport {\n  INFINITY_IN_DAYS,\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n} from \"./DealsSelectors\";\n\nexport async function fetchDealsForBotFor30Days(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    if (is30daysDealsLoaded(dealsState, botId)) {\n      return;\n    }\n    const data = await getAllDealsForOneBot(botId, 30);\n    dealsDispatch(getDealsList(data, botId, 30));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport async function fetchAllDealsForBot(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) {\n  try {\n    if (isAllDealsLoaded(dealsState, botId) && !reset) {\n      return;\n    }\n\n    if (reset) {\n      dealsDispatch(resetDeals(botId));\n    }\n\n    await fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botId\n    );\n    const data = await getAllDealsForOneBot(\n      botId,\n      INFINITY_IN_DAYS,\n      (offset: number) => {\n        dealsDispatch(setOffset(botId, offset));\n      }\n    );\n    dealsDispatch(getDealsList(data, botId, INFINITY_IN_DAYS));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport const getAllActiveDeals = async (\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) => {\n  try {\n    if (reset) {\n      dealsDispatch(resetActiveDeals(botId));\n    }\n    const data = await getDeals(botId, 0, 1000, \"active\", \"created_at\");\n    dealsDispatch(getActiveDealsList(data, botId));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching active deals for bot ${botId}`,\n      });\n    }\n    return Promise.resolve([]);\n  }\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Bar, Doughnut } from \"react-chartjs-2\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  DealsCountBarChartOptions,\n  HistogramChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  dealsStatusesCounts,\n  getDealsCountPerDay,\n  getDealsDurationHistogramData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsMainCharts.css\";\n\nexport const DCABotDetailsMainCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n}) => {\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n  const [countsValues, setCountsValues] = useState<any>([[], []]);\n  const [dealsDurationHistogramData, setDealsDurationHistogramData] =\n    useState<any>([]);\n\n  const dealsStatusData = dealsStatusesCounts(deals);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  useEffect(() => {\n    setCountsValues(getDealsCountPerDay(filteredDeals, dateLabelsDays));\n    setDealsDurationHistogramData(getDealsDurationHistogramData(filteredDeals));\n  }, [filteredDeals]);\n\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            DealsCountBarChartOptions(\n              \"Finished deals per day\",\n              dateLabelsDays.length < 70\n            ) as any\n          }\n          data={{\n            labels: dateLabelsDays,\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: countsValues,\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Doughnut\n          options={\n            {\n              aspectRatio: 1.7,\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"Finished deals by Status\",\n                },\n                tooltip: {\n                  callbacks: {\n                    label: (tooltipItem: any) => {\n                      const dataset = tooltipItem.dataset;\n                      const total = dataset.data.reduce(function (\n                        previousValue: any,\n                        currentValue: any\n                      ) {\n                        return currentValue\n                          ? previousValue + currentValue\n                          : previousValue;\n                      },\n                      0);\n                      const currentValue = dataset.data[tooltipItem.dataIndex];\n                      const percentage = Math.floor(\n                        (currentValue / total) * 100 + 0.5\n                      );\n                      const label = tooltipItem.label;\n\n                      return `${label}: ${currentValue} (${percentage}%)`;\n                    },\n                  },\n                },\n                legend: {\n                  labels: {\n                    filter: (legendItem: any, data: any) => {\n                      return data.datasets[0].data[legendItem.index];\n                    },\n                  },\n                },\n              },\n            } as any\n          }\n          width={300}\n          data={{\n            labels: dealsStatusData[0] as any,\n            datasets: [\n              {\n                data: dealsStatusData[1],\n                backgroundColor: [\n                  \"rgba(54, 162, 235, 0.2)\",\n                  \"rgba(255, 99, 132, 0.2)\",\n                  \"rgba(255, 206, 86, 0.2)\",\n                  \"rgba(75, 192, 192, 0.2)\",\n                  \"rgba(153, 102, 255, 0.2)\",\n                  \"rgba(255, 159, 64, 0.2)\",\n                  \"rgba(39, 47, 148, 0.2)\",\n                ],\n                borderColor: [\n                  \"rgba(54, 162, 235, 1)\",\n                  \"rgba(255, 99, 132, 1)\",\n                  \"rgba(255, 206, 86, 1)\",\n                  \"rgba(75, 192, 192, 1)\",\n                  \"rgba(153, 102, 255, 1)\",\n                  \"rgba(255, 159, 64, 1)\",\n                  \"rgba(39, 47, 148, 1)\",\n                ],\n                borderWidth: 1,\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            HistogramChartOptions(\n              \"Finished deals duration histogram, hours\",\n              \"Duration, hours\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsDurationHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsDurationHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneBotCurrencyLeaderbord,\n  getOneBotAccumulativeProfitsChartData,\n  getOneBotProfitsChartData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsCharts.css\";\n\nexport const DCABotDetailsProfitsCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n\n  useEffect(() => {\n    setAccumulativeProfitsData(getOneBotAccumulativeProfitsChartData(deals));\n    setProfitsData(getOneBotProfitsChartData(deals));\n    setPairsLeaderbordData(getOneBotCurrencyLeaderbord(deals));\n  }, [deals]);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={AccumulativeChartOptions(\"Accumulative Profit, $\") as any}\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: \"Accumulative Profit, $\",\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={ProfitChartOptions(\"Daily Profit, $\") as any}\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      {bot.type !== \"Bot::SingleBot\" && (\n        <div className=\"DCABotDetailsChartContainer\">\n          <Bar\n            options={\n              LeaderbordChartOptions(\n                \"Pairs leaderboard by profit\",\n                pairsLeaderbordData[0]\n              ) as any\n            }\n            data={{\n              labels: pairsLeaderbordData[0],\n              datasets: [\n                {\n                  label: \"Profit, $\",\n                  data: pairsLeaderbordData[1],\n                  borderColor: \"rgb(53, 162, 235)\",\n                  backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                },\n              ],\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  NumberHistogramChartOptions,\n  LeaderbordChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getDealsSOHistogramData,\n  getOneBotSOLeaderbord,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsSafetyCharts.css\";\n\nexport const DCABotDetailsSafetyCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n  const [dealsSOHistogramData, setDealsSOHistogramData] = useState<any>([]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n  const [antiPairsLeaderbordData, setAntiPairsLeaderbordData] = useState<any>([\n    [],\n    [],\n  ]);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  useEffect(() => {\n    setDealsSOHistogramData(getDealsSOHistogramData(filteredDeals));\n    setPairsLeaderbordData(getOneBotSOLeaderbord(filteredDeals));\n    setAntiPairsLeaderbordData(getOneBotSOLeaderbord(filteredDeals, \"asc\"));\n  }, [filteredDeals]);\n\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs with least SO completed\",\n              antiPairsLeaderbordData[0]\n            ) as any\n          }\n          data={{\n            labels: antiPairsLeaderbordData[0],\n            datasets: [\n              {\n                label: \"Average completed safety orders\",\n                data: antiPairsLeaderbordData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs with most SO completed\",\n              pairsLeaderbordData[0]\n            ) as any\n          }\n          data={{\n            labels: pairsLeaderbordData[0],\n            datasets: [\n              {\n                label: \"Average completed safety orders\",\n                data: pairsLeaderbordData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            NumberHistogramChartOptions(\n              \"Histogram of completed SO per deal\",\n              \"Number of completed safety orders\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsSOHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsSOHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  getDealAgeInDaysSinceOpened,\n  getLastNDays,\n} from \"../../../../utils/DealsUtils\";\nimport { DCABotDetailsMainCharts } from \"../DCABotDetailsMain/DCABotDetailsMainCharts\";\nimport { DCABotDetailsProfitsCharts } from \"../DCABotDetailsProfits/DCABotDetailsProfitsCharts\";\nimport { DCABotDetailsSafetyCharts } from \"../DCABotDetailsSafety/DCABotDetailsSafetyCharts\";\nimport \"./DCABotDetailsCharts.css\";\n\nexport const DCABotDetailsCharts = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  timeRangeValue,\n}: {\n  account: any;\n  bot: IBot;\n  timeRangeValue: string;\n  infoKey: string;\n  deals: IDeal[];\n}) => {\n  const [dateLabelsDays, setDateLabelsDays] = useState<string[]>([]);\n  useEffect(() => {\n    if (deals) {\n      if (timeRangeValue === \"allTime\") {\n        const oldestDealAgeInDaysSinceOpened =\n          deals.length > 0\n            ? Math.ceil(getDealAgeInDaysSinceOpened(deals.slice(-1).pop()))\n            : 0;\n        setDateLabelsDays(\n          getLastNDays(\n            oldestDealAgeInDaysSinceOpened > 30\n              ? oldestDealAgeInDaysSinceOpened\n              : 30\n          )\n        );\n      } else if (timeRangeValue === \"30d\") {\n        setDateLabelsDays(getLastNDays(30));\n      }\n    }\n  }, [deals]);\n  return (\n    <>\n      {deals && dateLabelsDays && bot && account && (\n        <div className=\"DCABotDetailsCharts\">\n          {infoKey === \"main\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"settings\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"profits\" && (\n            <DCABotDetailsProfitsCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n          {infoKey === \"safeties\" && (\n            <DCABotDetailsSafetyCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\n\nimport \"./DCABotDetailsDealsTable.css\";\nimport { Badge, Modal, Pagination, Table, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport { getDeal } from \"../../../../utils/ApiUtils\";\n\nconst badgeVariant = {\n  Cancelled: \"secondary\",\n  StopLoss: \"danger\",\n  Failed: \"warning\",\n  Completed: \"success\",\n  \"Closed at Market Price\": \"dark\",\n  Liquidated: \"dark\",\n  Switched: \"secondary\",\n};\n\nexport const DCABotDetailsDealsTable = ({\n  bot,\n  deals,\n  dealStateSwitcher,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  dealStateSwitcher: string;\n}) => {\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"ID\",\n          accessor: \"id\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Pair\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.pair.split(\"_\").reverse().join(\"/\");\n          },\n          id: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: \"localized_status\",\n          Cell: ({ cell: { value } }: any) => (\n            // @ts-ignore\n            <Badge style={{ fontSize: \"12px\" }} bg={badgeVariant[value]}>\n              {value}\n            </Badge>\n          ),\n          disableSortBy: true,\n        },\n        {\n          Header: \"Start\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.created_at);\n          },\n          id: \"created_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"End\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.closed_at);\n          },\n          id: \"closed_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => {\n            return dealStateSwitcher === \"finished\" ? (\n              <>\n                <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n                <div>{moment(value).format(\"HH:mm\")}</div>\n              </>\n            ) : (\n              <div />\n            );\n          },\n        },\n        {\n          Header: \"Duration\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            let start = moment.utc(originalRow.created_at);\n            let end = originalRow.closed_at\n              ? moment.utc(originalRow.closed_at)\n              : moment.utc();\n            return end.diff(start);\n          },\n          id: \"duration\",\n          Cell: ({ cell: { value } }: any) => {\n            const duration = moment.duration(value);\n            const days = Math.floor(duration.asDays());\n            const daysFormatted = days ? `${days}d ` : \"\";\n\n            //Get Hours\n            const hours = duration.hours();\n            const hoursFormatted = `${hours}h `;\n\n            //Get Minutes\n            const minutes = duration.minutes();\n            const minutesFormatted = `${minutes}m`;\n\n            return `${daysFormatted} ${hoursFormatted} ${minutesFormatted}`;\n          },\n        },\n        {\n          Header: \"Avg. entry price\",\n          id: \"bought_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.bought_average_price\n              : originalRow.sold_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header:\n            dealStateSwitcher === \"finished\" ? \"Close price\" : \"Current price\",\n          id: \"sold_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            dealStateSwitcher === \"finished\"\n              ? originalRow.strategy === \"long\"\n                ? originalRow.sold_average_price\n                : originalRow.bought_average_price\n              : originalRow.current_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n            const amount =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_amount,\n                    currency: baseCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_amount,\n                    currency: baseCurrency,\n                  });\n            const volume =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_volume,\n                    currency: quoteCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_volume,\n                    currency: quoteCurrency,\n                  });\n            return `${amount} ${baseCurrency}!${volume} ${quoteCurrency}`;\n          },\n          id: \"volume\",\n          Cell: ({ cell: { value } }: any) => {\n            const values = value.split(\"!\");\n            return (\n              <>\n                <div>{values[0]}</div>\n                <div>{values[1]}</div>\n              </>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Filled SO\",\n          id: \"completed_safety_orders_count\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${originalRow.completed_safety_orders_count}${\n              originalRow.completed_manual_safety_orders_count\n                ? ` (+${originalRow.completed_manual_safety_orders_count})`\n                : \"\"\n            }`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, %\",\n          accessor:\n            dealStateSwitcher === \"finished\"\n              ? \"final_profit_percentage\"\n              : \"actual_profit_percentage\",\n          Cell: ({ cell: { value } }: any) => `${value}%`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, $\",\n          accessor:\n            dealStateSwitcher === \"finished\"\n              ? \"usd_final_profit\"\n              : \"actual_usd_profit\",\n          sortType: (a: any, b: any) => {\n            a =\n              dealStateSwitcher === \"finished\"\n                ? Number(a.original.usd_final_profit)\n                : Number(a.original.actual_usd_profit);\n            b =\n              dealStateSwitcher === \"finished\"\n                ? Number(b.original.usd_final_profit)\n                : Number(b.original.actual_usd_profit);\n            return a > b ? 1 : -1;\n          },\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value);\n            return (\n              <Badge\n                style={{ fontSize: \"13px\" }}\n                bg={numberValue >= 0 ? \"success\" : \"danger\"}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency: \"USD\",\n                },\n                \"always\"\n              )} $`}</Badge>\n            );\n          },\n        },\n        {\n          Header: \"Profit in Base\",\n          id: \"profitBase\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.bought_amount) -\n              parseFloat(originalRow.sold_amount)\n            }!${originalRow.pair.split(\"_\")[1]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return dealStateSwitcher === \"finished\" ? (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            ) : (\n              \"\"\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit in Quote\",\n          id: \"profitQuote\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.sold_volume) -\n              parseFloat(originalRow.bought_volume)\n            }!${originalRow.pair.split(\"_\")[0]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return dealStateSwitcher === \"finished\" ? (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            ) : (\n              \"\"\n            );\n          },\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data: deals,\n      disableSortRemove: true,\n      autoResetPage: true,\n      autoResetSortBy: false,\n      initialState: {\n        pageSize: 50,\n        sortBy:\n          dealStateSwitcher === \"finished\"\n            ? [{ id: \"closed_at\", desc: true }]\n            : [{ id: \"created_at\", desc: true }],\n      },\n    },\n    useSortBy,\n    usePagination\n  );\n  const [modalIsOpen, setModalIsOpen] = React.useState(false);\n  const [selectedDeal, setSelectedDeal] = React.useState(null as any);\n\n  return (\n    <div className=\"DCABotDetailsDealsTable\">\n      <div className=\"DCABotDetailsDealsTableContainer\">\n        <DealModal\n          modalIsOpen={modalIsOpen}\n          setModalIsOpen={setModalIsOpen}\n          dealId={selectedDeal}\n        />\n        {pageCount > 1 && (\n          <TablePagination\n            pageIndex={pageIndex}\n            pageCount={pageCount}\n            gotoPage={gotoPage}\n            nextPage={nextPage}\n            previousPage={previousPage}\n          />\n        )}\n        <Table striped bordered {...getTableProps()} hover>\n          <thead style={{ fontSize: \"14px\" }}>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    <div style={{ display: \"flex\", width: \"100%\" }}>\n                      {column.render(\"Header\")}\n                      <div\n                        style={{\n                          marginLeft: \"auto\",\n                          cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                        }}\n                      >\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? \" 🔽\"\n                            : \" 🔼\"\n                          : \"   \"}\n                      </div>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <tr\n                  {...row.getRowProps()}\n                  onClick={() => {\n                    setSelectedDeal(row.original.id);\n                    setModalIsOpen(true);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </div>\n    </div>\n  );\n};\n\nconst TablePagination = ({\n  pageIndex,\n  pageCount,\n  gotoPage,\n  nextPage,\n  previousPage,\n}: any) => {\n  const range = (start: number, end: number) =>\n    Array(end - start + 1)\n      .fill(0)\n      .map((_, idx) => start + idx);\n\n  const renderPaginationNumberItem = (page: any, pageIndex: any) => (\n    <Pagination.Item\n      active={page === pageIndex}\n      onClick={() => {\n        gotoPage(page);\n      }}\n      key={page}\n    >\n      {page + 1}\n    </Pagination.Item>\n  );\n\n  const renderPaginationBeginning = () => (\n    <>\n      <Pagination.First\n        onClick={() => {\n          gotoPage(0);\n        }}\n      />\n      <Pagination.Prev\n        onClick={() => {\n          previousPage();\n        }}\n      />\n      {pageIndex - 2 < 4 &&\n        renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n      {pageIndex - 1 < 4 &&\n        renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n    </>\n  );\n  const renderPaginationEnd = () => (\n    <>\n      <Pagination.Next\n        onClick={() => {\n          nextPage();\n        }}\n      />\n      <Pagination.Last\n        onClick={() => {\n          gotoPage(pageCount - 1);\n        }}\n      />\n    </>\n  );\n\n  return (\n    <>\n      {pageCount <= 16 && (\n        <Pagination>\n          {range(0, pageCount - 1).map((page) =>\n            renderPaginationNumberItem(page, pageIndex)\n          )}\n        </Pagination>\n      )}\n      {pageCount > 16 && (\n        <Pagination>\n          {pageIndex < 7 && (\n            <>\n              {range(0, 6).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n              {renderPaginationEnd()}\n            </>\n          )}\n\n          {pageIndex >= 7 && pageIndex <= pageCount - 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n              {renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n              <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\n              {renderPaginationNumberItem(pageIndex + 1, pageIndex)}\n              {renderPaginationNumberItem(pageIndex + 2, pageIndex)}\n              {renderPaginationEnd()}\n            </>\n          )}\n          {pageCount - pageIndex < 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {range(pageCount - 7, pageCount - 1).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n            </>\n          )}\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nconst DealModal = ({ modalIsOpen, setModalIsOpen, dealId }: any) => {\n  const [deal, setDeal] = React.useState(null as any);\n\n  useEffect(() => {\n    if (dealId) {\n      getDeal(dealId).then((dl) => {\n        setDeal(dl);\n      });\n    }\n  }, [dealId]);\n  return (\n    <>\n      {deal && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(false);\n          }}\n          scrollable\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{deal.id}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {deal.bot_events.length > 0 && (\n              <Table striped hover>\n                <thead>\n                  <tr>\n                    <th>Date/Time</th>\n                    <th>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {deal.bot_events.map((event: any) => (\n                    <tr key={event.created_at}>\n                      <td>\n                        {moment(event.created_at).format(\"D MMM, YYYY HH:mm\")}\n                      </td>\n                      <td>{event.message}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )}\n            {deal.bot_events.length === 0 && (\n              <blockquote className=\"blockquote mb-0\">\n                <p>\n                  “Nothing can last forever. There isn't any memory, no matter\n                  how intense, that doesn't fade out at last.”{\" \"}\n                </p>\n                <footer className=\"blockquote-footer\">Juan Rulfo</footer>\n              </blockquote>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                window.open(`https://3commas.io/deals/${dealId}`, \"_blank\");\n              }}\n            >\n              Open in 3commas\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./CurrencyIcon.css\";\n\nconst CurrencyIcon = ({ currency, size = 15 }: any) => {\n  const formattedCurrency =\n    currency.length > 5\n      ? currency\n          .replace(\"USDT\", \"\")\n          .replace(\"BUSD\", \"\")\n          .replace(\"-PERP\", \"\")\n          .replace(\"USD\", \"\")\n      : currency;\n\n  return (\n    <div\n      className=\"CurrencyIcon\"\n      style={{\n        width: size,\n        height: size,\n        borderRadius: size,\n        backgroundSize: size,\n        backgroundImage: `url(https://3commas.io/currency/icon/${formattedCurrency.toLowerCase()}.png)`,\n      }}\n    ></div>\n  );\n};\n\nexport default CurrencyIcon;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getFundsLocked } from \"../../../../utils/BotsUtils\";\nimport {\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport {\n  getFundsLockedAndTodaysProfit,\n  getMaxUsageEffect,\n  getReturnsEffect,\n} from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { useNavigate } from \"react-router-dom\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport moment from \"moment\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TV\",\n  buy_or_strong_buy: \"Buy\",\n  strong_buy: \"Strong Buy\",\n  sell_or_strong_sell: \"Sell\",\n  strong_sell: \"Strong Sell\",\n  rsi: \"RSI\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nexport const getBotsStrategyName = (\n  strategiesState: any,\n  botsStrategy: string\n) => {\n  if (botsStrategy in strategyMap) {\n    return strategyMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [statsLoaded, setStatsLoaded] = useState(false);\n\n  const navigate = useNavigate();\n\n  const { deals } = dealsState;\n\n  useEffect(() => {\n    getFundsLockedAndTodaysProfit(\n      botsDispatch,\n      botsState,\n      errorsDispatch,\n      botItem.id\n    ).then(() => {\n      setStatsLoaded(true);\n    });\n  }, [botItem]);\n\n  useEffect(() => {\n    if (statsLoaded) {\n      getMaxUsageEffect(\n        botsDispatch,\n        botsState,\n        errorsDispatch,\n        botItem.id,\n        account\n      ).then();\n    }\n  }, [account, botItem, statsLoaded]);\n\n  useEffect(() => {\n    if (\n      botItem &&\n      !(\"returns\" in botItem) &&\n      \"maxUsage\" in botItem &&\n      is30daysDealsLoaded(dealsState, botItem.id)\n    ) {\n      getReturnsEffect(\n        botsDispatch,\n        botsState,\n        dealsState,\n        errorsDispatch,\n        botItem.id\n      );\n    }\n  }, [deals, botItem]);\n\n  const getReturns = async () => {\n    setDealsLimiter(Math.random());\n    fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botItem.id\n    );\n  };\n\n  const age = differenceInDays(moment(), moment(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy =\n    botItem.strategy_list.length === 1\n      ? getBotsStrategyName(strategiesState, botItem.strategy_list[0].strategy)\n      : \"Combined\";\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet bot={botItem} />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={botItem.returns}\n              getReturns={getReturns}\n              maxUsage={botItem.maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>\n                  <div\n                    style={{\n                      display: \"flex\",\n                    }}\n                  >\n                    {\"market_icon\" in account && (\n                      <div\n                        className=\"BotMarketIcon\"\n                        style={{\n                          backgroundImage: `url(${account.market_icon})`,\n                        }}\n                      ></div>\n                    )}\n                    <a\n                      onClick={(e: any) => {\n                        e.preventDefault();\n                        navigate({\n                          pathname: `/accounts/${account.id}`,\n                          search: window.location.search,\n                        });\n                      }}\n                      href=\"#\"\n                    >\n                      {account.name}\n                    </a>\n                  </div>\n                </td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>{formatter.format(botItem.todayUsdProfit)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(botItem)\n                )}/${formatter.format(botItem.maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n          <div className=\"BotPreviewButtons\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                navigate({\n                  pathname: `/${botItem.id}`,\n                  search: window.location.search,\n                });\n              }}\n            >\n              {`View`}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ bot }: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  const isMulti = bot.type === \"Bot::MultiBot\";\n  return (\n    <div className=\"IconsSetContainer\">\n      <div className=\"BotQuoteIconContainer\">\n        <CurrencyIcon currency={quoteCurrency} size={60} />\n      </div>\n      {isMulti ? (\n        <div className=\"BotBaseIconContainer\">\n          <img src={`/Multicoin_white.png`} alt=\"logo\" className=\"RobotsIcon\" />\n        </div>\n      ) : (\n        <div className=\"BotBaseIconContainer\">\n          <CurrencyIcon currency={baseCurrency} size={60} />\n        </div>\n      )}\n    </div>\n  );\n};\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, getReturns }: any) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const returnsCalculated = returns || returns === 0;\n\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      delay={{ show: 100, hide: 200 }}\n      overlay={<Tooltip>30 days profit / Max usage</Tooltip>}\n    >\n      <div className=\"BotReturnsContainer\">\n        {returnsCalculated && (\n          <div\n            className=\"BotReturnsValue\"\n            style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${formatter.format(returns || 0)}`}\n          </div>\n        )}\n        <div className=\"BotReturnsLabel\">Returns (30d)</div>\n        {!returnsCalculated && (\n          <Button\n            onClick={() => {\n              getReturns();\n            }}\n            variant=\"link\"\n            size=\"sm\"\n            active\n          >\n            Calculate\n          </Button>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  getCurrencyFormat,\n  getFundsLockedInBotCurrency,\n  getMaxUsageInBotCurrency,\n  getReservedFundsInBotCurrency,\n} from \"../../../../utils/BotsUtils\";\nimport { getAverageDealDuration } from \"../../../../utils/DealsUtils\";\nimport { getBotsStrategyName } from \"../../BotsList/BotPreview/BotPreview\";\nimport \"./DCABotDetailsMainInfo.css\";\n\nexport const DCABotDetailsMainInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const { strategiesState } = useContext(StrategiesContext);\n  const { dealsState } = useContext(DealsContext);\n  const { activeDeals } = dealsState;\n\n  const navigate = useNavigate();\n\n  const [fundsLocked, setFundsLocked] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [fundsLockedShare, setFundsLockedShare] = useState(0);\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n  const [avgDealDuration, setAvgDealDuration] = useState<any>(0);\n\n  const [maxUsage, setMaxUsage] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [reservedFunds, setReservedFunds] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n  });\n\n  const botPairs =\n    bot.pairs.length === 1\n      ? bot.pairs[0].split(\"_\").reverse().join(\"/\")\n      : `${bot.pairs.length} pairs`;\n  const botMarket =\n    bot.pairs.length === 1 ? \"\" : `${bot.pairs[0].split(\"_\")[0]} market`;\n\n  const startCondition = bot.strategy_list.map((strategy: any) => (\n    <div key={`${Math.random()}`}>{`${getBotsStrategyName(\n      strategiesState,\n      strategy.strategy\n    )}${\n      strategy.options.type\n        ? `, ${getBotsStrategyName(strategiesState, strategy.options.type)}`\n        : ``\n    }${strategy.options.percent ? `, ${strategy.options.percent}%` : ``}${\n      strategy.options.time ? `, ${strategy.options.time}` : ``\n    }${strategy.options.points ? `, ${strategy.options.points}` : ``}`}</div>\n  ));\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      getMaxUsageInBotCurrency(bot, account).then((mxUsg) => {\n        setMaxUsage(mxUsg);\n      });\n    }\n  }, [bot, account]);\n\n  useEffect(() => {\n    if (bot && bot.id && bot.id in activeDeals) {\n      setReservedFunds(\n        getReservedFundsInBotCurrency(activeDeals[bot.id].list, bot, account)\n      );\n      setFundsLocked(\n        getFundsLockedInBotCurrency(activeDeals[bot.id].list, bot, account)\n      );\n    }\n  }, [activeDeals, bot]);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  useEffect(() => {\n    setAvgDealDuration(getAverageDealDuration(filteredDeals));\n  }, [filteredDeals]);\n\n  useEffect(() => {\n    if (maxUsage.value && fundsLocked.value) {\n      setFundsLockedShare(fundsLocked.value / maxUsage.value);\n    }\n  }, [maxUsage, fundsLocked]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Account</div>\n        <div className=\"BotInfoTableRow\">\n          <div style={{ display: \"flex\" }}>\n            {\"market_icon\" in account && (\n              <div\n                className=\"BotMarketIcon\"\n                style={{\n                  backgroundImage: `url(${account.market_icon})`,\n                }}\n              ></div>\n            )}\n            <a\n              onClick={(e: any) => {\n                e.preventDefault();\n                navigate({\n                  pathname: `/accounts/${account.id}`,\n                  search: window.location.search,\n                });\n              }}\n              href=\"#\"\n            >\n              {account.name}\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Bot pairs</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{botPairs}</div>\n          <div>{botMarket}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Deal start condition</div>\n        <div className=\"BotInfoTableRow\">{startCondition}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Active deals/Max</div>\n        <div className=\"BotInfoTableRow\">{`${bot.active_deals_count}/${bot.max_active_deals}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Funds used</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{`${getCurrencyFormat(fundsLocked)} ${\n            fundsLocked.currency\n          }`}</div>\n          <div style={{ fontSize: \"10px\" }}>{`${percentFormatter.format(\n            fundsLockedShare\n          )} of max usage`}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max usage</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(maxUsage)} ${\n          maxUsage.currency\n        }`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Reserved funds</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(\n          reservedFunds\n        )} ${maxUsage.currency}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total finished deals</div>\n        <div className=\"BotInfoTableRow\">{filteredDeals.length}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Avg deal duration</div>\n        <div className=\"BotInfoTableRow\">{`${avgDealDuration} hrs`}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport { getCurrencyFormat, getReturns } from \"../../../../utils/BotsUtils\";\nimport {\n  getAverageDailyProfit,\n  getAverageProfitFromDeal,\n  getAverageTp,\n  getTotalProfitUsd,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsInfo.css\";\n\nexport const DCABotDetailsProfitsInfo = ({\n  account,\n  bot,\n  deals,\n  fromFilter,\n  toFilter,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    signDisplay: \"always\",\n  });\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const [averageTp, setAverageTp] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageProfitFromDeal, setAverageProfitFromDeal] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageDailyProfit, setAverageDailyProfit] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [returns, setReturns] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [totalProfitUsd, setTotalProfitUsd] = useState(0);\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n    setAverageDailyProfit(\n      getAverageDailyProfit(bot.created_at, deals, fromFilter, toFilter)\n    );\n    if (bot.maxUsage) {\n      setReturns({ value: getReturns(bot.maxUsage, deals), currency: \"%\" });\n    }\n    setTotalProfitUsd(getTotalProfitUsd(deals));\n  }, [deals, bot]);\n\n  useEffect(() => {\n    setAverageTp(getAverageTp(filteredDeals));\n    setAverageProfitFromDeal(getAverageProfitFromDeal(filteredDeals));\n  }, [filteredDeals]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Today's profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            (bot.todayUsdProfit || 0) < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(bot.todayUsdProfit || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            totalProfitUsd < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(totalProfitUsd)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Current uPnL</div>\n        <div\n          className={`BotInfoTableRow ${\n            parseFloat(bot.active_deals_usd_profit) < 0\n              ? \"showRed\"\n              : \"showGreen\"\n          }`}\n        >\n          {formatter.format(parseFloat(bot.active_deals_usd_profit))}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average TP, %</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageTp.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {`${getCurrencyFormat(averageTp)}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average profit from deal</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageProfitFromDeal.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageProfitFromDeal.value || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average daily profit</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageDailyProfit.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageDailyProfit.value)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Returns</div>\n        <div\n          className={`BotInfoTableRow ${\n            returns.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {percentFormatter.format(returns.value)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport {\n  getBaseOrderSize,\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSettingsInfo.css\";\n\nexport const DCABotDetailsSettingsInfo = ({\n  account,\n  bot,\n}: {\n  account: any;\n  bot: IBot;\n}) => {\n  const [baseOrderSize, setBaseOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setBaseOrderSize(getBaseOrderSize(bot, account));\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n    }\n  }, [bot, account]);\n\n  const leverage = bot.leverage_custom_value\n    ? parseInt(bot.leverage_custom_value)\n    : \"\";\n  const leverageType =\n    bot.leverage_type !== \"not_specified\" ? bot.leverage_type : \"\";\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Profit currency</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.profit_currency === \"quote_currency\" ? \"Quote\" : \"Base\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Take profit (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            {`${getCurrencyFormat({\n              value: parseFloat(bot.take_profit),\n              currency: \"%\",\n            })}%`}\n          </div>\n          <div>\n            {bot.take_profit_type === \"total\"\n              ? \"(from total volume)\"\n              : \"(from base volume)\"}\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Trailing</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.trailing_enabled &&\n            `${getCurrencyFormat({\n              value: parseFloat(bot.trailing_deviation),\n              currency: \"%\",\n            })}%`}\n          {!bot.trailing_enabled && \"OFF\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Stop loss (timeout)</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat({\n          value: parseFloat(bot.stop_loss_percentage),\n          currency: \"%\",\n        })}% (${bot.stop_loss_timeout_in_seconds} s)`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Base order size (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            <div>{`${getCurrencyFormat(baseOrderSize)} ${\n              baseOrderSize.currency\n            }${\n              baseOrderSize.additionalCurrency\n                ? ` (${baseOrderSize.additionalCurrency})`\n                : \"\"\n            }`}</div>\n            <div>{`(${bot.start_order_type})`}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Leverage (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{leverage || \"0\"}</div>\n          <div>{leverageType}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSafetyInfo.css\";\n\nconst calculateMaxPriceDeviation = (\n  priceDeviation: any,\n  maxSafetyOrders: any,\n  stepScale: any\n) => {\n  return [...Array(maxSafetyOrders)].reduce(\n    (previousValue, currentValue, index) => {\n      return previousValue + priceDeviation * stepScale ** index;\n    },\n    0\n  );\n};\n\nconst DCABotDetailsSafetyInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [maxPriceDeviation, setMaxPriceDeviation] = useState(0);\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n      setMaxPriceDeviation(\n        calculateMaxPriceDeviation(\n          parseFloat(bot.safety_order_step_percentage),\n          bot.max_safety_orders,\n          parseFloat(bot.martingale_step_coefficient)\n        )\n      );\n    }\n  }, [bot, account]);\n\n  const [filteredDeals, setFilteredDeals] = useState<IDeal[]>([]);\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  const [avgSOCompleted, setAvgSOCompleted] = useState(0);\n  const [nonSOCompleted, setNonSOCompleted] = useState(0);\n  const [allSOCompleted, setAllSOCompleted] = useState(0);\n\n  useEffect(() => {\n    setAvgSOCompleted(\n      _.mean(\n        filteredDeals.map((deal) => {\n          return deal.completed_safety_orders_count;\n        })\n      )\n    );\n    setNonSOCompleted(\n      filteredDeals.filter((deal) => {\n        return deal.completed_safety_orders_count === 0;\n      }).length\n    );\n    setAllSOCompleted(\n      filteredDeals.filter((deal) => {\n        return deal.completed_safety_orders_count === bot.max_safety_orders;\n      }).length\n    );\n  }, [filteredDeals]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max safety trades (active)</div>\n        <div className=\"BotInfoTableRow\">{`${bot.max_safety_orders} (${bot.active_safety_orders_count})`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Price deviation to open SO</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: parseFloat(bot.safety_order_step_percentage),\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO size</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat(safetyOrderSize)} ${safetyOrderSize.currency}${\n            safetyOrderSize.additionalCurrency\n              ? ` (${safetyOrderSize.additionalCurrency})`\n              : \"\"\n          }`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO volume scale</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.martingale_volume_coefficient}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO step scale</div>\n        <div className=\"BotInfoTableRow\">{bot.martingale_step_coefficient}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max price deviation</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: maxPriceDeviation,\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average # SO completed</div>\n        <div className=\"BotInfoTableRow\">\n          {filteredDeals.length > 0 &&\n            getCurrencyFormat({\n              value: avgSOCompleted,\n              currency: \"%\",\n            })}\n        </div>\n      </div>\n\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">None SO completed</div>\n        <div className=\"BotInfoTableRow\">\n          {filteredDeals.length > 0 && (\n            <>\n              <div>{`${nonSOCompleted} deals`}</div>\n              <div>\n                {`${getCurrencyFormat({\n                  value: (nonSOCompleted / filteredDeals.length) * 100,\n                  currency: \"%\",\n                })}%`}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">All SO completed</div>\n        <div className=\"BotInfoTableRow\">\n          {filteredDeals.length > 0 && (\n            <>\n              <div>{`${allSOCompleted} deals`}</div>\n              <div>\n                {`${getCurrencyFormat({\n                  value: (allSOCompleted / filteredDeals.length) * 100,\n                  currency: \"%\",\n                })}%`}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DCABotDetailsSafetyInfo;\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { BotInfo, IconsSet } from \"../../BotsList/BotPreview/BotPreview\";\nimport { DCABotDetailsMainInfo } from \"../DCABotDetailsMain/DCABotDetailsMainInfo\";\nimport { DCABotDetailsProfitsInfo } from \"../DCABotDetailsProfits/DCABotDetailsProfitsInfo\";\nimport { DCABotDetailsSettingsInfo } from \"../DCABotDetailsSettings/DCABotDetailsSettingsInfo\";\nimport moment from \"moment\";\nimport \"./DCABotDetailsInfo.css\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\nimport DCABotDetailsSafetyInfo from \"../DCABotDetailsSafety/DCABotDetailsSafetyInfo\";\n\nexport const DCABotDetailsInfo = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  setInfoKey,\n  fromFilter,\n  toFilter,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  account: any;\n  infoKey: string;\n  setInfoKey: any;\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const age = differenceInDays(moment(), moment(bot.created_at));\n  return (\n    <div className=\"DCABotDetailsInfo\">\n      <div className=\"DCABotDetailsInfoLogo\">\n        <IconsSet bot={bot}></IconsSet>\n        <BotInfo\n          strategy={bot.strategy}\n          age={age}\n          is_enabled={bot.is_enabled}\n        />\n      </div>\n      <div className=\"DCABotDetailsInfoTable\">\n        <Tabs activeKey={infoKey} onSelect={(k) => setInfoKey(k)}>\n          <Tab eventKey=\"main\" title=\"Main\" tabClassName=\"InfoTab\">\n            <DCABotDetailsMainInfo account={account} bot={bot} deals={deals} />\n          </Tab>\n          <Tab eventKey=\"settings\" title=\"Settings\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSettingsInfo account={account} bot={bot} />\n          </Tab>\n          <Tab eventKey=\"profits\" title=\"Profits\" tabClassName=\"InfoTab\">\n            <DCABotDetailsProfitsInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n              fromFilter={fromFilter}\n              toFilter={toFilter}\n            />\n          </Tab>\n          <Tab eventKey=\"safeties\" title=\"Safeties\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSafetyInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n            />\n          </Tab>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n","import moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  ProgressBar,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  AccountsContext,\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n} from \"../../../App\";\nimport { IBot } from \"../../../interfaces/Bot\";\nimport { IDeal } from \"../../../interfaces/Deal\";\nimport { fetchBot } from \"../../../state/bots/BotsEffects\";\nimport {\n  fetchAllDealsForBot,\n  getAllActiveDeals,\n} from \"../../../state/deals/DealsEffects\";\nimport {\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n  selectAllDeals,\n  selectAllDealsWithin30Days,\n} from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\nimport \"./DCABotDetails.css\";\nimport { DCABotDetailsCharts } from \"./DCABotDetailsCharts/DCABotDetailsCharts\";\nimport { DCABotDetailsDealsTable } from \"./DCABotDetailsDealsTable/DCABotDetailsDealsTable\";\nimport { DCABotDetailsInfo } from \"./DCABotDetailsInfo/DCABotDetailsInfo\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst statusFilterOptions: any = [\n  { value: \"all\", label: \"All\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"StopLoss\", label: \"StopLoss\" },\n  { value: \"Failed\", label: \"Failed\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Closed at Market Price\", label: \"Closed at Market Price\" },\n  { value: \"Liquidated\", label: \"Liquidated\" },\n  { value: \"Switched\", label: \"Switched\" },\n];\n\nconst filterByStatus = (deals: IDeal[], status: string) => {\n  return status === \"all\"\n    ? deals\n    : deals.filter((deal) => deal.localized_status === status);\n};\n\nconst filterByPair = (deals: IDeal[], pair: string) => {\n  return pair === \"all\" ? deals : deals.filter((deal) => deal.pair === pair);\n};\n\nconst filterFrom = (deals: IDeal[], dateFrom: any) => {\n  return !dateFrom ||\n    moment(\"01-04-2018\", \"MM-DD-YYYY\").isAfter(dateFrom, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateFrom, \"day\") ||\n          moment(deal.closed_at).isAfter(dateFrom)\n      );\n};\n\nconst filterTo = (deals: IDeal[], dateTo: any) => {\n  return !dateTo || moment().isSame(dateTo, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateTo, \"day\") ||\n          moment(deal.closed_at).isBefore(dateTo)\n      );\n};\n\nexport const DCABotDetails = () => {\n  let params = useParams();\n  let navigate = useNavigate();\n\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { activeDeals } = dealsState;\n  const {\n    botsState: { bots },\n  } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n  const [botId, setBotId] = useState(NaN);\n  const previousBotId = usePrevious(botId);\n  const [bot, setBot] = useState<IBot | null>(null);\n  const [botsDeals, setBotsDeals] = useState<IDeal[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(false);\n  const [isAllDataLoading, setIsAllDataLoading] = useState(false);\n  const [account, setAccount] = useState({});\n  const [infoKey, setInfoKey] = useState(\"main\");\n  const [percentLoadedDeals, setPercentLoadedDeals] = useState(0);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dealStateSwitcher, setDealStateSwitcher] = useState(\"finished\");\n  const [pairFilter, setPairFilter] = useState(\"all\");\n  const [pairFilterOptions, setPairFilterOptions] = useState([] as any);\n  const [fromFilter, setFromFilter] = useState(new Date(\"2018-04-02\"));\n  const [toFilter, setToFilter] = useState(new Date());\n\n  const clearFilters = () => {\n    setStatusFilter(\"all\");\n    setPairFilter(\"all\");\n    setFromFilter(new Date(\"2018-04-02\"));\n    setToFilter(new Date());\n  };\n\n  const timeRangeRadios = [\n    { name: \"30 days\", value: \"30d\" },\n    { name: \"All time\", value: \"allTime\" },\n  ];\n\n  const refreshData = () => {\n    setDealsLimiter(Math.random());\n    fetchBot(botsDispatch, botsState, errorsDispatch, botId);\n    fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId, true);\n    getAllActiveDeals(dealsDispatch, errorsDispatch, botId, true);\n  };\n\n  useEffect(() => {\n    if (params.botId) {\n      setBotId(parseInt(params.botId));\n    }\n  }, [params]);\n\n  useEffect(() => {\n    setDealsLimiter(Math.random());\n    if (botId && !previousBotId) {\n      fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId);\n      getAllActiveDeals(dealsDispatch, errorsDispatch, botId);\n    }\n  }, [botId]);\n\n  useEffect(() => {\n    if (bot) {\n      setAccount(accounts[bot.account_id]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    if (botId) {\n      setBot(bots[botId]);\n    }\n  }, [botId, bots]);\n\n  useEffect(() => {\n    if (botId) {\n      if (timeRangeValue === \"30d\") {\n        setIsDataLoading(!is30daysDealsLoaded(dealsState, botId));\n      } else if (timeRangeValue === \"allTime\") {\n        setIsDataLoading(!isAllDealsLoaded(dealsState, botId));\n      }\n      setIsAllDataLoading(!isAllDealsLoaded(dealsState, botId));\n    }\n  }, [dealsState, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      clearFilters();\n      setBotsDeals(deals);\n    }\n  }, [isDataLoading, isAllDataLoading, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      deals = filterByPair(deals, pairFilter);\n      deals = filterByStatus(deals, statusFilter);\n      deals = filterTo(deals, toFilter);\n      deals = filterFrom(deals, fromFilter);\n      setBotsDeals(deals);\n    }\n  }, [pairFilter, statusFilter, fromFilter, toFilter]);\n\n  useEffect(() => {\n    if (\n      botId &&\n      bot &&\n      dealsState.deals[botId] &&\n      dealsState.deals[botId].offset\n    ) {\n      const loadedDeals = dealsState.deals[botId].offset || 0;\n      setPercentLoadedDeals(\n        Math.ceil((loadedDeals * 100) / parseFloat(bot.finished_deals_count))\n      );\n    }\n  }, [dealsState, botId, bot]);\n\n  useEffect(() => {\n    if (bot) {\n      setPairFilterOptions([\n        { value: \"all\", label: \"All\" },\n        ...bot.pairs.map((pair) => ({\n          value: pair,\n          label: pair.split(\"_\").reverse().join(\"/\"),\n        })),\n      ]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    return () => {\n      // reset limiter everytime to stop all the jobs\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  return (\n    <div className=\"DCABotDetails\">\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        className=\"DCABotDetailsGetBackButton\"\n        onClick={() => {\n          navigate(-1);\n        }}\n      >\n        {`< Back to bots list`}\n      </Button>\n      {!isAllDataLoading && (\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            refreshData();\n          }}\n        >\n          {`Refresh data`}\n        </Button>\n      )}\n      {isDataLoading && !percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar now={100} animated className=\"BotDetailsProgressBar\" />\n          </div>\n        </>\n      )}\n      {isDataLoading && !!percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar\n              now={percentLoadedDeals}\n              label={`${percentLoadedDeals}%`}\n              className=\"BotDetailsProgressBar\"\n            />\n          </div>\n        </>\n      )}\n      {!isDataLoading && bot && account && (\n        <>\n          <DCABotDetailsCharts\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          <div className=\"BotDetailsControlsContainer\">\n            <div className=\"BotDetailsControl\">\n              <ButtonGroup>\n                <ToggleButton\n                  id={`radio-finished`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radio-dealStateSwitcher\"\n                  value={\"finished\"}\n                  checked={dealStateSwitcher === \"finished\"}\n                  onChange={(e) => setDealStateSwitcher(e.currentTarget.value)}\n                >\n                  Finished\n                </ToggleButton>\n                <ToggleButton\n                  id={`radio-active`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radio-dealStateSwitcher\"\n                  value={\"active\"}\n                  checked={dealStateSwitcher === \"active\"}\n                  onChange={(e) => setDealStateSwitcher(e.currentTarget.value)}\n                >\n                  Active\n                </ToggleButton>\n              </ButtonGroup>\n            </div>\n            {dealStateSwitcher === \"finished\" && (\n              <>\n                {\" \"}\n                <div className=\"BotDetailsControl\">\n                  <ButtonGroup>\n                    {timeRangeRadios.map((radio, idx) => (\n                      <ToggleButton\n                        key={idx}\n                        id={`radio-${idx}`}\n                        type=\"radio\"\n                        variant=\"outline-primary\"\n                        name=\"radio\"\n                        value={radio.value}\n                        checked={timeRangeValue === radio.value}\n                        onChange={(e) =>\n                          setTimeRangeValue(e.currentTarget.value)\n                        }\n                      >\n                        {radio.name}\n                      </ToggleButton>\n                    ))}\n                  </ButtonGroup>\n                </div>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">Status:</div>\n                  <Select\n                    onChange={(option: any): void => {\n                      setStatusFilter(option.value);\n                    }}\n                    value={\n                      statusFilterOptions.find(\n                        (option: any) => option.value === statusFilter\n                      ) as any\n                    }\n                    className=\"BotDetailsStatusFilter\"\n                    theme={(theme) => ({\n                      ...theme,\n                      colors: {\n                        ...theme.colors,\n                        primary25: \"#00a59a\",\n                        primary: \"#00a59a\",\n                      },\n                    })}\n                    options={statusFilterOptions as any}\n                  />\n                </div>\n                {bot && bot.pairs.length > 1 && (\n                  <div className=\"BotDetailsControl\">\n                    <div className=\"BotDetailsFilterTitle\">Pair:</div>\n                    <Select\n                      onChange={(option: any): void => {\n                        setPairFilter(option.value);\n                      }}\n                      value={\n                        pairFilterOptions.find(\n                          (option: any) => option.value === pairFilter\n                        ) as any\n                      }\n                      className=\"BotDetailsPairFilter\"\n                      options={pairFilterOptions as any}\n                      theme={(theme) => ({\n                        ...theme,\n                        colors: {\n                          ...theme.colors,\n                          primary25: \"#00a59a\",\n                          primary: \"#00a59a\",\n                        },\n                      })}\n                    />\n                  </div>\n                )}\n                {timeRangeValue === \"allTime\" && (\n                  <>\n                    <div className=\"BotDetailsControl\">\n                      <div className=\"BotDetailsFilterTitle\">From:</div>\n                      <DatePicker\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={fromFilter}\n                        onChange={(date) => {\n                          setFromFilter(date as any);\n                        }}\n                        selectsStart\n                        startDate={fromFilter}\n                        endDate={toFilter}\n                        className=\"BotDetailsDateFilter\"\n                        strictParsing\n                      />\n                    </div>\n                    <div className=\"BotDetailsControl\">\n                      <div className=\"BotDetailsFilterTitle\">To:</div>\n                      <DatePicker\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={toFilter}\n                        onChange={(date) => setToFilter(date as any)}\n                        selectsEnd\n                        startDate={fromFilter}\n                        endDate={toFilter}\n                        minDate={fromFilter}\n                        className=\"BotDetailsDateFilter\"\n                        strictParsing\n                      />\n                    </div>\n                  </>\n                )}\n                <div className=\"BotDetailsControl\">\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                      clearFilters();\n                    }}\n                  >\n                    {`Clear filters`}\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n          <div className=\"DCABotInfoGroup\">\n            <div className=\"DCABotName\">{bot.name}</div>\n            <div className=\"DCABotId\">{`(Bot ID: ${bot.id})`}</div>\n            <div className=\"DCABotLinkTo3Commas\">\n              <Button\n                onClick={() => {\n                  window.open(`https://3commas.io/bots/${botId}`, \"_blank\");\n                }}\n                variant=\"link\"\n                size=\"sm\"\n                active\n              >\n                Open in 3Commas\n              </Button>\n            </div>\n          </div>\n          <DCABotDetailsInfo\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            setInfoKey={setInfoKey}\n            fromFilter={fromFilter}\n            toFilter={toFilter}\n          />\n          {dealStateSwitcher === \"finished\" && botsDeals.length > 0 && (\n            <DCABotDetailsDealsTable\n              bot={bot}\n              deals={botsDeals}\n              dealStateSwitcher={dealStateSwitcher}\n            />\n          )}\n          {dealStateSwitcher === \"active\" &&\n            bot.id &&\n            bot.id in activeDeals &&\n            activeDeals[bot.id].list.length > 0 && (\n              <DCABotDetailsDealsTable\n                bot={bot}\n                deals={activeDeals[bot.id].list}\n                dealStateSwitcher={dealStateSwitcher}\n              />\n            )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, BotsContext } from \"../../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\nimport { setBotsFilters } from \"../../../state/bots/BotsActions\";\n\nconst BotsFilters = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    accountsState: { accounts, list },\n  } = useContext(AccountsContext);\n\n  const { filters } = botsState;\n\n  const updateFilter = async (filterItem: any) => {\n    botsDispatch(\n      setBotsFilters({\n        ...botsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...list.map((accountId: any) => ({\n      value: accountId,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${accounts[accountId].market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{accounts[accountId].name}</span>\n        </div>\n      ),\n      label_id: accounts[accountId].name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ account: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filters.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ scope: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filters.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ type: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filters.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ sorting: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filters.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { BotsContext, DealsContext, ErrorsContext } from \"../../../../App\";\nimport { fetchBots } from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport \"./BotsListCharts.css\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  calculateProfitPerDayForListOfBots,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"../../../../utils/DealsUtils\";\nimport { getBotsLeaderboardChartData } from \"../../../../utils/BotsUtils\";\n\nconst BotsListCharts = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { deals } = dealsState;\n  const { list, hasMore, offset, bots } = botsState;\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [dealsLoaded, setDealsLoaded] = useState(false);\n  const [botsLoaded, setBotsLoaded] = useState(false);\n\n  const [numberHandled, setNumberHandled] = useState(0);\n  const [profitsChartData, setProfitsChartData] = useState<any>([[], []]);\n  const [accumulativeProfitsChartData, setAccumulativeProfitsChartData] =\n    useState<any>([[], []]);\n  const [botsLeaderboardChartData, setBotsLeaderboardChartData] = useState<any>(\n    [[], [], []]\n  );\n\n  //first get all bots\n  const getBotsList = async () => {\n    if (hasMore && offset !== 0) {\n      await fetchBots(botsDispatch, botsState, errorsDispatch, false, 100);\n    }\n  };\n\n  useEffect(() => {\n    getBotsList().then(() => {\n      if (!hasMore) {\n        setBotsLoaded(true);\n      }\n    });\n  }, [offset]);\n\n  // get deals\n  const getBoatsDeals = async () => {\n    setDealsLimiter(Math.random());\n\n    for (const botId of list) {\n      if (!is30daysDealsLoaded(dealsState, botId)) {\n        await fetchDealsForBotFor30Days(\n          dealsState,\n          dealsDispatch,\n          errorsDispatch,\n          botId\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (botsLoaded) {\n      getBoatsDeals().then(() => {\n        setDealsLoaded(true);\n      });\n    }\n  }, [botsLoaded]);\n\n  // then calculate data for charts\n  useEffect(() => {\n    if (dealsLoaded) {\n      const profitsObject = calculateProfitPerDayForListOfBots(\n        dealsState,\n        list\n      );\n      setProfitsChartData(getProfitChartData(profitsObject));\n      setAccumulativeProfitsChartData(\n        getAccumulativeProfitChartData(profitsObject)\n      );\n      setBotsLeaderboardChartData(getBotsLeaderboardChartData(botsState));\n    }\n  }, [dealsLoaded, bots]);\n\n  // reset limiter everytime to stop all the jobs\n  useEffect(() => {\n    return () => {\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  // update data for loader\n  useEffect(() => {\n    const botsWithLoadedDeals = list.filter((botId: number) =>\n      is30daysDealsLoaded(dealsState, botId)\n    );\n    setNumberHandled((botsWithLoadedDeals.length / list.length) * 100);\n  }, [deals]);\n\n  return (\n    <div className=\"BotsListCharts\">\n      {!dealsLoaded && (\n        <div className=\"ProgressBar\">\n          {!botsLoaded ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <ProgressBar\n              now={Math.ceil(numberHandled)}\n              label={`${Math.ceil(numberHandled)}%`}\n            />\n          )}\n        </div>\n      )}\n      {dealsLoaded && (\n        <>\n          <div className=\"ChartContainer\">\n            <Line\n              options={\n                AccumulativeChartOptions(\n                  \"Total Accumulative Profit (30 days), $\"\n                ) as any\n              }\n              data={{\n                labels: accumulativeProfitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Accumulative Profit, $\",\n                    data: accumulativeProfitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    fill: { value: 0 },\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={ProfitChartOptions(\"Total Profit (30 days), $\") as any}\n              data={{\n                labels: profitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Profit, $\",\n                    data: profitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={\n                LeaderbordChartOptions(\n                  \"Funds locked/Max usage, $\",\n                  botsLeaderboardChartData[0]\n                ) as any\n              }\n              data={{\n                labels: botsLeaderboardChartData[0],\n                datasets: [\n                  {\n                    label: \"Funds locked, $\",\n                    data: botsLeaderboardChartData[1],\n                    borderColor: \"rgb(255, 99, 132)\",\n                    backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                  },\n                  {\n                    label: \"Max usage, $\",\n                    data: botsLeaderboardChartData[2],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BotsListCharts;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  BotsContext,\n  DealsContext,\n} from \"../../../App\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { fetchBots } from \"../../../state/bots/BotsEffects\";\nimport BotsListCharts from \"./BotsListCharts/BotsListCharts\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\n\nconst haveAllBotsDealsFor30Days = (botsList: any, deals: any) =>\n  botsList.every((botId: any) => botId in deals);\n\nexport const BotsList = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    dealsState: { deals },\n  } = useContext(DealsContext);\n  const { list, hasMore, filters, bots } = botsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [showCharts, setShowCharts] = useState(false);\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const previousFilters = usePrevious(filters);\n\n  useEffect(() => {\n    if (!previousFilters && list.length) {\n      setShowCharts(haveAllBotsDealsFor30Days(list, deals));\n    } else {\n      setShowCharts(false);\n      fetchBots(botsDispatch, botsState, errorsDispatch, true).then();\n    }\n  }, [filters]);\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={list.length}\n      next={async () => {\n        if (list.length) {\n          await fetchBots(botsDispatch, botsState, errorsDispatch, false);\n        }\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      {showCharts ? (\n        <BotsListCharts />\n      ) : (\n        <div className=\"ShowChartsButtonContainer\">\n          <Button\n            className=\"ShowChartsButton\"\n            onClick={() => {\n              setShowCharts(true);\n            }}\n          >\n            Calculate profits\n          </Button>\n        </div>\n      )}\n      <div className=\"BotsList\">\n        {list.map((botId: number) => (\n          <BotPreview\n            botItem={bots[botId]}\n            key={botId}\n            account={accounts[bots[botId].account_id]}\n          />\n        ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React from \"react\";\nimport BotsFilters from \"./BotsFilters/BotsFilters\";\nimport { BotsList } from \"./BotsList/BotsList\";\nimport \"./DCABots.css\";\n\nexport const DCABots = () => (\n  <>\n    <BotsFilters />\n    <BotsList />\n  </>\n);\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { IGridBot } from \"../interfaces/GridBot\";\nimport {\n  differenceInDays,\n  differenceInHours,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\nimport { getCurrencyValueInUsd } from \"./GeneralUtils\";\n\nconst cryptoCoins: any = {\n  BTC: \"bitcoin\",\n  ETH: \"ethereum\",\n  BNB: \"binancecoin\",\n  USDT: \"tether\",\n  USDC: \"usd-coin\",\n  XRP: \"ripple\",\n  TRX: \"tron\",\n  BUSD: \"binance-usd\",\n  DOGE: \"dogecoin\",\n};\n\nexport const getInitialInvestment = async (gridBot: IGridBot) => {\n  const startPrice = parseFloat(gridBot.start_price);\n  const quantityPerGrid = parseFloat(gridBot.quantity_per_grid);\n\n  const pureInitialGrids = gridBot.grid_lines\n    .slice()\n    .sort((a: any, b: any) => {\n      return (\n        Math.abs(startPrice - parseFloat(a.price)) -\n        Math.abs(startPrice - parseFloat(b.price))\n      );\n    })\n    .slice();\n\n  pureInitialGrids.shift();\n\n  const baseInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) > startPrice)\n      .map((gridLine: any) => quantityPerGrid)\n  );\n\n  const quoteInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) < startPrice)\n      .map((gridLine: any) => parseFloat(gridLine.price) * quantityPerGrid)\n  );\n\n  const allInQuote = quoteInvestment + baseInvestment * startPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const createdOnDay = moment.utc(gridBot.updated_at);\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins) {\n    const marketData: any = await fetch(\n      `https://api.coingecko.com/api/v3/coins/${\n        cryptoCoins[quoteCurrency]\n      }/history?date=${createdOnDay.format(\"DD-MM-YYYY\")}&localization=false`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * marketData.market_data.current_price.usd;\n  } else {\n    if (moment().utc().diff(createdOnDay, \"days\") < 366) {\n      const marketData: any = await fetch(\n        `https://api.currconv.com/api/v7/convert?apiKey=8ae78b023a9240049d4d56f97c81020a&q=${quoteCurrency}_USD&compact=ultra&date=${createdOnDay.format(\n          \"YYYY-MM-DD\"\n        )}&apiKey=e4dcebf8eb9df2180846`\n      ).then((response: any) => response.json());\n\n      allInUsd =\n        allInQuote *\n        marketData[`${quoteCurrency}_USD`][createdOnDay.format(\"YYYY-MM-DD\")];\n    }\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nexport const getCurrentInvestment = async (gridBot: IGridBot) => {\n  const currentPrice = parseFloat(gridBot.current_price);\n\n  const baseInvestment = parseFloat(gridBot.investment_base_currency);\n\n  const quoteInvestment = parseFloat(gridBot.investment_quote_currency);\n\n  const allInQuote = quoteInvestment + baseInvestment * currentPrice;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const allInUsd = await getCurrencyValueInUsd(\n    \"binance\",\n    quoteCurrency,\n    allInQuote\n  );\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nconst hoursWithin30Days = 24 * 30;\n\nexport const getProfitAgeInHours = (profit: any) =>\n  differenceInHours(moment(), moment(profit.created_at));\n\nexport const getProfitsWithin30days = (profits: any) =>\n  profits.filter(\n    (profit: any) => getProfitAgeInHours(profit) <= hoursWithin30Days\n  );\n\nexport const getMarketOrderAgeInHours = (marketOrder: any) =>\n  differenceInHours(moment(), moment(marketOrder.created_at));\n\nexport const getMarketOrdersWithin30days = (marketOrders: any) =>\n  marketOrders.grid_lines_orders.filter(\n    (marketOrder: any) =>\n      getMarketOrderAgeInHours(marketOrder) <= hoursWithin30Days\n  );\n\nexport const getObjectOfProfitPerDay = (\n  profits: Array<any>,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const dateStringProfits = (item: any) =>\n    moment(item.created_at).format(\"YYYY-MM-DD\");\n  let resultProfits = _.groupBy(profits, dateStringProfits);\n\n  const dateStringMarketOrders = (item: any) =>\n    moment(item.updated_at).format(\"YYYY-MM-DD\");\n  let resultMarketOrders = _.groupBy(marketOrders, dateStringMarketOrders);\n\n  const objectProfits = _.mapValues(resultProfits, (profits: Array<any>) =>\n    _.sum(profits.map((profit: any) => parseFloat(profit.profit)))\n  );\n\n  const objectMarketOrders = _.mapValues(\n    resultMarketOrders,\n    (marketOrders: Array<any>) =>\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01 *\n      -1\n  );\n\n  return _.mergeWith({}, objectProfits, objectMarketOrders, _.add);\n};\n\nexport const getOneGridBotAccumulativeProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getAccumulativeProfitChartData(botsProfits, difference);\n};\n\nexport const getOneGridBotProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getProfitChartData(botsProfits, difference);\n};\n","import { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\n\ninterface ISetNewGridBotsList {\n  type: \"setNewGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const setNewGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): ISetNewGridBotsList => ({\n  type: \"setNewGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToGridBotsList {\n  type: \"addToGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const addToGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): IAddToGridBotsList => ({\n  type: \"addToGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetGridBotsOffset {\n  type: \"setGridBotsOffset\";\n  payload: number;\n}\n\nexport const setGridBotsOffset = (offset: number): ISetGridBotsOffset => ({\n  type: \"setGridBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetGridBotsFilters {\n  type: \"setGridBotsFilters\";\n  payload: IGridBotFilters;\n}\n\nexport const setGridBotsFilters = (\n  gridBotsFilter: IGridBotFilters\n): ISetGridBotsFilters => ({\n  type: \"setGridBotsFilters\",\n  payload: gridBotsFilter,\n});\n\ninterface ISetGridBot {\n  type: \"setGridBot\";\n  payload: { gridBotId: number; gridBot: IGridBot };\n}\n\nexport const setGridBot = (\n  gridBotId: number,\n  gridBot: IGridBot\n): ISetGridBot => ({\n  type: \"setGridBot\",\n  payload: { gridBotId, gridBot },\n});\n\nexport type GridBotsAction =\n  | ISetNewGridBotsList\n  | ISetHasMore\n  | IAddToGridBotsList\n  | ISetGridBotsOffset\n  | ISetGridBotsFilters\n  | ISetGridBot;\n","import {\n  getGridBot,\n  getGridBots,\n  getGridBotsMarketOrders,\n  getGridBotsProfits,\n} from \"../../utils/ApiUtils\";\nimport {\n  getCurrentInvestment,\n  getInitialInvestment,\n} from \"../../utils/GridBotsUtils\";\nimport {\n  addToGridBotsList,\n  setHasMore,\n  setNewGridBotsList,\n  setGridBot,\n} from \"./GridBotsActions\";\nimport { IGridBotsState } from \"./GridBotsReducer\";\n\nconst spotAccountsTypes = [\n  \"Account::BinanceAccount\",\n  \"Accounts::Ftx\",\n  \"Account::HuobiAccount\",\n  \"Account::OkexAccount\",\n  \"Account::KucoinAccount\",\n  \"Account::GateIoAccount\",\n  \"Account::KrakenAccount\",\n  \"Account::BitfinexAccount\",\n  \"Account::BinanceUsAccount\",\n  \"Account::BitstampAccount\",\n  \"Accounts::GeminiAccount\",\n  \"Account::BittrexAccount\",\n  \"Account::GdaxAccount\",\n  \"Account::PaperTradingAccount\",\n];\n\nexport async function fetchGridBots(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  gridBotsDispatch(setHasMore(true));\n  gridBotsDispatch(setNewGridBotsList([]));\n  const {\n    limit,\n    filters: { sorting, account },\n  } = gridBotsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    let offset = 0;\n    let hasMore = true;\n\n    while (hasMore) {\n      const data: any = await getGridBots(\n        offset,\n        offsetLimit,\n        sorting,\n        account,\n        spotAccountsTypes\n      );\n      if (data.error) {\n        break;\n      }\n      gridBotsDispatch(addToGridBotsList(data));\n      offset = offset + offsetLimit;\n      if (data.length < offsetLimit) {\n        hasMore = false;\n      }\n    }\n    gridBotsDispatch(setHasMore(false));\n  } catch {\n    gridBotsDispatch(setNewGridBotsList([]));\n    gridBotsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching grid bots list\",\n    });\n  }\n}\n\nexport async function fetchGridBot(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  try {\n    const gridBot = await getGridBot(gridBotId);\n    gridBotsDispatch(setGridBot(gridBotId, gridBot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching grid bot ${gridBotId}`,\n    });\n  }\n}\n\nexport async function fetchInitialInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"initialInvestments\" in gridBotItem) ||\n      !gridBotItem.initialInvestments\n    ) {\n      const initialInvestments = await getInitialInvestment(gridBotItem);\n      return initialInvestments;\n    } else {\n      return gridBotItem.initialInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching initial investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchCurrentInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"currentInvestments\" in gridBotItem) ||\n      !gridBotItem.currentInvestments\n    ) {\n      const currentInvestments = await getCurrentInvestment(gridBotItem);\n      return currentInvestments;\n    } else {\n      return gridBotItem.currentInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching current investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchProfits(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"profits\" in gridBotItem) || !gridBotItem.profits) {\n      const profits = await getGridBotsProfits(gridBotId);\n      return profits;\n    } else {\n      return gridBotItem.profits;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching profits for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchMarketOrders(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"marketOrders\" in gridBotItem) || !gridBotItem.marketOrders) {\n      const marketOrders = await getGridBotsMarketOrders(gridBotId);\n      return marketOrders;\n    } else {\n      return gridBotItem.marketOrders;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchGridBotsMetrics(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const initialInvestments = await fetchInitialInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const currentInvestments = await fetchCurrentInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const profits = await fetchProfits(gridBotsState, errorsDispatch, gridBotId);\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    initialInvestments,\n    currentInvestments,\n    profits,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n\nexport async function fetchDetails(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const marketOrders = await fetchMarketOrders(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    marketOrders,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n","import React, { useContext } from \"react\";\nimport { AccountsContext, GridBotsContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\n\nimport \"./GridBotsListTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\n\nconst GridBotsListTable = ({ values, investment, setModalGridBotId }: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n  const { list, gridBots } = gridBotsState;\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account_id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const accountId = accountsList.filter(\n              (accId: any) => accId === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${accounts[accountId].market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{accounts[accountId].name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Price range\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return `${originalRow.upper_price}_${originalRow.lower_price}_${originalRow.grids_quantity} levels`;\n          },\n          id: \"price_range\",\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const range = value.split(\"_\");\n            return (\n              <div>\n                <div\n                  style={{\n                    color: \"#00A59A\",\n                  }}\n                >\n                  {range[0]}\n                </div>\n                <div\n                  style={{\n                    color: \"#EE7D8B\",\n                  }}\n                >\n                  {range[1]}\n                </div>\n                <div\n                  style={{\n                    fontSize: \"12px\",\n                  }}\n                >\n                  {range[2]}\n                </div>\n              </div>\n            );\n          },\n        },\n        {\n          Header: \"Start price\",\n          accessor: \"start_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current price\",\n          accessor: \"current_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Active orders\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const grigLinesNumber = originalRow.grid_lines.length;\n            const sellOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"sell\"\n            ).length;\n            const buyOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"buy\"\n            ).length;\n\n            return (\n              <>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"danger\">\n                    {sellOrdersNumber}\n                  </Badge>\n                </div>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"success\">\n                    {buyOrdersNumber}\n                  </Badge>\n                </div>\n                {sellOrdersNumber + buyOrdersNumber !== grigLinesNumber - 1 && (\n                  <div style={{ marginBottom: \"3px\" }}>\n                    <OverlayTrigger\n                      key=\"right\"\n                      placement=\"right\"\n                      overlay={\n                        <Tooltip id={`tooltip-${originalRow.id}`}>\n                          Bot was unable to place all orders on the exchange.\n                          This may heavily impact your trading results and PnL\n                          reports on this page. Please contact 3commas support\n                          to check the error details.\n                        </Tooltip>\n                      }\n                    >\n                      <Badge style={{ fontSize: \"16px\" }} bg=\"warning\">\n                        {\"\\u26A0\"}\n                      </Badge>\n                    </OverlayTrigger>\n                  </div>\n                )}\n              </>\n            );\n          },\n          id: \"activeOrder\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Initial investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.initialInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.initialInvestments.allInUsd\n                  : originalRow.initialInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"initial_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.currentInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.currentInvestments.allInUsd\n                  : originalRow.currentInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"current_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Investment change\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const invesmentChange =\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.initialInvestments.allInQuote\n                      ? (invesmentChange /\n                          originalRow.initialInvestments.allInQuote) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const invesmentChange =\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: \"USD\",\n                    })} USD`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.initialInvestments.allInUsd\n                      ? (invesmentChange /\n                          originalRow.initialInvestments.allInUsd) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"investment_change\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Bot profit\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (!originalRow.profits) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const profitPercent =\n                (quoteProfit / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: quoteProfit,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const profitPercent =\n                (usdProfit / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: usdProfit,\n                    currency: \"USD\",\n                  })} USD`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"bot_profit\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Total PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.profits ||\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const pnl =\n                quoteProfit +\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const pnl =\n                usdProfit +\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: \"USD\",\n                    })} USD`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"total_PnL\",\n          disableSortBy: true,\n        },\n\n        {\n          Header: \"Stats\",\n          Cell: ({ cell: { value } }: any) => {\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <img className=\"stats\" src={`stats.png`} alt=\"stats\" />\n              </div>\n            );\n          },\n          id: \"stats\",\n          disableSortBy: true,\n        },\n      ] as any,\n    [investment, values]\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((gridBotId: number) => gridBots[gridBotId]),\n    });\n\n  return (\n    <div className=\"GridBotsListTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalGridBotId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default GridBotsListTable;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneGridBotAccumulativeProfitsChartData,\n  getOneGridBotProfitsChartData,\n} from \"../../../../utils/GridBotsUtils\";\nimport \"./GridBotDetailsCharts.css\";\n\nconst GridBotDetailsCharts = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getOneGridBotAccumulativeProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n    setProfitsData(\n      getOneGridBotProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n  }, [profits, marketOrders, tradingFee]);\n\n  return (\n    <div className=\"GridBotDetailsCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, ${quoteCurrency}`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, ${quoteCurrency}`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GridBotDetailsCharts;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotDetailsTable.css\";\n\nconst GridBotDetailsTable = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [profit, setProfit] = useState(0);\n  const [avgProfit, setAvgProfit] = useState(0);\n  const [returns, setReturns] = useState(0);\n  const [running, setRunning] = useState(0);\n\n  useEffect(() => {\n    const summarizedProfits = _.sum(\n      profits.map((profit: any) => parseFloat(profit.profit))\n    );\n    const summarizedMarketOrders =\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01;\n    const realProfit = summarizedProfits - summarizedMarketOrders;\n\n    let period = 1;\n\n    if (timeRangeValue === \"30d\") {\n      period = running > 30 ? 30 : running;\n    } else {\n      period = running;\n    }\n\n    const realAvgProfit = period ? realProfit / period : 0;\n    const quoteInvestment = gridBot.initialInvestments\n      ? gridBot.initialInvestments.allInQuote\n      : 0;\n    const realReturns = quoteInvestment\n      ? (realProfit * 100) / quoteInvestment\n      : 0;\n\n    const start = moment.utc(gridBot.created_at);\n    const end = gridBot.closed_at\n      ? moment.utc(gridBot.closed_at)\n      : moment.utc();\n\n    setProfit(realProfit);\n    setAvgProfit(realAvgProfit);\n    setReturns(realReturns);\n    setRunning(end.diff(start, \"days\"));\n  }, [gridBot, profits, marketOrders, tradingFee, timeRangeValue]);\n\n  return (\n    profits &&\n    marketOrders && (\n      <Table hover>\n        <thead>\n          <tr>\n            <th>Days running</th>\n            <th>Transactions</th>\n            <th>Avg. daily</th>\n            <th>Bot profit</th>\n            <th>Returns</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{running}</td>\n            <td>{profits ? profits.length : \"\"}</td>\n            <td>{`${getCurrencyFormat({\n              value: avgProfit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: profit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: returns,\n              currency: \"USD\",\n            })} %`}</td>\n          </tr>\n        </tbody>\n      </Table>\n    )\n  );\n};\n\nexport default GridBotDetailsTable;\n","import React, { useEffect, useContext, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  FormControl,\n  InputGroup,\n  Modal,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport { fetchDetails } from \"../../../state/gridBots/GridBotsEffects\";\nimport {\n  getMarketOrdersWithin30days,\n  getProfitsWithin30days,\n} from \"../../../utils/GridBotsUtils\";\nimport \"./GridBotDetails.css\";\nimport GridBotDetailsCharts from \"./GridBotDetailsCharts/GridBotDetailsCharts\";\nimport GridBotDetailsTable from \"./GridBotDetailsTable/GridBotDetailsTable\";\n\nconst timeRangeRadios = [\n  { name: \"30 days\", value: \"30d\" },\n  { name: \"All time\", value: \"allTime\" },\n];\n\nconst GridBotDetails = ({ modalIsOpen, setModalIsOpen, gridBotId }: any) => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const [tradingFee, setTradingFee] = useState(0);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n\n  const [marketOrders, setMarketOrders] = useState([]);\n  const [profits, setProfits] = useState([]);\n\n  const [account, setAccount] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const inputTradingFee = (e: any) => {\n    if (e.target.value >= 0 && e.target.value <= 100) {\n      setTradingFee(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && !gridBot.marketOrders) {\n      fetchDetails(\n        gridBotsDispatch,\n        gridBotsState,\n        errorsDispatch,\n        gridBotId\n      ).then();\n    }\n    if (gridBot) {\n      setAccount(accounts[gridBot.account_id]);\n    }\n  }, [gridBot]);\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && gridBot.marketOrders) {\n      if (timeRangeValue === \"30d\") {\n        setMarketOrders(\n          getMarketOrdersWithin30days(gridBot.marketOrders).filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(getProfitsWithin30days(gridBot.profits));\n      } else {\n        setMarketOrders(\n          gridBot.marketOrders.grid_lines_orders.filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(gridBot.profits);\n      }\n    }\n  }, [gridBot, timeRangeValue]);\n\n  return (\n    <>\n      {gridBot && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              {`GridBot: ${gridBot.pair\n                .split(\"_\")\n                .reverse()\n                .join(\"/\")} (ID: ${gridBotId})`}\n              {account && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    marginTop: \"4px\",\n                  }}\n                >\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"BotMarketIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <a\n                    onClick={(e: any) => {\n                      e.preventDefault();\n                      navigate({\n                        pathname: `/accounts/${account.id}`,\n                        search: window.location.search,\n                      });\n                    }}\n                    href=\"#\"\n                  >\n                    {account.name}\n                  </a>\n                </div>\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"GridBotsDetailsFilters\">\n              <div className=\"GridBotListControl\">\n                <div className=\"FilterTitle\">Time range</div>\n                <ButtonGroup>\n                  {timeRangeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio\"\n                      value={radio.value}\n                      checked={timeRangeValue === radio.value}\n                      onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n              <div\n                className=\"GridBotListControl\"\n                style={{ width: \"150px\", marginLeft: \"auto\" }}\n              >\n                <div className=\"FilterTitle\">Trading fee</div>\n                <InputGroup>\n                  <FormControl\n                    onChange={inputTradingFee}\n                    value={tradingFee}\n                    type=\"number\"\n                  />\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup>\n              </div>\n            </div>\n            <GridBotDetailsTable\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n            <GridBotDetailsCharts\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default GridBotDetails;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotListMetrics.css\";\n\nconst GridBotListMetrics = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, gridBots } = gridBotsState;\n\n  const [totalInvestments, setTotalInvestments] = useState(0);\n  const [totalProfits, setTotalProfits] = useState(0);\n  const [totaPnL, setTotalPnL] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!hasMore) {\n      const allHaveInvestments = list.every(\n        (id: any) => gridBots[id].initialInvestments\n      );\n      const allHaveCurrentInvestments = list.every(\n        (id: any) => gridBots[id].currentInvestments\n      );\n      const allHaveProfits = list.every((id: any) => gridBots[id].profits);\n      if (\n        list &&\n        allHaveInvestments &&\n        allHaveProfits &&\n        allHaveCurrentInvestments\n      ) {\n        const calculatedInitialInvestments = _.sum(\n          list.map((id: any) => gridBots[id].initialInvestments.allInUsd)\n        );\n        const calculatedCurrentInvestments = _.sum(\n          list.map((id: any) => gridBots[id].currentInvestments.allInUsd)\n        );\n        const calculatedProfits = _.sum(\n          list.map((id: any) =>\n            _.sum(\n              gridBots[id].profits.map((profit: any) =>\n                parseFloat(profit.usd_profit)\n              )\n            )\n          )\n        );\n\n        setIsLoading(false);\n        setTotalInvestments(calculatedInitialInvestments);\n        setTotalProfits(calculatedProfits);\n        setTotalPnL(\n          calculatedProfits +\n            calculatedCurrentInvestments -\n            calculatedInitialInvestments\n        );\n      }\n    }\n  }, [list, hasMore, gridBots]);\n\n  return !isLoading ? (\n    <div className=\"GridBotListMetrics\">\n      <div className=\"GridBotListMetricsContainer\">\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Investment</div>\n          <div className=\"GridBotListMetricBody\">{`${getCurrencyFormat({\n            value: totalInvestments,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Bot Profits</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totalProfits >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totalProfits,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total PnL</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totaPnL >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totaPnL,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"SpinnerContainer\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default GridBotListMetrics;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport {\n  fetchGridBotsMetrics,\n  fetchGridBots,\n} from \"../../../state/gridBots/GridBotsEffects\";\nimport Select from \"react-select\";\n\nimport \"./GridBotsList.css\";\nimport GridBotsListTable from \"./GridBotsListTable/GridBotsListTable\";\nimport { setGridBotsFilters } from \"../../../state/gridBots/GridBotsActions\";\nimport { isSpotAccount } from \"../../../utils/BotsUtils\";\nimport GridBotDetails from \"../GridBotDetails/GridBotDetails\";\nimport GridBotListMetrics from \"./GridBotListMetrics/GridBotListMetrics\";\n\nexport const investmentRadios = [\n  { name: \"Value\", value: \"value\" },\n  { name: \"Balances\", value: \"balances\" },\n];\nexport const valuesRadios = [\n  { name: \"USD\", value: \"usd\" },\n  { name: \"Quote\", value: \"quote\" },\n];\n\nconst GridBotsList = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, filters } = gridBotsState;\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [investment, setInvestment] = useState(\"value\");\n  const [values, setValues] = useState(\"usd\");\n  const [modalGridBotId, setModalGridBotId] = useState(\"\");\n\n  const updateFilter = async (filterItem: any) => {\n    gridBotsDispatch(\n      setGridBotsFilters({\n        ...gridBotsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const accountsOptions = [\n    { value: \"\", label: \"All spot accounts\", label_id: \"All\" },\n    ...accountsList\n      .filter((accountId: any) =>\n        isSpotAccount(accounts[accountId].market_code)\n      )\n      .map((accountId: any) => ({\n        value: accountId,\n        label: (\n          <div className=\"AccountFilterItem\">\n            <div>\n              <div\n                className=\"AccountMarketIcon\"\n                style={{\n                  backgroundImage: `url(${accounts[accountId].market_icon})`,\n                }}\n              ></div>\n            </div>\n            <span>{accounts[accountId].name}</span>\n          </div>\n        ),\n        label_id: accounts[accountId].name,\n      })),\n  ];\n\n  useEffect(() => {\n    fetchGridBots(gridBotsDispatch, gridBotsState, errorsDispatch).then();\n  }, [filters]);\n\n  useEffect(() => {\n    if (!hasMore) {\n      for (const gridBotId of list) {\n        fetchGridBotsMetrics(\n          gridBotsDispatch,\n          gridBotsState,\n          errorsDispatch,\n          gridBotId\n        ).then();\n      }\n    }\n  }, [hasMore, list]);\n\n  return (\n    <>\n      <GridBotListMetrics />\n      <div className=\"GridBotsFilters\">\n        <div className=\"GridBotsFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            onChange={(option: any) => {\n              updateFilter({ account: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.account\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"GridBotListControl\">\n          <div className=\"FilterTitle\">Investment</div>\n          <ButtonGroup id=\"foo\">\n            {investmentRadios.map((radio, idx) => (\n              <ToggleButton\n                key={radio.value}\n                id={`radio-${radio.value}`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioInvestment\"\n                value={radio.value}\n                checked={investment === radio.value}\n                onChange={(e) => {\n                  setInvestment(e.currentTarget.value);\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {investment === \"value\" && (\n          <div className=\"GridBotListControl\">\n            <div className=\"FilterTitle\">Show values in</div>\n            <ButtonGroup id=\"bar\">\n              {valuesRadios.map((radio, idx) => (\n                <ToggleButton\n                  key={radio.value}\n                  id={`radio-${radio.value}`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radioValues\"\n                  value={radio.value}\n                  checked={values === radio.value}\n                  onChange={(e) => setValues(e.currentTarget.value)}\n                >\n                  {radio.name}\n                </ToggleButton>\n              ))}\n            </ButtonGroup>\n          </div>\n        )}\n      </div>\n      {isNothingFound ? (\n        <div className=\"FallbackContainer\">\n          <p style={{ textAlign: \"center\" }}>\n            <b>No results found =(</b>\n          </p>\n        </div>\n      ) : (\n        <div className=\"GridBotsList\">\n          <GridBotsListTable\n            values={values}\n            investment={investment}\n            setModalGridBotId={setModalGridBotId}\n          />\n          {!!modalGridBotId && (\n            <GridBotDetails\n              modalIsOpen={!!modalGridBotId}\n              setModalIsOpen={setModalGridBotId}\n              gridBotId={modalGridBotId}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GridBotsList;\n","import React from \"react\";\nimport \"./GridBots.css\";\nimport GridBotsList from \"./GridBotsList/GridBotsList\";\n\nconst GridBots = () => (\n  <>\n    {/* <BotsFilters /> */}\n    <GridBotsList />\n  </>\n);\n\nexport default GridBots;\n","import { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\n\ninterface ISetNewSmartTradesList {\n  type: \"setNewSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const setNewSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): ISetNewSmartTradesList => ({\n  type: \"setNewSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToSmartTradesList {\n  type: \"addToSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const addToSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): IAddToSmartTradesList => ({\n  type: \"addToSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetSmartTradesOffset {\n  type: \"setSmartTradesOffset\";\n  payload: number;\n}\n\nexport const setSmartTradesOffset = (\n  offset: number\n): ISetSmartTradesOffset => ({\n  type: \"setSmartTradesOffset\",\n  payload: offset,\n});\n\ninterface ISetSmartTradesFilters {\n  type: \"setSmartTradesFilters\";\n  payload: ISmartTradeFilters;\n}\n\nexport const setSmartTradesFilters = (\n  smartTradesFilter: ISmartTradeFilters\n): ISetSmartTradesFilters => ({\n  type: \"setSmartTradesFilters\",\n  payload: smartTradesFilter,\n});\n\ninterface ISetSmartTrade {\n  type: \"setSmartTrade\";\n  payload: { smartTradeId: number; smartTrade: ISmartTrade };\n}\n\nexport const setSmartTrade = (\n  smartTradeId: number,\n  smartTrade: ISmartTrade\n): ISetSmartTrade => ({\n  type: \"setSmartTrade\",\n  payload: { smartTradeId, smartTrade },\n});\n\nexport type SmartTradesAction =\n  | ISetNewSmartTradesList\n  | ISetHasMore\n  | IAddToSmartTradesList\n  | ISetSmartTradesOffset\n  | ISetSmartTradesFilters\n  | ISetSmartTrade;\n","import { getSmartTrades, getSmartTradeTrades } from \"../../utils/ApiUtils\";\nimport { convertFilterValueToDate } from \"../../utils/GeneralUtils\";\nimport {\n  addToSmartTradesList,\n  setHasMore,\n  setNewSmartTradesList,\n  setSmartTrade,\n} from \"./SmartTradesActions\";\nimport { ISmartTradesState } from \"./SmartTradesReducer\";\n\nexport async function fetchSmartTrades(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  smartTradesDispatch(setHasMore(true));\n  smartTradesDispatch(setNewSmartTradesList([]));\n  const {\n    limit,\n    filters: { sorting, accountId, type, pair, status, from },\n  } = smartTradesState;\n\n  const perPage = customLimit ? customLimit : limit;\n  const fromDate = convertFilterValueToDate(from);\n  try {\n    let hasMore = true;\n    let page = 1;\n\n    while (hasMore) {\n      const data: any = await getSmartTrades(\n        page,\n        perPage,\n        sorting,\n        accountId,\n        type,\n        pair,\n        status,\n        fromDate\n      );\n      if (data.error) {\n        break;\n      }\n      smartTradesDispatch(addToSmartTradesList(data));\n      page = page + 1;\n      if (data.length < perPage) {\n        hasMore = false;\n      }\n    }\n    smartTradesDispatch(setHasMore(false));\n  } catch {\n    smartTradesDispatch(setNewSmartTradesList([]));\n    smartTradesDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching smart trades list\",\n    });\n  }\n}\n\nexport async function fetchTrades(\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n  try {\n    if (!(\"trades\" in smartTradeItem) || !smartTradeItem.trades) {\n      const smartTradeTrades = await getSmartTradeTrades(smartTradeId);\n      return smartTradeTrades;\n    } else {\n      return smartTradeItem.trades;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${smartTradeItem.id}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchDetails(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const trades = await fetchTrades(\n    smartTradesState,\n    errorsDispatch,\n    smartTradeId\n  );\n\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n\n  const smartTrade = {\n    ...smartTradeItem,\n    trades,\n  };\n  await smartTradesDispatch(setSmartTrade(smartTradeId, smartTrade));\n}\n","import React, { useContext } from \"react\";\nimport { Badge, Table } from \"react-bootstrap\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./SmartTradeDetailsStatusTable.css\";\n\nconst SmartTradeDetailsStatusTable = ({ smartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n\n  const { smartTrades } = smartTradesState;\n\n  const smartTrade = smartTrades[smartTradeId];\n\n  return (\n    <div className=\"SmartTradeDetailsStatusTable\">\n      {smartTrade && (\n        <Table striped>\n          <thead>\n            <tr>\n              <th>Average entry</th>\n              <th>Average close</th>\n              <th>Current price</th>\n              <th>PnL, $</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr style={{ fontSize: \"14px\" }}>\n              <td>{`${\n                smartTrade.data.type === \"smart_sell\" ||\n                smartTrade.data.type === \"smart_buy\"\n                  ? smartTrade.position.price.value\n                  : smartTrade.data.average_enter_price\n              }`}</td>\n              <td>{`${\n                smartTrade.data.average_close_price\n                  ? smartTrade.data.average_close_price\n                  : \"\"\n              }`}</td>\n              <td>{`${\n                smartTrade.data.current_price\n                  ? smartTrade.data.current_price.last\n                  : \"\"\n              }`}</td>\n              <td>\n                {smartTrade.profit.usd ? (\n                  <Badge\n                    bg={smartTrade.profit.usd >= 0 ? \"success\" : \"danger\"}\n                    style={{ fontSize: \"13px\" }}\n                  >{`${getCurrencyFormat({\n                    value: smartTrade.profit.usd,\n                    currency: \"USD\",\n                  })}$`}</Badge>\n                ) : (\n                  \"\"\n                )}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradeDetailsStatusTable;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport \"./SmartTradeDetailsTable.css\";\n\nconst SmartTradeDetailsTable = ({ smartTradeId, trades }: any) => {\n  const triggerSignMap: any = {\n    less: \"<\",\n    less_or_equal: \"<=\",\n    greater_or_equal: \">=\",\n    greater: \">\",\n  };\n\n  return (\n    trades && (\n      <div className=\"SmartTradeDetailsTable\">\n        <Table striped>\n          <thead>\n            <tr>\n              <th>Order</th>\n              <th>Price</th>\n              <th>Amount</th>\n              <th>Total</th>\n              <th>Trigger</th>\n              <th>Trailing</th>\n              <th>Status</th>\n              <th>Created</th>\n              <th>Updated</th>\n            </tr>\n          </thead>\n          <tbody>\n            {trades.map((trade: any) => (\n              <tr style={{ fontSize: \"14px\" }} key={trade.id}>\n                <td>{`${trade.order_type} ${trade.order_side}`}</td>\n                <td>\n                  <div>{`Desired: ${\n                    trade.initial_price ? trade.initial_price : \"\"\n                  }`}</div>\n                  <div>{`Real: ${\n                    trade.realised_price ? trade.realised_price : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`Desired: ${\n                    trade.initial_amount ? trade.initial_amount : \"\"\n                  }`}</div>\n                  <div>{`Real: ${\n                    trade.realised_amount ? trade.realised_amount : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`Desired: ${\n                    trade.initial_total ? trade.initial_total : \"\"\n                  }`}</div>\n                  <div>{`Real: ${\n                    trade.realised_total ? trade.realised_total : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`${\n                    trade.trigger_condition\n                      ? triggerSignMap[trade.trigger_condition]\n                      : \"\"\n                  } ${trade.trigger_price ? trade.trigger_price : \"\"}`}</div>\n                </td>\n                <td>\n                  <div>{`${trade.trail_value ? trade.trail_value : \"\"} ${\n                    trade.trail_percentage ? `(${trade.trail_percentage}%)` : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`${trade.status ? trade.status : \"\"}`}</div>\n                </td>\n                <td>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.created_at).format(\"DD/MM/YYYY\")\n                      : \"\"\n                  }`}</div>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.created_at).format(\"HH:mm\")\n                      : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.updated_at).format(\"DD/MM/YYYY\")\n                      : \"\"\n                  }`}</div>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.updated_at).format(\"HH:mm\")\n                      : \"\"\n                  }`}</div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    )\n  );\n};\n\nexport default SmartTradeDetailsTable;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, Modal, ToggleButton } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  SmartTradesContext,\n} from \"../../../App\";\nimport { fetchDetails } from \"../../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTradeDetails.css\";\nimport SmartTradeDetailsStatusTable from \"./SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable\";\nimport SmartTradeDetailsTable from \"./SmartTradeDetailsTable/SmartTradeDetailsTable\";\n\nconst purposeRadios = [\n  { name: \"Position\", value: \"position\" },\n  { name: \"Take profit\", value: \"take_profit\" },\n  { name: \"Reduce funds\", value: \"reduce_funds\" },\n  { name: \"Stop loss\", value: \"stop_loss\" },\n  { name: \"Panic\", value: \"panic\" },\n  { name: \"All\", value: \"\" },\n];\n\nconst SmartTradeDetails = ({\n  modalIsOpen,\n  setModalIsOpen,\n  smartTradeId,\n}: any) => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { smartTrades } = smartTradesState;\n  const smartTrade = smartTrades[smartTradeId];\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [purpose, setPurpose] = useState(\"\");\n  const [trades, setTrades] = useState([]);\n  const [account, setAccount] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  useEffect(() => {\n    if (smartTradeId) {\n      fetchDetails(\n        smartTradesDispatch,\n        smartTradesState,\n        errorsDispatch,\n        smartTradeId\n      ).then();\n    }\n  }, [smartTradeId]);\n\n  useEffect(() => {\n    if (smartTrade && smartTrade.trades) {\n      setTrades(smartTrade.trades);\n    }\n    if (smartTrade) {\n      setAccount(accounts[smartTrade.account.id]);\n    }\n  }, [smartTrade]);\n\n  useEffect(() => {\n    if (purpose) {\n      setTrades(\n        smartTrade.trades.filter(\n          (trade: any) => trade.trade_purpose === purpose\n        )\n      );\n    } else {\n      if (smartTrade && smartTrade.trades) {\n        setTrades(smartTrade.trades);\n      }\n    }\n  }, [purpose]);\n\n  return (\n    <>\n      {smartTrade && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              {`${smartTrade.pair\n                .split(\"_\")\n                .reverse()\n                .join(\"/\")} (Trade ID: ${smartTradeId})`}\n              {account && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    marginTop: \"4px\",\n                  }}\n                >\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"BotMarketIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <a\n                    onClick={(e: any) => {\n                      e.preventDefault();\n                      navigate({\n                        pathname: `/accounts/${account.id}`,\n                        search: window.location.search,\n                      });\n                    }}\n                    href=\"#\"\n                  >\n                    {account.name}\n                  </a>\n                </div>\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div>\n              <div className=\"SmartTradeDetailsControl\">\n                <SmartTradeDetailsStatusTable smartTradeId={smartTradeId} />\n              </div>\n              <div className=\"SmartTradeDetailsControl\">\n                <ButtonGroup>\n                  {purposeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-position-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio-detail-position\"\n                      value={radio.value}\n                      checked={purpose === radio.value}\n                      onChange={(e) => setPurpose(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n            </div>\n            {trades && (\n              <SmartTradeDetailsTable\n                smartTradeId={smartTradeId}\n                trades={trades}\n              />\n            )}\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradeDetails;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { ISmartTrade } from \"../interfaces/SmartTrade\";\nimport {\n  differenceInDays,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\nimport { convertFilterValueToDate } from \"./GeneralUtils\";\n\nexport const getObjectOfSmartTradesProfitsPerDay = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n  const dateStringProfits = (item: any) =>\n    moment(item.data.closed_at).format(\"YYYY-MM-DD\");\n\n  let resultProfits = _.groupBy(filteredSmartTrades, dateStringProfits);\n\n  return _.mapValues(resultProfits, (smartTrades: Array<any>) =>\n    _.sum(\n      smartTrades.map((smartTrade: any) => parseFloat(smartTrade.profit.usd))\n    )\n  );\n};\n\nexport const getSmartTradesProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\nexport const getSmartTradesAccumulativeProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\n\nexport const getSmartTradesPairsLeaderboardChartData = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n\n  const groupedResultProfits = _.groupBy(filteredSmartTrades, \"pair\");\n\n  const resultProfits = _.mapValues(\n    groupedResultProfits,\n    (groupedSmartTrades: any) =>\n      _.sum(\n        groupedSmartTrades.map((smartTrade: any) =>\n          parseFloat(smartTrade.profit.usd)\n        )\n      )\n  );\n\n  const sortedProfits = _(resultProfits)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n","import React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getSmartTradesAccumulativeProfitsChartData,\n  getSmartTradesPairsLeaderboardChartData,\n  getSmartTradesProfitsChartData,\n} from \"../../../../utils/SmartTradesUtil\";\nimport \"./SmartTradesCharts.css\";\n\ninterface SmartTradesChartsProps {}\n\nconst SmartTradesCharts: FC<SmartTradesChartsProps> = () => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, hasMore, smartTrades, filters } = smartTradesState;\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairProfitsLeaderboardData, setPairProfitsLeaderboardData] =\n    useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: \"USD\",\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getSmartTradesAccumulativeProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setProfitsData(\n      getSmartTradesProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setPairProfitsLeaderboardData(\n      getSmartTradesPairsLeaderboardChartData(\n        list.map((id: any) => smartTrades[id])\n      )\n    );\n  }, [list]);\n\n  return !hasMore ? (\n    <div className=\"SmartTradesCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, $`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, $`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs leaderboard by profit\",\n              pairProfitsLeaderboardData[0]\n            ) as any\n          }\n          data={{\n            labels: pairProfitsLeaderboardData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: pairProfitsLeaderboardData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <div className=\"SmartTradesChartsSpiner\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default SmartTradesCharts;\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, SmartTradesContext } from \"../../../../App\";\nimport Select from \"react-select\";\nimport \"./SmartTradesFilters.css\";\nimport DatePicker from \"react-datepicker\";\nimport { setSmartTradesFilters } from \"../../../../state/smartTrades/SmartTradesActions\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst timeRangeRadios = [\n  { name: \"Today\", value: \"today\" },\n  { name: \"Week\", value: \"week\" },\n  { name: \"Month\", value: \"month\" },\n  { name: \"All time\", value: \"allTime\" },\n  { name: \"Custom\", value: \"custom\" },\n];\n\nconst SmartTradesFilters = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const { filters, hasMore, list } = smartTradesState;\n\n  const updateFilter = async (filterItem: any) => {\n    smartTradesDispatch(\n      setSmartTradesFilters({\n        ...smartTradesState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accountsList.map((accountId: any) => ({\n      value: accountId,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${accounts[accountId].market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{accounts[accountId].name}</span>\n        </div>\n      ),\n      label_id: accounts[accountId].name,\n    })),\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"simple_buy\", label: \"Simple buy\" },\n    { value: \"simple_sell\", label: \"Simple sell\" },\n    { value: \"smart_sell\", label: \"Smart sell\" },\n    { value: \"smart_cover\", label: \"Smart cover\" },\n    { value: \"smart_buy\", label: \"Smart buy\" },\n    { value: \"smart_trade\", label: \"Smart trade\" },\n  ];\n\n  const statusOptions: any = [\n    { value: \"all\", label: \"All\" },\n    { value: \"active\", label: \"Active\" },\n    { value: \"finished\", label: \"Finished\" },\n    { value: \"successfully_finished\", label: \"Successfully finished\" },\n    { value: \"cancelled\", label: \"Cancelled\" },\n    { value: \"failed\", label: \"Failed\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    {\n      value: \"profit_percentage-desc\",\n      label: \"Profit percentage (Highest First)\",\n    },\n    {\n      value: \"profit_percentage-asc\",\n      label: \"Profit percentage (Lowest First)\",\n    },\n    { value: \"created_at-desc\", label: \"Opened (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Opened (Oldest first)\" },\n    { value: \"closed_at-desc\", label: \"Closed (Youngest first)\" },\n    { value: \"closed_at-asc\", label: \"Closed (Oldest first)\" },\n    { value: \"status-desc\", label: \"Status (Highest First)\" },\n    { value: \"status-asc\", label: \"Status (Lowest First)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"smartTradesFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <>\n      <div className=\"SmartTradesFilters\">\n        <div className=\"SmartTradesTimeRangeContainer\">\n          <ButtonGroup>\n            {timeRangeRadios.map((radio, idx) => (\n              <ToggleButton\n                key={idx}\n                id={`radio-${idx}`}\n                type=\"radio\"\n                disabled={hasMore}\n                variant=\"outline-primary\"\n                name=\"radio\"\n                value={radio.value}\n                checked={filters.from.label === radio.value}\n                onChange={(e) => {\n                  updateFilter({\n                    from: { ...filters.from, label: e.currentTarget.value },\n                  });\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {filters.from.label === \"custom\" && (\n          <div className=\"SmartTradesTimeRangeContainer\">\n            <div className=\"FilterTitle\">From</div>\n            <DatePicker\n              dateFormat=\"yyyy-MM-dd\"\n              disabled={hasMore}\n              selected={\n                filters.from.from\n                  ? moment(filters.from.from).toDate()\n                  : moment().toDate()\n              }\n              onChange={(date: any) => {\n                updateFilter({\n                  from: {\n                    label: \"custom\",\n                    from: moment(date).format(\"YYYY-MM-DD\"),\n                  },\n                });\n              }}\n              selectsStart\n              className=\"SmartTradesDateFilter\"\n              strictParsing\n            />\n          </div>\n        )}\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ accountId: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.accountId\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Status</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ status: option.value });\n            }}\n            value={statusOptions.find(\n              (option: any) => option.value === filters.status\n            )}\n            options={statusOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Type</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ type: option.value });\n            }}\n            value={typeOptions.find(\n              (option: any) => option.value === filters.type\n            )}\n            options={typeOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Sort by</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ sorting: option.value });\n            }}\n            value={sortingOptions.find(\n              (option: any) => option.value === filters.sorting\n            )}\n            options={sortingOptions}\n            className=\"Sorting\"\n          />\n        </div>\n      </div>\n      {!hasMore && (\n        <div className=\"SmartTradesFilters\">{`Total: ${list.length}`}</div>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradesFilters;\n","import React, { useContext } from \"react\";\nimport { AccountsContext, SmartTradesContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, Table } from \"react-bootstrap\";\n\nimport \"./SmartTradesTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nconst smartTradeTypes: any = {\n  simple_buy: \"Simple Buy\",\n  simple_sell: \"Simple Sell\",\n  smart_sell: \"Smart Sell\",\n  smart_trade: \"Smart Trade\",\n  smart_cover: \"Smart Cover\",\n  smart_buy: \"Smart Buy\",\n};\n\nconst SmartTradesTable = ({ setModalSmartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, smartTrades } = smartTradesState;\n\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account.id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const accountId = accountsList.filter(\n              (accId: any) => accId === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${accounts[accountId].market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{accounts[accountId].name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Side\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const side = originalRow.position.type === \"buy\" ? \"LONG\" : \"SHORT\";\n            return side;\n          },\n          id: \"side\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Type\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            smartTradeTypes[originalRow.data.type],\n\n          id: \"type\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.status.title,\n\n          id: \"status\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, %\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_percent = parseFloat(originalRow.profit.percent);\n            return pnl_percent ? (\n              <div\n                className={\n                  pnl_percent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                }\n              >{`${getCurrencyFormat({\n                value: pnl_percent,\n                currency: \"USD\",\n              })}%`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_percent\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            const pnl = parseFloat(originalRow.profit.volume);\n            return pnl ? (\n              <div\n                className={pnl >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"}\n              >{`${getCurrencyFormat({\n                value: pnl,\n                currency: quoteCurrency,\n              })} ${quoteCurrency}`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_quote\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, $\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_usd = parseFloat(originalRow.profit.usd);\n            return pnl_usd ? (\n              <Badge\n                bg={pnl_usd >= 0 ? \"success\" : \"danger\"}\n                style={{ fontSize: \"13px\" }}\n              >{`${getCurrencyFormat({\n                value: pnl_usd,\n                currency: \"USD\",\n              })}$`}</Badge>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_usd\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={baseCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.units.value,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={quoteCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.total.value,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                </div>\n              </>\n            );\n          },\n\n          id: \"volume\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Margin and Leverage\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return originalRow.leverage.enabled ? (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <div>{`${getCurrencyFormat({\n                    value: originalRow.margin.total,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  {originalRow.leverage && (\n                    <div>\n                      {`x${Math.floor(originalRow.leverage.value)} ${\n                        originalRow.leverage.type\n                      }`}\n                    </div>\n                  )}\n                </div>\n              </>\n            ) : (\n              \"\"\n            );\n          },\n\n          id: \"margin\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Created at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.created_at);\n            return (\n              <>\n                <div>{date.format(\"DD/MM/YYYY\")}</div>\n                <div>{date.format(\"HH:mm\")}</div>\n              </>\n            );\n          },\n\n          id: \"created_at\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Closed at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.closed_at);\n            return (\n              originalRow.data.closed_at && (\n                <>\n                  <div>{date.format(\"DD/MM/YYYY\")}</div>\n                  <div>{date.format(\"HH:mm\")}</div>\n                </>\n              )\n            );\n          },\n\n          id: \"closed_at\",\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((smartTradeId: number) => smartTrades[smartTradeId]),\n    });\n\n  return (\n    <div className=\"SmartTradesTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalSmartTradeId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default SmartTradesTable;\n","import React, { FC, useContext, useState } from \"react\";\nimport { AccountsContext } from \"../../../App\";\nimport SmartTradeDetails from \"../SmartTradeDetails/SmartTradeDetails\";\nimport SmartTradesCharts from \"./SmartTradesCharts/SmartTradesCharts\";\nimport SmartTradesFilters from \"./SmartTradesFilters/SmartTradesFilters\";\nimport \"./SmartTradesList.css\";\nimport SmartTradesTable from \"./SmartTradesTable/SmartTradesTable\";\n\ninterface SmartTradesListProps {}\n\nconst SmartTradesList: FC<SmartTradesListProps> = () => {\n  const [modalSmartTradeId, setModalSmartTradeId] = useState(\"\");\n\n  return (\n    <div className=\"SmartTradesList\">\n      <SmartTradesCharts />\n      <SmartTradesFilters />\n      <SmartTradesTable setModalSmartTradeId={setModalSmartTradeId} />\n      {!!modalSmartTradeId && (\n        <SmartTradeDetails\n          modalIsOpen={!!modalSmartTradeId}\n          setModalIsOpen={setModalSmartTradeId}\n          smartTradeId={modalSmartTradeId}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradesList;\n","import React, { FC, useContext, useEffect } from \"react\";\nimport { ErrorsContext, SmartTradesContext } from \"../../App\";\nimport { fetchSmartTrades } from \"../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTrades.css\";\nimport SmartTradesList from \"./SmartTradesList/SmartTradesList\";\n\ninterface SmartTradesProps {}\n\nconst SmartTrades: FC<SmartTradesProps> = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { filters } = smartTradesState;\n\n  useEffect(() => {\n    fetchSmartTrades(\n      smartTradesDispatch,\n      smartTradesState,\n      errorsDispatch\n    ).then();\n  }, [filters]);\n\n  return (\n    <div className=\"SmartTrades\">\n      <SmartTradesList />\n    </div>\n  );\n};\n\nexport default SmartTrades;\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport AccountDetails from \"./components/Accounts/AccountDetails/AccountDetails\";\nimport Accounts from \"./components/Accounts/Accounts\";\nimport { DCABotDetails } from \"./components/DCABots/DCABotDetails/DCABotDetails\";\nimport { DCABots } from \"./components/DCABots/DCABots\";\nimport GridBots from \"./components/GridBots/GridBots\";\nimport SmartTrades from \"./components/SmartTrades/SmartTrades\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<DCABots />} />\n        <Route path=\":botId\" element={<DCABotDetails />} />\n        <Route path=\"/gridbots\" element={<GridBots />} />\n        <Route path=\"/smarttrades\" element={<SmartTrades />} />\n        <Route path=\"/accounts\" element={<Accounts />} />\n        <Route path=\"/accounts/:accountId\" element={<AccountDetails />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default Router;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"./Router\";\n\nconst ROUTE_BASENAME = \"/botanstage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <BrowserRouter basename={ROUTE_BASENAME}> */}\n    <BrowserRouter>\n      <Router />\n    </BrowserRouter>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}