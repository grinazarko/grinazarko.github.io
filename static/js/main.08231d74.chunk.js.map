{"version":3,"sources":["reportWebVitals.ts","components/ErrorsAlerts/ErrorsAlerts.tsx","state/bots/BotsReducer.tsx","state/deals/DealsReducer.tsx","utils/ApiUtils.tsx","components/NavBar/NavBar.tsx","state/gridBots/GridBotsReducer.tsx","state/smartTrades/SmartTradesReducer.tsx","App.tsx","utils/BotsUtils.tsx","utils/DealsUtils.tsx","state/deals/DealsSelectors.tsx","state/bots/BotsActions.tsx","state/bots/BotsEffects.tsx","state/deals/DealsActions.tsx","state/deals/DealsEffects.tsx","utils/GeneralUtils.tsx","utils/ChartsUtils.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsCharts/DCABotDetailsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsDealsTable/DCABotDetailsDealsTable.tsx","components/DCABots/BotsList/BotPreview/BotPreview.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsSettings/DCABotDetailsSettingsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsInfo/DCABotDetailsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetails.tsx","components/DCABots/BotsFilters/BotsFilters.tsx","components/DCABots/BotsList/BotsListCharts/BotsListCharts.tsx","components/DCABots/BotsList/BotsList.tsx","components/DCABots/DCABots.tsx","utils/GridBotsUtils.tsx","state/gridBots/GridBotsActions.tsx","state/gridBots/GridBotsEffects.tsx","components/CommonComponents/CurrencyIcon/CurrencyIcon.tsx","components/GridBots/GridBotsList/GridBotsListTable/GridBotsListTable.tsx","components/GridBots/GridBotDetails/GridBotDetailsCharts/GridBotDetailsCharts.tsx","components/GridBots/GridBotDetails/GridBotDetailsTable/GridBotDetailsTable.tsx","components/GridBots/GridBotDetails/GridBotDetails.tsx","components/GridBots/GridBotsList/GridBotListMetrics/GridBotListMetrics.tsx","components/GridBots/GridBotsList/GridBotsList.tsx","components/GridBots/GridBots.tsx","state/smartTrades/SmartTradesActions.tsx","state/smartTrades/SmartTradesEffects.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsTable/SmartTradeDetailsTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetails.tsx","utils/SmartTradesUtil.tsx","components/SmartTrades/SmartTradesList/SmartTradesCharts/SmartTradesCharts.tsx","components/SmartTrades/SmartTradesList/SmartTradesFilters/SmartTradesFilters.tsx","components/SmartTrades/SmartTradesList/SmartTradesTable/SmartTradesTable.tsx","components/SmartTrades/SmartTradesList/SmartTradesList.tsx","components/SmartTrades/SmartTrades.tsx","Router.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorsAlerts","useContext","ErrorsContext","errors","errorsState","errorsDispatch","className","length","Alert","variant","onClose","type","dismissible","Heading","map","error","Link","onClick","window","open","botsStateInitializer","initialValue","initialBotsState","storedFilters","JSON","parse","localStorage","getItem","filters","list","hasMore","limit","offset","scope","account","sorting","bots","botsReducer","state","action","newList","payload","bot","id","newBots","_","keyBy","botId","Error","initialDealsState","deals","dealsReducer","period","periodInDays","newDeals","omit","commonLimiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","DEAL_LIMITER_SETTINGS","minTime","maxConcurrent","clearDatastore","timeout","API_KEY","URLSearchParams","location","search","get","SECRET","dealsLimiter","setDealsLimiter","limiterId","getDealsLimiter","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","limiter","schedule","fetch","headers","APIKEY","Signature","getBots","accountId","a","resetOffset","split","sortBy","sortDirection","getBotsUrl","response","json","getGridBots","accountTypes","accountTypesParams","accountType","join","getSmartTrades","page","perPage","pair","status","from","getSmartTradesUrl","getSmartTradeTrades","smartTradeId","getBot","getGridBotsProfits","gridBotId","getGridBotsMarketOrders","getDeal","dealId","getAccounts","getDeals","order","getStrategies","getBotStats","NavBar","useState","activeKey","setActiveKey","navigate","useNavigate","useLocation","useEffect","pathname","src","alt","Nav","Item","active","gridBotsStateInitializer","initialGridBotsState","gridBots","gridBotsReducer","gridBot","newGridBots","smartTradesStateInitializer","initialSmartTradesState","label","to","smartTrades","smartTradesReducer","smartTrade","newSmartTrades","ChartJS","register","CategoryScale","PointElement","LinearScale","BarElement","Title","Tooltip","LineElement","Legend","TimeScale","Filler","ArcElement","initialAccountsState","accounts","initialStrategiesState","strategies","initialErrorsState","errorsReducer","Set","add","Array","accountsReducer","strategiesReducer","AccountsContext","createContext","accountsState","accountsDispatch","StrategiesContext","strategiesState","strategiesDispatch","BotsContext","botsState","botsDispatch","GridBotsContext","gridBotsState","gridBotsDispatch","SmartTradesContext","smartTradesState","smartTradesDispatch","DealsContext","dealsState","dealsDispatch","App","useReducer","getAccountData","data","getStrategiesData","Provider","value","getMaxUsage","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","parseFloat","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","market_code","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","getCurrencyPriceInUsd","currency","includes","Promise","resolve","marketInfo","last","currencyPriceInUsd","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","find","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getFundsLocked","fundsLocked","getCurrencyFormat","signDisplay","Intl","NumberFormat","maximumFractionDigits","format","maxUsageInUsd","getReturns","reduce","currDeal","nextDeal","usd_final_profit","differenceInHours","b","Math","ceil","diff","differenceInDays","getDealAgeInHours","deal","moment","closed_at","getAllDealsForOneBot","daysWithin","ofsetCallback","hoursWithin","fetchAllDealsInLoop","slice","lastDeal","filteredDeals","filter","getObjectOfProfitPerDay","result","groupBy","item","mapValues","sum","getLastNDays","n","i","idx","startOf","subtract","date","reverse","getProfitChartData","profitObject","nDays","lastDays","profits","day","labels","getAccumulativeProfitChartData","currentvalue","accProfits","profit","acc","getOneBotProfitsChartData","botsDeals","difference","getOneBotCurrencyLeaderbord","profitsByPair","getObjectOfProfitPerPair","sortedProfits","toPairs","orderBy","INFINITY_IN_DAYS","is30daysDealsLoaded","isAllDealsLoaded","selectAllDealsWithin30Days","selectAllDeals","setNewBotsList","botsList","setHasMore","addToBotsList","setBotsOffset","setBot","fetchBots","customLimit","offsetLimit","botItem","name","profits_in_usd","today_usd_profit","funds_locked_in_active_deals","todayUsdProfit","deals30daysForBot","returns","getDealsList","setOffset","resetDeals","fetchDealsForBotFor30Days","message","fetchAllDealsForBot","reset","getAllActiveDeals","usePrevious","ref","useRef","current","convertFilterValueToDate","filterFrom","dateFormat","filterValue","ProfitChartOptions","text","tooltipCustomVaueFormat","scales","x","time","unit","tooltipFormat","ticks","source","y","beginAtZero","responsive","plugins","legend","display","title","tooltip","intersect","mode","callbacks","AccumulativeChartOptions","lineTension","gridLines","offsetGridLines","filler","propagate","drawTime","LeaderbordChartOptions","indexAxis","stacked","callback","DealsCountBarChartOptions","isWeekUnit","stepSize","DCABotDetailsMainCharts","xLabel","yLabel","dateLabelsDays","timeRangeValue","countsValues","dates","delsGrouped","getDealsCountPerDay","dealsStatusData","countsObj","countBy","localized_status","keys","values","key","dealsStatusesCounts","dealsDurationHistogramData","dealDurations","start","created_at","end","getDealsDurationHistogramData","options","datasets","borderColor","backgroundColor","aspectRatio","tooltipItem","dataset","total","previousValue","currentValue","dataIndex","percentage","floor","legendItem","index","width","borderWidth","barPercentage","DCABotDetailsProfitsCharts","accumulativeProfitsData","setAccumulativeProfitsData","profitsData","setProfitsData","pairsLeaderbordData","setPairsLeaderbordData","getOneBotAccumulativeProfitsChartData","fill","DCABotDetailsCharts","infoKey","setDateLabelsDays","oldestDealAgeInDaysSinceOpened","pop","badgeVariant","Cancelled","StopLoss","Failed","Completed","Liquidated","Switched","DCABotDetailsDealsTable","columns","React","useMemo","Header","accessor","disableSortBy","originalRow","rowIndex","Cell","cell","Badge","style","fontSize","bg","Date","sortType","utc","duration","days","asDays","daysFormatted","hours","hoursFormatted","minutes","minutesFormatted","bought_average_price","sold_average_price","amount","bought_amount","sold_amount","volume","bought_volume","sold_volume","completed_safety_orders_count","completed_manual_safety_orders_count","Number","original","numberValue","color","useTable","disableSortRemove","autoResetPage","autoResetSortBy","initialState","pageSize","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","pageCount","gotoPage","nextPage","previousPage","pageIndex","modalIsOpen","setModalIsOpen","selectedDeal","setSelectedDeal","Table","striped","bordered","hover","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","marginLeft","cursor","isSorted","isSortedDesc","row","getRowProps","cells","getCellProps","TablePagination","range","renderPaginationNumberItem","Pagination","renderPaginationBeginning","First","Prev","renderPaginationEnd","Next","Last","DealModal","setDeal","dl","Modal","show","onHide","scrollable","size","closeButton","Body","bot_events","event","Footer","Button","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","buy_or_strong_buy","strong_buy","sell_or_strong_sell","strong_sell","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","getBotsStrategyName","botsStrategy","marketsStrategy","marketStrategy","strategy_key","BotPreview","statsLoaded","setStatsLoaded","getFundsLockedAndTodaysProfit","getMaxUsageEffect","getReturnsEffect","random","age","formatter","strategy_list","botType","marketIcon","market_icon","is_enabled","marginBottom","fontWeight","active_deals_count","finished_deals_profit_usd","active_deals_usd_profit","IconsSet","backgroundImage","String","BotName","BotInfo","BotReturns","minimumFractionDigits","returnsCalculated","OverlayTrigger","placement","delay","hide","overlay","DCABotDetailsMainInfo","setFundsLocked","fundsLockedShare","setFundsLockedShare","setMaxUsage","reservedFunds","setReservedFunds","percentFormatter","botPairs","botMarket","startCondition","percent","points","getMaxUsageInBotCurrency","mxUsg","activeDeals","reserved_base_funds","reserved_quote_funds","getReservedFundsInBotCurrency","getFundsLockedInBotCurrency","avgDealDuration","avgDealDurationInMilliseconds","getAverageDealDuration","DCABotDetailsProfitsInfo","fromFilter","toFilter","averageTp","setAverageTp","averageProfitFromDeal","setAverageProfitFromDeal","averageDailyProfit","setAverageDailyProfit","setReturns","totalProfitUsd","setTotalProfitUsd","mean","final_profit_percentage","getAverageTp","getAverageProfitFromDeal","createdAt","startBotDate","fromFilterMoment","toFilterMoment","maxDate","max","unzip","zip","chartData","isBefore","isAfter","getAverageDailyProfit","getTotalProfitUsd","DCABotDetailsSettingsInfo","additionalCurrency","baseOrderSize","setBaseOrderSize","safetyOrderSize","setSafetyOrderSize","getBaseOrderSize","safety_order_volume_type","getSafetyOrderSize","leverageType","leverage_type","profit_currency","take_profit","take_profit_type","trailing_enabled","trailing_deviation","stop_loss_percentage","stop_loss_timeout_in_seconds","start_order_type","active_safety_orders_count","safety_order_step_percentage","martingale_step_coefficient","DCABotDetailsInfo","setInfoKey","Tabs","onSelect","k","Tab","eventKey","tabClassName","statusFilterOptions","DCABotDetails","params","useParams","setTimeRangeValue","NaN","setBotId","previousBotId","setBotsDeals","isDataLoading","setIsDataLoading","isAllDataLoading","setIsAllDataLoading","setAccount","percentLoadedDeals","setPercentLoadedDeals","statusFilter","setStatusFilter","pairFilter","setPairFilter","pairFilterOptions","setPairFilterOptions","setFromFilter","setToFilter","clearFilters","refreshData","fetchBot","dateFrom","isSame","dateTo","filterTo","filterByStatus","filterByPair","loadedDeals","finished_deals_count","stop","dropWaitingJobs","disconnect","ProgressBar","now","animated","ButtonGroup","radio","ToggleButton","checked","onChange","e","currentTarget","option","theme","colors","primary25","primary","selected","selectsStart","startDate","endDate","strictParsing","selectsEnd","minDate","BotsFilters","updateFilter","filterItem","accountsOptions","label_id","scopeOptions","typeOptions","sortingOptions","setItem","stringify","filterOption","candidate","input","BotsListCharts","dealsLoaded","setDealsLoaded","botsLoaded","setBotsLoaded","numberHandled","setNumberHandled","profitsChartData","setProfitsChartData","accumulativeProfitsChartData","setAccumulativeProfitsChartData","botsLeaderboardChartData","setBotsLeaderboardChartData","getBotsList","getBoatsDeals","profitsObject","botsIds","currentObj","mergeWith","profit1","profit2","calculateProfitPerDayForListOfBots","sortedAndSelected10FirstBots","round","EPSILON","getBotsLeaderboardChartData","botsWithLoadedDeals","BotsList","showCharts","setShowCharts","isNothingFound","previousFilters","every","haveAllBotsDealsFor30Days","textAlign","dataLength","next","loader","Spinner","animation","endMessage","DCABots","cryptoCoins","BTC","ETH","BNB","USDT","USDC","XRP","TRX","BUSD","DOGE","getInitialInvestment","startPrice","start_price","quantityPerGrid","quantity_per_grid","pureInitialGrids","grid_lines","sort","abs","price","shift","baseInvestment","gridLine","quoteInvestment","allInQuote","allInUsd","createdOnDay","updated_at","marketData","market_data","current_price","usd","getCurrentInvestment","currentPrice","investment_base_currency","investment_quote_currency","getProfitsWithin30days","getProfitAgeInHours","getMarketOrdersWithin30days","marketOrders","grid_lines_orders","marketOrder","getMarketOrderAgeInHours","tradingFee","resultProfits","resultMarketOrders","objectProfits","objectMarketOrders","setNewGridBotsList","gridBotsList","addToGridBotsList","setGridBot","spotAccountsTypes","fetchInitialInvestments","gridBotItem","initialInvestments","fetchCurrentInvestments","currentInvestments","fetchProfits","fetchMarketOrders","fetchGridBotsMetrics","CurrencyIcon","formattedCurrency","replace","height","borderRadius","backgroundSize","toLowerCase","GridBotsListTable","investment","setModalGridBotId","upper_price","lower_price","grids_quantity","grigLinesNumber","sellOrdersNumber","line","order_placed","side","buyOrdersNumber","cur","val","invesmentChange","quoteProfit","profitPercent","usdProfit","usd_profit","pnl","pnlPercent","alignItems","justifyContent","rows","GridBotDetailsCharts","chartTooltipFormatLabel","parsed","botsProfits","getOneGridBotAccumulativeProfitsChartData","getOneGridBotProfitsChartData","GridBotDetailsTable","setProfit","avgProfit","setAvgProfit","running","setRunning","summarizedProfits","realProfit","realAvgProfit","realReturns","timeRangeRadios","GridBotDetails","setTradingFee","setMarketOrders","setProfits","fetchDetails","status_string","InputGroup","FormControl","target","Text","GridBotListMetrics","totalInvestments","setTotalInvestments","totalProfits","setTotalProfits","totaPnL","setTotalPnL","isLoading","setIsLoading","allHaveInvestments","allHaveCurrentInvestments","allHaveProfits","calculatedInitialInvestments","calculatedCurrentInvestments","calculatedProfits","investmentRadios","valuesRadios","GridBotsList","setInvestment","setValues","modalGridBotId","fetchGridBots","GridBots","setNewSmartTradesList","smartTradesList","addToSmartTradesList","setSmartTrade","fromDate","fetchTrades","smartTradeItem","trades","smartTradeTrades","SmartTradeDetailsStatusTable","position","average_enter_price","average_close_price","SmartTradeDetailsTable","triggerSignMap","less","less_or_equal","greater_or_equal","greater","trade","order_type","order_side","initial_price","realised_price","initial_amount","realised_amount","initial_total","realised_total","trigger_condition","trigger_price","trail_value","trail_percentage","purposeRadios","SmartTradeDetails","purpose","setPurpose","setTrades","trade_purpose","getObjectOfSmartTradesProfitsPerDay","filteredSmartTrades","SmartTradesCharts","pairProfitsLeaderboardData","setPairProfitsLeaderboardData","smartTradesProfitsByDays","oldestTradeDate","min","getSmartTradesAccumulativeProfitsChartData","getSmartTradesProfitsChartData","groupedResultProfits","groupedSmartTrades","getSmartTradesPairsLeaderboardChartData","SmartTradesFilters","statusOptions","disabled","toDate","isDisabled","smartTradeTypes","simple_buy","simple_sell","smart_sell","smart_trade","smart_cover","smart_buy","SmartTradesTable","setModalSmartTradeId","pnl_percent","pnl_usd","units","enabled","margin","SmartTradesList","modalSmartTradeId","SmartTrades","fetchSmartTrades","Router","element","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08231d74.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via{\" \"}\n          <Alert.Link\n            onClick={() => {\n              window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n            }}\n          >\n            Telegram\n          </Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import _ from \"lodash\";\nimport { IBot, IBotFilters } from \"../../interfaces/Bot\";\nimport { BotsAction } from \"./BotsActions\";\n\nexport interface IBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IBotFilters;\n  limit: number;\n  bots: { [key: number]: IBot };\n}\n\nexport const botsStateInitializer = (\n  initialValue = initialBotsState\n): IBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"botsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  scope: \"enabled\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 15,\n  offset: 0,\n  filters: initialFiltersState,\n  bots: {},\n};\n\nexport function botsReducer(\n  state: IBotsState = initialBotsState,\n  action: BotsAction\n): IBotsState {\n  switch (action.type) {\n    case \"setNewBotsList\":\n      const newList = action.payload.map((bot) => bot.id);\n      const newBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, bots: newBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToBotsList\":\n      const list = action.payload.map((bot) => bot.id);\n      const bots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        bots: { ...state.bots, ...bots },\n      };\n    case \"setBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setBot\":\n      return {\n        ...state,\n        bots: { ...state.bots, [action.payload.botId]: action.payload.bot },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { DealsAction } from \"./DealsActions\";\nimport { IDeal } from \"../../interfaces/Deal\";\nimport _ from \"lodash\";\n\nexport interface IDealsState {\n  deals: {\n    [key: string]: { list: Array<IDeal>; period: number; offset?: number };\n  };\n}\n\nexport const initialDealsState: IDealsState = {\n  deals: {},\n};\n\nexport function dealsReducer(\n  state: IDealsState = initialDealsState,\n  action: DealsAction\n): IDealsState {\n  switch (action.type) {\n    case \"getDealsList\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            list: action.payload.deals,\n            period: action.payload.periodInDays,\n          },\n        },\n      };\n    case \"setOffset\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            offset: action.payload.offset,\n          },\n        },\n      };\n    case \"resetDeals\":\n      if (action.payload.botId in state.deals) {\n        const newDeals = _.omit(state.deals, [action.payload.botId]);\n        return {\n          ...state,\n          deals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    default:\n      throw new Error();\n  }\n}\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\nimport { IBotApi } from \"../interfaces/Bot\";\nimport { IDealApi } from \"../interfaces/Deal\";\nimport { IGridBotApi } from \"../interfaces/GridBot\";\n\nconst commonLimiter = new Bottleneck({\n  reservoir: 13,\n  reservoirRefreshAmount: 13,\n  reservoirRefreshInterval: 1000,\n});\n\nexport const DEAL_LIMITER_SETTINGS = {\n  id: \"DEAL_LIMITER\",\n  reservoir: 0,\n  reservoirRefreshAmount: 1,\n  reservoirRefreshInterval: 1000,\n  minTime: 1000,\n  maxConcurrent: 1,\n  clearDatastore: true,\n  timeout: 2000,\n};\n\nconst API_KEY =\n  new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\nconst SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n//we need that hack for stopping loading heavy deals request\nexport let dealsLimiter = new Bottleneck(DEAL_LIMITER_SETTINGS);\n\nexport function setDealsLimiter(limiterId: any) {\n  dealsLimiter = new Bottleneck({ ...DEAL_LIMITER_SETTINGS, id: limiterId });\n}\n\nexport function getDealsLimiter() {\n  return dealsLimiter;\n}\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (\n  method: string,\n  path: string,\n  limiter: any = commonLimiter\n) => {\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n): Promise<Array<IBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      scope ? `&scope=${scope}` : \"\"\n    }${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getGridBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  accountId: string,\n  accountTypes: string[],\n  state = \"enabled\"\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const accountTypesParams = accountTypes\n    .map((accountType) => `&account_types[]=${accountType}`)\n    .join(\"\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/grid_bots?offset=${offset}&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      accountId ? `&account_ids[]=${accountId}` : accountTypesParams\n    }${state ? `&state=${state}` : \"\"}`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getSmartTrades = async (\n  page: number,\n  perPage: number,\n  sorting: string,\n  accountId: string,\n  type: string,\n  pair: string,\n  status: string,\n  from: string\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getSmartTradesUrl = () =>\n    `/public/api/v2/smart_trades?page=${page}&per_page=${perPage}&order_by=${sortBy}&order_direction=${sortDirection}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }${type ? `&type=${type}` : \"\"}${\n      pair ? `&pair=${pair}` : \"\"\n    }&status=${status}${from ? `&from=${from}` : \"\"}`;\n\n  return callApi(\"GET\", getSmartTradesUrl()).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getSmartTradeTrades = async (\n  smartTradeId: number\n): Promise<IBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/v2/smart_trades/${smartTradeId}/trades`\n  ).then((response: any) => response.json());\n};\nexport const getBot = async (botId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/bots/${botId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBot = async (gridBotId: number): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsProfits = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}/profits`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsMarketOrders = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/grid_bots/${gridBotId}/market_orders`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeal = async (dealId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/deals/${dealId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccounts = async () => {\n  return callApi(\"GET\", `/public/api/ver1/accounts`).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getDeals = async (\n  botId: number,\n  offset: number,\n  limit: number,\n  scope: string,\n  order: string\n): Promise<Array<IDealApi>> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=${scope}&order=${order}`,\n    dealsLimiter\n  ).then((response: any) => response.json());\n};\n\nexport const getStrategies = async () => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/marketplace/items?&limit=1000`\n  ).then((response: any) => response.json());\n};\n\nexport const getBotStats = async (botId: number) => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/bots/stats?bot_id=${botId}`\n  ).then((response: any) => response.json());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"./NavBar.css\";\n\nexport const NavBar = () => {\n  const [activeKey, setActiveKey] = useState(\"DCA\");\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const goToGridbots = () => {\n    navigate({\n      pathname: `/gridbots`,\n      search: window.location.search,\n    });\n  };\n  const goToDCABots = () => {\n    navigate({\n      pathname: `/`,\n      search: window.location.search,\n    });\n  };\n  const goToSmartTrades = () => {\n    navigate({\n      pathname: `/smarttrades`,\n      search: window.location.search,\n    });\n  };\n\n  useEffect(() => {\n    if (location.pathname === \"/\") {\n      setActiveKey(\"DCA\");\n    } else if (location.pathname === \"/gridbots\") {\n      setActiveKey(\"grid\");\n    } else if (location.pathname === \"/smarttrades\") {\n      setActiveKey(\"smarttrades\");\n    }\n  }, [location]);\n\n  return (\n    <div className=\"NavBar\">\n      <div className=\"NavBarContainer\">\n        <div className=\"LogoContainer\">\n          <img className=\"Logo\" src={`BotAn__icon.png`} alt=\"logo\" />\n        </div>\n        <div className=\"Navigation\">\n          <Nav>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"DCA\"} onClick={goToDCABots}>\n                DCA Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"grid\"} onClick={goToGridbots}>\n                Grid Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                active={activeKey === \"smarttrades\"}\n                onClick={goToSmartTrades}\n              >\n                Smart Trades\n              </Nav.Link>\n            </Nav.Item>\n            {/* <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>\n                Accounts\n              </Nav.Link>\n            </Nav.Item> */}\n          </Nav>\n        </div>\n\n        <div\n          className=\"CommunityLink\"\n          onClick={() => {\n            window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n          }}\n        >\n          <span className=\"SupportLabel\">Community</span>\n          <img className=\"TelegramIcon\" src={`image 8.png`} alt=\"logo\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\nimport { GridBotsAction } from \"./GridBotsActions\";\n\nexport interface IGridBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IGridBotFilters;\n  limit: number;\n  gridBots: { [key: number]: IGridBot };\n}\n\nexport const gridBotsStateInitializer = (\n  initialValue = initialGridBotsState\n): IGridBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"GridBotsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountType: \"spot\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialGridBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 10,\n  offset: 0,\n  filters: initialFiltersState,\n  gridBots: {},\n};\n\nexport function gridBotsReducer(\n  state: IGridBotsState = initialGridBotsState,\n  action: GridBotsAction\n): IGridBotsState {\n  switch (action.type) {\n    case \"setNewGridBotsList\":\n      const newList = action.payload.map((gridBot) => gridBot.id);\n      const newGridBots = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, gridBots: newGridBots };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToGridBotsList\":\n      const list = action.payload.map((gridBot) => gridBot.id);\n      const gridBots = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        gridBots: { ...state.gridBots, ...gridBots },\n      };\n    case \"setGridBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setGridBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setGridBot\":\n      return {\n        ...state,\n        gridBots: {\n          ...state.gridBots,\n          [action.payload.gridBotId]: action.payload.gridBot,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import _ from \"lodash\";\nimport { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\nimport { SmartTradesAction } from \"./SmartTradesActions\";\n\nexport interface ISmartTradesState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: ISmartTradeFilters;\n  limit: number;\n  smartTrades: { [key: number]: ISmartTrade };\n}\n\nexport const smartTradesStateInitializer = (\n  initialValue = initialSmartTradesState\n): ISmartTradesState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"smartTradesFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountId: \"\",\n  sorting: \"created_at-desc\",\n  type: \"\",\n  status: \"all\",\n  from: { label: \"month\", from: \"\", to: \"\" },\n  pair: \"\",\n};\n\nexport const initialSmartTradesState: any = {\n  list: [],\n  hasMore: true,\n  limit: 100,\n  offset: 1,\n  filters: initialFiltersState,\n  smartTrades: {},\n};\n\nexport function smartTradesReducer(\n  state: ISmartTradesState = initialSmartTradesState,\n  action: SmartTradesAction\n): ISmartTradesState {\n  switch (action.type) {\n    case \"setNewSmartTradesList\":\n      const newList = action.payload.map((smartTrade) => smartTrade.id);\n      const newSmartTrades = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, smartTrades: newSmartTrades };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToSmartTradesList\":\n      const list = action.payload.map((smartTrade) => smartTrade.id);\n      const smartTrades = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        smartTrades: { ...state.smartTrades, ...smartTrades },\n      };\n    case \"setSmartTradesOffset\":\n      return { ...state, offset: action.payload };\n    case \"setSmartTradesFilters\":\n      return { ...state, filters: action.payload };\n    case \"setSmartTrade\":\n      return {\n        ...state,\n        smartTrades: {\n          ...state.smartTrades,\n          [action.payload.smartTradeId]: action.payload.smartTrade,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport {\n  botsReducer,\n  botsStateInitializer,\n  initialBotsState,\n} from \"./state/bots/BotsReducer\";\nimport { dealsReducer, initialDealsState } from \"./state/deals/DealsReducer\";\nimport { getAccounts, getStrategies } from \"./utils/ApiUtils\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { Outlet } from \"react-router-dom\";\nimport {\n  gridBotsReducer,\n  gridBotsStateInitializer,\n  initialGridBotsState,\n} from \"./state/gridBots/GridBotsReducer\";\nimport {\n  initialSmartTradesState,\n  smartTradesReducer,\n  smartTradesStateInitializer,\n} from \"./state/smartTrades/SmartTradesReducer\";\n\nChartJS.register(\n  CategoryScale,\n  PointElement,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement\n);\n\nconst initialAccountsState: any = {\n  accounts: [],\n};\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction accountsReducer(state = initialAccountsState, action: any) {\n  switch (action.type) {\n    case \"setAccounts\":\n      return { accounts: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nexport const BotsContext = createContext({\n  botsState: initialBotsState,\n  botsDispatch: (state: any) => {},\n});\nexport const GridBotsContext = createContext({\n  gridBotsState: initialGridBotsState,\n  gridBotsDispatch: (state: any) => {},\n});\nexport const SmartTradesContext = createContext({\n  smartTradesState: initialSmartTradesState,\n  smartTradesDispatch: (state: any) => {},\n});\nexport const DealsContext = createContext({\n  dealsState: initialDealsState,\n  dealsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [botsState, botsDispatch] = useReducer(\n    botsReducer,\n    initialBotsState,\n    botsStateInitializer\n  );\n  const [gridBotsState, gridBotsDispatch] = useReducer(\n    gridBotsReducer,\n    initialGridBotsState,\n    gridBotsStateInitializer\n  );\n\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n  const [smartTradesState, smartTradesDispatch] = useReducer(\n    smartTradesReducer,\n    initialSmartTradesState,\n    smartTradesStateInitializer\n  );\n  const [dealsState, dealsDispatch] = useReducer(\n    dealsReducer,\n    initialDealsState\n  );\n\n  const getAccountData = async () => {\n    try {\n      const data = await getAccounts();\n      accountsDispatch({ type: \"setAccounts\", payload: data });\n    } catch {\n      accountsDispatch({ type: \"setAccounts\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching accounts list\",\n      });\n    }\n  };\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAccountData();\n    getStrategiesData();\n  }, []);\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <BotsContext.Provider value={{ botsState, botsDispatch }}>\n            <SmartTradesContext.Provider\n              value={{ smartTradesState, smartTradesDispatch }}\n            >\n              <GridBotsContext.Provider\n                value={{ gridBotsState, gridBotsDispatch }}\n              >\n                <DealsContext.Provider value={{ dealsState, dealsDispatch }}>\n                  <div className=\"App\">\n                    <NavBar />\n                    <Outlet />\n                    <ErrorsAlerts />\n                  </div>\n                </DealsContext.Provider>\n              </GridBotsContext.Provider>\n            </SmartTradesContext.Provider>\n          </BotsContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import _ from \"lodash\";\nimport { IBot } from \"../interfaces/Bot\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\nimport { callApi } from \"./ApiUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account || !account.id) {\n    return 0;\n  }\n\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst getCurrencyPriceInUsd = async (market_code: any, currency: any) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(1);\n  } else {\n    return await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n  }\n};\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(market_code, currency);\n  return {\n    baseOrderVolume: baseOrderVolume * currencyPriceInUsd,\n    safetyOrderVolume: safetyOrderVolume * currencyPriceInUsd,\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nexport const isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nexport function getFundsLocked(bot: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? bot.fundsLocked / leverage : bot.fundsLocked;\n}\n\nexport function getFundsLockedInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let fundsLocked = 0;\n  let currency = quoteCurrency;\n\n  if (bot.strategy === \"long\") {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.bought_volume),\n      0\n    );\n    currency = quoteCurrency;\n  } else if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_amount),\n      0\n    );\n    currency = baseCurrency;\n  } else if (bot.strategy === \"short\" && !isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_volume),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  const leverage = parseFloat(bot.leverage_custom_value);\n\n  return {\n    value: leverage ? fundsLocked / leverage : fundsLocked,\n    currency,\n  };\n}\n\nexport const getBaseOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let additionalCurrency = \"\";\n\n  if (bot.base_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.base_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.base_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getSafetyOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n\n  let additionalCurrency = \"\";\n\n  if (bot.safety_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.safety_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.safety_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getCurrencyFormat = (\n  { value, currency }: any,\n  signDisplay: any = \"auto\"\n) => {\n  if (currency.includes(\"BTC\")) {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 6,\n      signDisplay,\n    }).format(value);\n  } else if (currency === \"marketPrice\") {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 8,\n      signDisplay,\n    }).format(value);\n  } else {\n    return new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 2,\n      signDisplay,\n    }).format(value);\n  }\n};\n\nexport async function getMaxUsageInBotCurrency(bot: IBot, account: any) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let maxUsageInUsd = 0;\n\n  if (bot.maxUsage) {\n    maxUsageInUsd = bot.maxUsage;\n  } else {\n    maxUsageInUsd = await getMaxUsage(bot, account);\n  }\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    currency = baseCurrency;\n  } else {\n    currency = quoteCurrency;\n  }\n  const currencyPriceInUsd = await getCurrencyPriceInUsd(\n    account.market_code,\n    currency\n  );\n  return {\n    value: maxUsageInUsd / currencyPriceInUsd,\n    currency,\n  };\n}\n\nexport function getReservedFundsInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let reservedFunds = 0;\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_base_funds.toString()),\n      0\n    );\n    currency = baseCurrency;\n  } else {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_quote_funds.toString()),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  return {\n    value: reservedFunds,\n    currency,\n  };\n}\n\nexport function getReturns(maxUsage: any, deals: any) {\n  if (maxUsage === 0) {\n    return 0;\n  }\n  const profit30Days = deals.reduce(\n    (currDeal: any, nextDeal: any) => ({\n      usd_final_profit:\n        parseFloat(currDeal.usd_final_profit) +\n        parseFloat(nextDeal.usd_final_profit),\n    }),\n    { usd_final_profit: 0 }\n  )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n\nexport function getBotsLeaderboardChartData(botsState: IBotsState) {\n  const bots = botsState.list.map((botId: number) => {\n    const bot = botsState.bots[botId];\n    return {\n      maxUsage: bot.maxUsage || 0,\n      name: bot.name,\n      fundsLocked: getFundsLocked(bot),\n    };\n  });\n  const sortedAndSelected10FirstBots = _.sortBy(bots, [\n    \"maxUsage\",\n    \"fundsLocked\",\n  ])\n    .reverse()\n    .slice(0, 10);\n  return [\n    sortedAndSelected10FirstBots.map((bot) => bot.name),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.fundsLocked + Number.EPSILON) * 100) / 100\n    ),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.maxUsage + Number.EPSILON) * 100) / 100\n    ),\n  ];\n}\n","import { getDeals } from \"./ApiUtils\";\nimport moment from \"moment\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport _ from \"lodash\";\nimport { IDealsState } from \"../state/deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../state/deals/DealsSelectors\";\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60));\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60 * 24));\n\nexport const getDealAgeInHours = (deal: any) =>\n  differenceInHours(moment(), moment(deal.closed_at));\n\nexport const getDealAgeInDaysSinceOpened = (deal: any) =>\n  differenceInDays(moment(), moment(deal.created_at));\n\nexport const getAllDealsForOneBot = async (\n  botId: number,\n  daysWithin = 30,\n  ofsetCallback = (offset: number) => {}\n) => {\n  const hoursWithin = 24 * daysWithin;\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsInLoop = async () => {\n    const newDeals = await getDeals(\n      botId,\n      offset,\n      limit,\n      \"finished\",\n      \"closed_at\"\n    );\n\n    if (newDeals.length === 0) {\n      return;\n    }\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= hoursWithin\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      ofsetCallback(offset);\n      await fetchAllDealsInLoop();\n    } else {\n      const filteredDeals = newDeals.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin\n      );\n      deals = [...deals, ...filteredDeals];\n    }\n  };\n\n  await fetchAllDealsInLoop();\n\n  return deals;\n};\n\nexport const getObjectOfProfitPerDay = (deals: Array<IDeal>) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  let result = _.groupBy(deals, dateString);\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfProfitPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const calculateProfitPerDayForListOfBots = (\n  dealsState: IDealsState,\n  botsIds: Array<number>\n) => {\n  return botsIds.reduce((currentObj: any, botId: number) => {\n    const botsDeals = getObjectOfProfitPerDay(\n      selectAllDealsWithin30Days(dealsState, botId)\n    );\n\n    return _.mergeWith(\n      botsDeals,\n      currentObj,\n      (profit1: number, profit2: number) => {\n        profit1 = profit1 || 0;\n        profit2 = profit2 || 0;\n        return profit1 + profit2;\n      }\n    );\n  }, {});\n};\n\nexport const getLastNDays = (n: number = 30) =>\n  [...new Array(n)]\n    .map((i, idx) => moment().startOf(\"day\").subtract(idx, \"days\"))\n    .map((date: any) => date.format(\"YYYY-MM-DD\"))\n    .reverse();\n\nexport const getProfitChartData = (profitObject: any, nDays = 30) => {\n  const lastDays = getLastNDays(nDays);\n\n  const profits = lastDays.map((day: string) => {\n    return day in profitObject ? profitObject[day] : 0;\n  });\n\n  const labels = lastDays.map((day: any) => moment(day, \"YYYY-MM-DD\"));\n  return [labels, profits];\n};\n\nexport const getAccumulativeProfitChartData = (\n  profitObject: any,\n  nDays = 30\n) => {\n  const profits = getProfitChartData(profitObject, nDays);\n  let currentvalue = 0;\n  const accProfits = profits[1].map((profit: any) => {\n    const acc = currentvalue + profit;\n    currentvalue = acc;\n    return acc;\n  });\n  return [profits[0], accProfits];\n};\n\nexport const getDealsCountPerDay = (deals: IDeal[], dates: string[]) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  const delsGrouped = _.groupBy(deals, dateString);\n  const result = _.mapValues(\n    delsGrouped,\n    (deals: Array<IDeal>) => deals.length\n  );\n\n  return dates.map((day: string) => {\n    return day in result ? result[day] : 0;\n  });\n};\n\nexport const dealsStatusesCounts = (deals: IDeal[]) => {\n  const countsObj = _.countBy(deals, (deal) => deal.localized_status);\n  const keys = [\n    \"Cancelled\",\n    \"StopLoss\",\n    \"Failed\",\n    \"Completed\",\n    \"Closed at Market Price\",\n    \"Liquidated\",\n    \"Switched\",\n  ];\n  const values = keys.map((key) => countsObj[key]);\n  return [keys, values];\n};\n\nexport const getDealsDurationHistogramData = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return differenceInHours(end, start);\n  });\n  const countsObj = _.countBy(dealDurations);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getAverageDealDuration = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return end.diff(start);\n  });\n\n  const avgDealDurationInMilliseconds =\n    _.sum(dealDurations) / dealDurations.length || 0;\n\n  return moment.utc(avgDealDurationInMilliseconds).format(\"HH:mm\");\n};\n\nexport const getOneBotAccumulativeProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getAccumulativeProfitChartData(botsDeals, 30)\n    : getAccumulativeProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getProfitChartData(botsDeals, 30)\n    : getProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotCurrencyLeaderbord = (deals: IDeal[]) => {\n  const profitsByPair = getObjectOfProfitPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getAverageTp = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.final_profit_percentage))\n      ) || 0,\n    currency: \"%\",\n  };\n};\n\nexport const getAverageProfitFromDeal = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(\n        deals\n          .filter((deal) => deal.status === \"completed\")\n          .map((deal) => parseFloat(deal.usd_final_profit))\n      ) || 0,\n    currency: \"$\",\n  };\n};\n\nexport const getTotalProfitUsd = (deals: IDeal[]) => {\n  return _.sum(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0;\n};\n\nexport const getAverageDailyProfit = (\n  createdAt: string,\n  deals: IDeal[],\n  fromFilter: any,\n  toFilter: any\n) => {\n  const startBotDate = moment.utc(createdAt);\n  const fromFilterMoment = moment.utc(fromFilter).startOf(\"day\");\n  const toFilterMoment = moment.utc(toFilter).startOf(\"day\");\n\n  const maxDate = moment.max([fromFilterMoment, startBotDate]);\n\n  const profitsData = _.unzip(\n    _.zip(...getOneBotProfitsChartData(deals)).filter(\n      (chartData) =>\n        !chartData[0].isBefore(maxDate, \"day\") &&\n        !chartData[0].isAfter(toFilterMoment, \"day\")\n    )\n  );\n\n  return {\n    value: _.mean(profitsData[1]),\n    currency: \"$\",\n  };\n};\n","import { getDealAgeInHours } from \"../../utils/DealsUtils\";\nimport { IDealsState } from \"./DealsReducer\";\n\nexport const INFINITY_IN_DAYS = 100000;\nconst hoursWithin30Days = 24 * 30;\n\nexport const is30daysDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals && state.deals[botId] && state.deals[botId].period >= 30;\n\nexport const isAllDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals &&\n  state.deals[botId] &&\n  state.deals[botId].period >= INFINITY_IN_DAYS;\n\nexport const selectAllDealsWithin30Days = (\n  state: IDealsState,\n  botId: number\n) => {\n  return is30daysDealsLoaded(state, botId)\n    ? state.deals[botId].list.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin30Days\n      )\n    : [];\n};\n\nexport const selectAllDeals = (state: IDealsState, botId: number) => {\n  return isAllDealsLoaded(state, botId) ? state.deals[botId].list : [];\n};\n","import { IBot, IBotFilters } from \"../../interfaces/Bot\";\n\ninterface ISetNewBotsList {\n  type: \"setNewBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const setNewBotsList = (botsList: Array<IBot>): ISetNewBotsList => ({\n  type: \"setNewBotsList\",\n  payload: botsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToBotsList {\n  type: \"addToBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const addToBotsList = (botsList: Array<IBot>): IAddToBotsList => ({\n  type: \"addToBotsList\",\n  payload: botsList,\n});\n\ninterface ISetBotsOffset {\n  type: \"setBotsOffset\";\n  payload: number;\n}\n\nexport const setBotsOffset = (offset: number): ISetBotsOffset => ({\n  type: \"setBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetBotsFilters {\n  type: \"setBotsFilters\";\n  payload: IBotFilters;\n}\n\nexport const setBotsFilters = (botsFilter: IBotFilters): ISetBotsFilters => ({\n  type: \"setBotsFilters\",\n  payload: botsFilter,\n});\n\ninterface ISetBot {\n  type: \"setBot\";\n  payload: { botId: number; bot: IBot };\n}\n\nexport const setBot = (botId: number, bot: IBot): ISetBot => ({\n  type: \"setBot\",\n  payload: { botId, bot },\n});\n\nexport type BotsAction =\n  | ISetNewBotsList\n  | ISetHasMore\n  | IAddToBotsList\n  | ISetBotsOffset\n  | ISetBotsFilters\n  | ISetBot;\n","import { getBot, getBots, getBotStats } from \"../../utils/ApiUtils\";\nimport { getMaxUsage, getReturns } from \"../../utils/BotsUtils\";\nimport { IDealsState } from \"../deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../deals/DealsSelectors\";\nimport {\n  addToBotsList,\n  setBotsOffset,\n  setHasMore,\n  setNewBotsList,\n  setBot,\n} from \"./BotsActions\";\nimport { IBotsState } from \"./BotsReducer\";\n\nexport async function fetchBots(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  resetOffset: boolean = false,\n  customLimit?: number\n) {\n  botsDispatch(setHasMore(true));\n  const {\n    offset,\n    limit,\n    filters: { sorting, scope, type, account },\n  } = botsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    const data = await getBots(\n      offset,\n      offsetLimit,\n      sorting,\n      scope,\n      type,\n      account,\n      resetOffset\n    );\n    if (resetOffset) {\n      botsDispatch(setBotsOffset(offsetLimit));\n      botsDispatch(setNewBotsList(data));\n    } else {\n      botsDispatch(setBotsOffset(offset + offsetLimit));\n      botsDispatch(addToBotsList(data));\n    }\n    if (data.length < offsetLimit) {\n      botsDispatch(setHasMore(false));\n    }\n  } catch {\n    botsDispatch(setNewBotsList([]));\n    botsDispatch(setBotsOffset(offsetLimit));\n    botsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching bots list\",\n    });\n  }\n}\n\nexport async function fetchBot(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    const bot = await getBot(botId);\n    botsDispatch(setBot(botId, bot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching bot ${botId}`,\n    });\n  }\n}\n\nexport async function getMaxUsageEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number,\n  account: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"maxUsage\" in bots[botId])) {\n      const maxUsage = await getMaxUsage(botItem, account);\n      const bot = { ...botItem, maxUsage: maxUsage };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = { ...botItem, maxUsage: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching max usage for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getFundsLockedAndTodaysProfit(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"fundsLocked\" in bots[botId])) {\n      const {\n        profits_in_usd: { today_usd_profit, funds_locked_in_active_deals },\n      } = await getBotStats(botId);\n\n      const bot = {\n        ...botItem,\n        fundsLocked: funds_locked_in_active_deals,\n        todayUsdProfit: today_usd_profit,\n      };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = {\n      ...botItem,\n      fundsLocked: 0,\n      todayUsdProfit: 0,\n    };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching stats for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getReturnsEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  dealsState: IDealsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    const deals30daysForBot = selectAllDealsWithin30Days(dealsState, botId);\n    const maxUsage = botItem.maxUsage;\n    const bot = {\n      ...botItem,\n      returns: getReturns(maxUsage, deals30daysForBot),\n    };\n    botsDispatch(setBot(botItem.id, bot));\n  } catch {\n    const bot = { ...botItem, returns: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when getting returns for bot ${botItem.name}`,\n    });\n  }\n}\n","import { IDeal } from \"../../interfaces/Deal\";\n\ninterface IGetDealsList {\n  type: \"getDealsList\";\n  payload: { deals: Array<IDeal>; botId: number; periodInDays: number };\n}\n\nexport const getDealsList = (\n  deals: Array<IDeal>,\n  botId: number,\n  periodInDays: number\n): IGetDealsList => ({\n  type: \"getDealsList\",\n  payload: { deals, botId, periodInDays },\n});\n\ninterface ISetOffset {\n  type: \"setOffset\";\n  payload: { botId: number; offset: number };\n}\n\nexport const setOffset = (botId: number, offset: number): ISetOffset => ({\n  type: \"setOffset\",\n  payload: { botId, offset },\n});\n\ninterface IResetDeals {\n  type: \"resetDeals\";\n  payload: { botId: number };\n}\n\nexport const resetDeals = (botId: number): IResetDeals => ({\n  type: \"resetDeals\",\n  payload: { botId },\n});\n\nexport type DealsAction = IGetDealsList | ISetOffset | IResetDeals;\n","import { getDeals } from \"../../utils/ApiUtils\";\nimport { getAllDealsForOneBot } from \"../../utils/DealsUtils\";\nimport { getDealsList, resetDeals, setOffset } from \"./DealsActions\";\nimport { IDealsState } from \"./DealsReducer\";\nimport {\n  INFINITY_IN_DAYS,\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n} from \"./DealsSelectors\";\n\nexport async function fetchDealsForBotFor30Days(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    if (is30daysDealsLoaded(dealsState, botId)) {\n      return;\n    }\n    const data = await getAllDealsForOneBot(botId, 30);\n    dealsDispatch(getDealsList(data, botId, 30));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport async function fetchAllDealsForBot(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) {\n  try {\n    if (isAllDealsLoaded(dealsState, botId) && !reset) {\n      return;\n    }\n\n    if (reset) {\n      dealsDispatch(resetDeals(botId));\n    }\n\n    await fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botId\n    );\n    const data = await getAllDealsForOneBot(\n      botId,\n      INFINITY_IN_DAYS,\n      (offset: number) => {\n        dealsDispatch(setOffset(botId, offset));\n      }\n    );\n    dealsDispatch(getDealsList(data, botId, INFINITY_IN_DAYS));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport const getAllActiveDeals = async (errorsDispatch: any, botId: number) => {\n  try {\n    return await getDeals(botId, 0, 1000, \"active\", \"closed_at\");\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching active deals for bot ${botId}`,\n      });\n    }\n    return Promise.resolve([]);\n  }\n};\n","import moment from \"moment\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport const usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const convertFilterValueToDate = (filterFrom: any) => {\n  const dateFormat = \"YYYY-MM-DD\";\n\n  const filterValue = filterFrom.label;\n\n  if (filterValue === \"today\") {\n    return moment().subtract(1, \"day\").format(dateFormat);\n  } else if (filterValue === \"week\") {\n    return moment().subtract(1, \"week\").format(dateFormat);\n  } else if (filterValue === \"month\") {\n    return moment().subtract(1, \"months\").format(dateFormat);\n  } else if (filterValue === \"custom\") {\n    return filterFrom.from\n      ? moment(filterFrom.from).format(dateFormat)\n      : moment().format(dateFormat);\n  }\n  return \"\";\n};\n","export const ProfitChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const AccumulativeChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const LeaderbordChartOptions = (text: string, labels: any) => ({\n  indexAxis: \"y\" as const,\n  scales: {\n    x: {\n      stacked: false,\n      beginAtZero: true,\n    },\n    y: {\n      stacked: true,\n      beginAtZero: true,\n      ticks: {\n        callback: (value: any) => {\n          return labels[value].length > 35\n            ? labels[value].slice(0, 33) + \"...\"\n            : labels[value];\n        },\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"y\",\n    },\n  },\n});\n\nexport const DealsCountBarChartOptions = (\n  text: string,\n  isWeekUnit: boolean = true\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: isWeekUnit ? \"week\" : \"month\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const HistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  // crossAlign: \"near\",\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        label: (tooltipItem: any) => {\n          const dataset = tooltipItem.dataset;\n          const total = dataset.data.reduce(function (\n            previousValue: any,\n            currentValue: any\n          ) {\n            return previousValue + currentValue;\n          });\n          const currentValue = dataset.data[tooltipItem.dataIndex];\n          const percentage = Math.floor((currentValue / total) * 100 + 0.5);\n          return ` ${currentValue} deals (${percentage}%)`;\n        },\n        title: (tooltipItem: any) => {\n          const label = parseInt(tooltipItem[0].label);\n          return `Duration from ${label - 1} to ${label} hours`;\n        },\n      },\n    },\n  },\n});\n","import React from \"react\";\nimport { Bar, Doughnut } from \"react-chartjs-2\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  DealsCountBarChartOptions,\n  HistogramChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  dealsStatusesCounts,\n  getDealsCountPerDay,\n  getDealsDurationHistogramData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsMainCharts.css\";\n\nexport const DCABotDetailsMainCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n}) => {\n  const countsValues = getDealsCountPerDay(deals, dateLabelsDays);\n  const dealsStatusData = dealsStatusesCounts(deals);\n  const dealsDurationHistogramData = getDealsDurationHistogramData(deals);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            DealsCountBarChartOptions(\n              \"Finished deals per day\",\n              dateLabelsDays.length < 70\n            ) as any\n          }\n          data={{\n            labels: dateLabelsDays,\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: countsValues,\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Doughnut\n          options={\n            {\n              aspectRatio: 1.7,\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"Finished deals by Status\",\n                },\n                tooltip: {\n                  callbacks: {\n                    label: (tooltipItem: any) => {\n                      const dataset = tooltipItem.dataset;\n                      const total = dataset.data.reduce(function (\n                        previousValue: any,\n                        currentValue: any\n                      ) {\n                        return currentValue\n                          ? previousValue + currentValue\n                          : previousValue;\n                      },\n                      0);\n                      const currentValue = dataset.data[tooltipItem.dataIndex];\n                      const percentage = Math.floor(\n                        (currentValue / total) * 100 + 0.5\n                      );\n                      const label = tooltipItem.label;\n\n                      return `${label}: ${currentValue} (${percentage}%)`;\n                    },\n                  },\n                },\n                legend: {\n                  labels: {\n                    filter: (legendItem: any, data: any) => {\n                      return data.datasets[0].data[legendItem.index];\n                    },\n                  },\n                },\n              },\n            } as any\n          }\n          width={300}\n          data={{\n            labels: dealsStatusData[0] as any,\n            datasets: [\n              {\n                data: dealsStatusData[1],\n                backgroundColor: [\n                  \"rgba(54, 162, 235, 0.2)\",\n                  \"rgba(255, 99, 132, 0.2)\",\n                  \"rgba(255, 206, 86, 0.2)\",\n                  \"rgba(75, 192, 192, 0.2)\",\n                  \"rgba(153, 102, 255, 0.2)\",\n                  \"rgba(255, 159, 64, 0.2)\",\n                  \"rgba(39, 47, 148, 0.2)\",\n                ],\n                borderColor: [\n                  \"rgba(54, 162, 235, 1)\",\n                  \"rgba(255, 99, 132, 1)\",\n                  \"rgba(255, 206, 86, 1)\",\n                  \"rgba(75, 192, 192, 1)\",\n                  \"rgba(153, 102, 255, 1)\",\n                  \"rgba(255, 159, 64, 1)\",\n                  \"rgba(39, 47, 148, 1)\",\n                ],\n                borderWidth: 1,\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            HistogramChartOptions(\n              \"Finished deals duration histogram, hours\",\n              \"Duration, hours\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsDurationHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsDurationHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneBotCurrencyLeaderbord,\n  getOneBotAccumulativeProfitsChartData,\n  getOneBotProfitsChartData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsCharts.css\";\n\nexport const DCABotDetailsProfitsCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n\n  useEffect(() => {\n    setAccumulativeProfitsData(getOneBotAccumulativeProfitsChartData(deals));\n    setProfitsData(getOneBotProfitsChartData(deals));\n    setPairsLeaderbordData(getOneBotCurrencyLeaderbord(deals));\n  }, [deals]);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={AccumulativeChartOptions(\"Accumulative Profit, $\") as any}\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: \"Accumulative Profit, $\",\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={ProfitChartOptions(\"Daily Profit, $\") as any}\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      {bot.type !== \"Bot::SingleBot\" && (\n        <div className=\"DCABotDetailsChartContainer\">\n          <Bar\n            options={\n              LeaderbordChartOptions(\n                \"Pairs leaderboard by profit\",\n                pairsLeaderbordData[0]\n              ) as any\n            }\n            data={{\n              labels: pairsLeaderbordData[0],\n              datasets: [\n                {\n                  label: \"Profit, $\",\n                  data: pairsLeaderbordData[1],\n                  borderColor: \"rgb(53, 162, 235)\",\n                  backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                },\n              ],\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  getDealAgeInDaysSinceOpened,\n  getLastNDays,\n} from \"../../../../utils/DealsUtils\";\nimport { DCABotDetailsMainCharts } from \"../DCABotDetailsMain/DCABotDetailsMainCharts\";\nimport { DCABotDetailsProfitsCharts } from \"../DCABotDetailsProfits/DCABotDetailsProfitsCharts\";\nimport \"./DCABotDetailsCharts.css\";\n\nexport const DCABotDetailsCharts = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  timeRangeValue,\n}: {\n  account: any;\n  bot: IBot;\n  timeRangeValue: string;\n  infoKey: string;\n  deals: IDeal[];\n}) => {\n  const [dateLabelsDays, setDateLabelsDays] = useState<string[]>([]);\n  useEffect(() => {\n    if (deals) {\n      if (timeRangeValue === \"allTime\") {\n        const oldestDealAgeInDaysSinceOpened =\n          deals.length > 0\n            ? Math.ceil(getDealAgeInDaysSinceOpened(deals.slice(-1).pop()))\n            : 0;\n        setDateLabelsDays(\n          getLastNDays(\n            oldestDealAgeInDaysSinceOpened > 30\n              ? oldestDealAgeInDaysSinceOpened\n              : 30\n          )\n        );\n      } else if (timeRangeValue === \"30d\") {\n        setDateLabelsDays(getLastNDays(30));\n      }\n    }\n  }, [deals]);\n  return (\n    <>\n      {deals && dateLabelsDays && bot && account && (\n        <div className=\"DCABotDetailsCharts\">\n          {infoKey === \"main\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"settings\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"profits\" && (\n            <DCABotDetailsProfitsCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\n\nimport \"./DCABotDetailsDealsTable.css\";\nimport { Badge, Modal, Pagination, Table, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport { getDeal } from \"../../../../utils/ApiUtils\";\n\nconst badgeVariant = {\n  Cancelled: \"secondary\",\n  StopLoss: \"danger\",\n  Failed: \"warning\",\n  Completed: \"success\",\n  \"Closed at Market Price\": \"dark\",\n  Liquidated: \"dark\",\n  Switched: \"secondary\",\n};\n\nexport const DCABotDetailsDealsTable = ({\n  bot,\n  deals,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"ID\",\n          accessor: \"id\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Pair\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.pair.split(\"_\").reverse().join(\"/\");\n          },\n          id: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: \"localized_status\",\n          Cell: ({ cell: { value } }: any) => (\n            // @ts-ignore\n            <Badge style={{ fontSize: \"12px\" }} bg={badgeVariant[value]}>\n              {value}\n            </Badge>\n          ),\n          disableSortBy: true,\n        },\n        {\n          Header: \"Start\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.created_at);\n          },\n          id: \"created_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"End\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.closed_at);\n          },\n          id: \"closed_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"Duration\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            let start = moment.utc(originalRow.created_at);\n            let end = originalRow.closed_at\n              ? moment.utc(originalRow.closed_at)\n              : moment.utc();\n            return end.diff(start);\n          },\n          id: \"duration\",\n          Cell: ({ cell: { value } }: any) => {\n            const duration = moment.duration(value);\n            const days = Math.floor(duration.asDays());\n            const daysFormatted = days ? `${days}d ` : \"\";\n\n            //Get Hours\n            const hours = duration.hours();\n            const hoursFormatted = `${hours}h `;\n\n            //Get Minutes\n            const minutes = duration.minutes();\n            const minutesFormatted = `${minutes}m`;\n\n            return `${daysFormatted} ${hoursFormatted} ${minutesFormatted}`;\n          },\n        },\n        {\n          Header: \"Avg. entry price\",\n          id: \"bought_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.bought_average_price\n              : originalRow.sold_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Close price\",\n          id: \"sold_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.sold_average_price\n              : originalRow.bought_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n            const amount =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_amount,\n                    currency: baseCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_amount,\n                    currency: baseCurrency,\n                  });\n            const volume =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_volume,\n                    currency: quoteCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_volume,\n                    currency: quoteCurrency,\n                  });\n            return `${amount} ${baseCurrency}!${volume} ${quoteCurrency}`;\n          },\n          id: \"volume\",\n          Cell: ({ cell: { value } }: any) => {\n            const values = value.split(\"!\");\n            return (\n              <>\n                <div>{values[0]}</div>\n                <div>{values[1]}</div>\n              </>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Filled SO\",\n          id: \"completed_safety_orders_count\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${originalRow.completed_safety_orders_count}${\n              originalRow.completed_manual_safety_orders_count\n                ? ` (+${originalRow.completed_manual_safety_orders_count})`\n                : \"\"\n            }`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, %\",\n          accessor: \"final_profit_percentage\",\n          Cell: ({ cell: { value } }: any) => `${value}%`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, $\",\n          accessor: \"usd_final_profit\",\n          sortType: (a: any, b: any) => {\n            a = Number(a.original.usd_final_profit);\n            b = Number(b.original.usd_final_profit);\n            return a > b ? 1 : -1;\n          },\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value);\n            return (\n              <Badge\n                style={{ fontSize: \"13px\" }}\n                bg={numberValue >= 0 ? \"success\" : \"danger\"}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency: \"USD\",\n                },\n                \"always\"\n              )} $`}</Badge>\n            );\n          },\n        },\n        {\n          Header: \"Profit in Base\",\n          id: \"profitBase\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.bought_amount) -\n              parseFloat(originalRow.sold_amount)\n            }!${originalRow.pair.split(\"_\")[1]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit in Quote\",\n          id: \"profitQuote\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.sold_volume) -\n              parseFloat(originalRow.bought_volume)\n            }!${originalRow.pair.split(\"_\")[0]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            );\n          },\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data: deals,\n      disableSortRemove: true,\n      autoResetPage: true,\n      autoResetSortBy: false,\n      initialState: { pageSize: 50, sortBy: [{ id: \"closed_at\", desc: true }] },\n    },\n    useSortBy,\n    usePagination\n  );\n  const [modalIsOpen, setModalIsOpen] = React.useState(false);\n  const [selectedDeal, setSelectedDeal] = React.useState(null as any);\n\n  return (\n    <div className=\"DCABotDetailsDealsTable\">\n      <DealModal\n        modalIsOpen={modalIsOpen}\n        setModalIsOpen={setModalIsOpen}\n        dealId={selectedDeal}\n      />\n      {pageCount > 1 && (\n        <TablePagination\n          pageIndex={pageIndex}\n          pageCount={pageCount}\n          gotoPage={gotoPage}\n          nextPage={nextPage}\n          previousPage={previousPage}\n        />\n      )}\n      <Table striped bordered {...getTableProps()} hover>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                {...row.getRowProps()}\n                onClick={() => {\n                  setSelectedDeal(row.original.id);\n                  setModalIsOpen(true);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nconst TablePagination = ({\n  pageIndex,\n  pageCount,\n  gotoPage,\n  nextPage,\n  previousPage,\n}: any) => {\n  const range = (start: number, end: number) =>\n    Array(end - start + 1)\n      .fill(0)\n      .map((_, idx) => start + idx);\n\n  const renderPaginationNumberItem = (page: any, pageIndex: any) => (\n    <Pagination.Item\n      active={page === pageIndex}\n      onClick={() => {\n        gotoPage(page);\n      }}\n      key={page}\n    >\n      {page + 1}\n    </Pagination.Item>\n  );\n\n  const renderPaginationBeginning = () => (\n    <>\n      <Pagination.First\n        onClick={() => {\n          gotoPage(0);\n        }}\n      />\n      <Pagination.Prev\n        onClick={() => {\n          previousPage();\n        }}\n      />\n      {pageIndex - 2 < 4 &&\n        renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n      {pageIndex - 1 < 4 &&\n        renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n    </>\n  );\n  const renderPaginationEnd = () => (\n    <>\n      <Pagination.Next\n        onClick={() => {\n          nextPage();\n        }}\n      />\n      <Pagination.Last\n        onClick={() => {\n          gotoPage(pageCount - 1);\n        }}\n      />\n    </>\n  );\n\n  return (\n    <>\n      {pageCount <= 16 && (\n        <Pagination>\n          {range(0, pageCount - 1).map((page) =>\n            renderPaginationNumberItem(page, pageIndex)\n          )}\n        </Pagination>\n      )}\n      {pageCount > 16 && (\n        <Pagination>\n          {pageIndex < 7 && (\n            <>\n              {range(0, 6).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n              {renderPaginationEnd()}\n            </>\n          )}\n\n          {pageIndex >= 7 && pageIndex <= pageCount - 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n              {renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n              <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\n              {renderPaginationNumberItem(pageIndex + 1, pageIndex)}\n              {renderPaginationNumberItem(pageIndex + 2, pageIndex)}\n              {renderPaginationEnd()}\n            </>\n          )}\n          {pageCount - pageIndex < 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {range(pageCount - 7, pageCount - 1).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n            </>\n          )}\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nconst DealModal = ({ modalIsOpen, setModalIsOpen, dealId }: any) => {\n  const [deal, setDeal] = React.useState(null as any);\n\n  useEffect(() => {\n    if (dealId) {\n      getDeal(dealId).then((dl) => {\n        setDeal(dl);\n      });\n    }\n  }, [dealId]);\n  return (\n    <>\n      {deal && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(false);\n          }}\n          scrollable\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{deal.id}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {deal.bot_events.length > 0 && (\n              <Table striped hover>\n                <thead>\n                  <tr>\n                    <th>Date/Time</th>\n                    <th>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {deal.bot_events.map((event: any) => (\n                    <tr key={event.created_at}>\n                      <td>\n                        {moment(event.created_at).format(\"D MMM, YYYY HH:mm\")}\n                      </td>\n                      <td>{event.message}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )}\n            {deal.bot_events.length === 0 && (\n              <blockquote className=\"blockquote mb-0\">\n                <p>\n                  “Nothing can last forever. There isn't any memory, no matter\n                  how intense, that doesn't fade out at last.”{\" \"}\n                </p>\n                <footer className=\"blockquote-footer\">Juan Rulfo</footer>\n              </blockquote>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                window.open(`https://3commas.io/deals/${dealId}`, \"_blank\");\n              }}\n            >\n              Open in 3commas\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getFundsLocked } from \"../../../../utils/BotsUtils\";\nimport {\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport {\n  getFundsLockedAndTodaysProfit,\n  getMaxUsageEffect,\n  getReturnsEffect,\n} from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { useNavigate } from \"react-router-dom\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport moment from \"moment\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TV\",\n  buy_or_strong_buy: \"Buy\",\n  strong_buy: \"Strong Buy\",\n  sell_or_strong_sell: \"Sell\",\n  strong_sell: \"Strong Sell\",\n  rsi: \"RSI\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nexport const getBotsStrategyName = (\n  strategiesState: any,\n  botsStrategy: string\n) => {\n  if (botsStrategy in strategyMap) {\n    return strategyMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [statsLoaded, setStatsLoaded] = useState(false);\n\n  const navigate = useNavigate();\n\n  const { deals } = dealsState;\n\n  useEffect(() => {\n    getFundsLockedAndTodaysProfit(\n      botsDispatch,\n      botsState,\n      errorsDispatch,\n      botItem.id\n    ).then(() => {\n      setStatsLoaded(true);\n    });\n  }, [botItem]);\n\n  useEffect(() => {\n    if (statsLoaded) {\n      getMaxUsageEffect(\n        botsDispatch,\n        botsState,\n        errorsDispatch,\n        botItem.id,\n        account\n      ).then();\n    }\n  }, [account, botItem, statsLoaded]);\n\n  useEffect(() => {\n    if (\n      botItem &&\n      !(\"returns\" in botItem) &&\n      \"maxUsage\" in botItem &&\n      is30daysDealsLoaded(dealsState, botItem.id)\n    ) {\n      getReturnsEffect(\n        botsDispatch,\n        botsState,\n        dealsState,\n        errorsDispatch,\n        botItem.id\n      );\n    }\n  }, [deals, botItem]);\n\n  const getReturns = async () => {\n    setDealsLimiter(Math.random());\n    fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botItem.id\n    );\n  };\n\n  const age = differenceInDays(moment(), moment(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy =\n    botItem.strategy_list.length === 1\n      ? getBotsStrategyName(strategiesState, botItem.strategy_list[0].strategy)\n      : \"Combined\";\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          {\"market_icon\" in account && (\n            <IconsSet\n              botType={botItem.type}\n              strategy={botItem.strategy}\n              botId={botItem.id}\n              marketIcon={account.market_icon}\n            />\n          )}\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotReturns\">\n            <BotReturns\n              returns={botItem.returns}\n              getReturns={getReturns}\n              maxUsage={botItem.maxUsage}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>{account.name}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>{formatter.format(botItem.todayUsdProfit)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Funds locked/Max usage</td>\n                <td>{`${formatter.format(\n                  getFundsLocked(botItem)\n                )}/${formatter.format(botItem.maxUsage)}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n              </tr>\n            </tbody>\n          </Table>\n          <div className=\"BotPreviewButtons\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                navigate({\n                  pathname: `/${botItem.id}`,\n                  search: window.location.search,\n                });\n              }}\n            >\n              {`View`}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ botType, strategy, botId, marketIcon }: any) => (\n  <div className=\"IconsSetContainer\">\n    <div className=\"BotTypeIconContainer\">\n      {botType === \"Bot::SingleBot\" ? \"S\" : \"M\"}\n    </div>\n    <div className=\"BotMarketIconContainer\">\n      <div\n        className=\"BotMarketIcon\"\n        style={{\n          backgroundImage: `url(${marketIcon})`,\n        }}\n      ></div>\n    </div>\n    <div className=\"RobotsIconContainer\">\n      <img\n        src={`/robotsIcons/robots-vector-free-icon-set-${\n          strategy === \"short\" ? \"2\" : \"3\"\n        }${String(botId).slice(-1)}.png`}\n        alt=\"logo\"\n        className=\"RobotsIcon\"\n      />\n    </div>\n  </div>\n);\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotReturns = ({ returns, getReturns }: any) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const returnsCalculated = returns || returns === 0;\n\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      delay={{ show: 100, hide: 200 }}\n      overlay={<Tooltip>30 days profit / Max usage</Tooltip>}\n    >\n      <div className=\"BotReturnsContainer\">\n        {returnsCalculated && (\n          <div\n            className=\"BotReturnsValue\"\n            style={{ color: returns < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${formatter.format(returns || 0)}`}\n          </div>\n        )}\n        <div className=\"BotReturnsLabel\">Returns (30d)</div>\n        {!returnsCalculated && (\n          <Button\n            onClick={() => {\n              getReturns();\n            }}\n            variant=\"link\"\n            size=\"sm\"\n            active\n          >\n            Calculate\n          </Button>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ErrorsContext, StrategiesContext } from \"../../../../App\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { getAllActiveDeals } from \"../../../../state/deals/DealsEffects\";\nimport {\n  getCurrencyFormat,\n  getFundsLockedInBotCurrency,\n  getMaxUsageInBotCurrency,\n  getReservedFundsInBotCurrency,\n} from \"../../../../utils/BotsUtils\";\nimport { getAverageDealDuration } from \"../../../../utils/DealsUtils\";\nimport { getBotsStrategyName } from \"../../BotsList/BotPreview/BotPreview\";\nimport \"./DCABotDetailsMainInfo.css\";\n\nexport const DCABotDetailsMainInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const { strategiesState } = useContext(StrategiesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [fundsLocked, setFundsLocked] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [fundsLockedShare, setFundsLockedShare] = useState(0);\n\n  const [maxUsage, setMaxUsage] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [reservedFunds, setReservedFunds] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n  });\n\n  const botPairs =\n    bot.pairs.length === 1\n      ? bot.pairs[0].split(\"_\").reverse().join(\"/\")\n      : `${bot.pairs.length} pairs`;\n  const botMarket =\n    bot.pairs.length === 1 ? \"\" : `${bot.pairs[0].split(\"_\")[0]} market`;\n\n  const startCondition = bot.strategy_list.map((strategy: any) => (\n    <div key={`${Math.random()}`}>{`${getBotsStrategyName(\n      strategiesState,\n      strategy.strategy\n    )}${\n      strategy.options.type\n        ? `, ${getBotsStrategyName(strategiesState, strategy.options.type)}`\n        : ``\n    }${strategy.options.percent ? `, ${strategy.options.percent}%` : ``}${\n      strategy.options.time ? `, ${strategy.options.time}` : ``\n    }${strategy.options.points ? `, ${strategy.options.points}` : ``}`}</div>\n  ));\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      getMaxUsageInBotCurrency(bot, account).then((mxUsg) => {\n        setMaxUsage(mxUsg);\n      });\n\n      getAllActiveDeals(errorsDispatch, bot.id).then((activeDeals: IDeal[]) => {\n        setReservedFunds(\n          getReservedFundsInBotCurrency(activeDeals, bot, account)\n        );\n        setFundsLocked(getFundsLockedInBotCurrency(activeDeals, bot, account));\n      });\n    }\n  }, [bot, account]);\n\n  useEffect(() => {\n    if (maxUsage.value && fundsLocked.value) {\n      setFundsLockedShare(fundsLocked.value / maxUsage.value);\n    }\n  }, [maxUsage, fundsLocked]);\n\n  const avgDealDuration = getAverageDealDuration(deals);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Account</div>\n        <div className=\"BotInfoTableRow\">{account.name}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Bot pairs</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{botPairs}</div>\n          <div>{botMarket}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Deal start condition</div>\n        <div className=\"BotInfoTableRow\">{startCondition}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Active deals/Max</div>\n        <div className=\"BotInfoTableRow\">{`${bot.active_deals_count}/${bot.max_active_deals}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Funds used</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{`${getCurrencyFormat(fundsLocked)} ${\n            fundsLocked.currency\n          }`}</div>\n          <div style={{ fontSize: \"10px\" }}>{`${percentFormatter.format(\n            fundsLockedShare\n          )} of max usage`}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max usage</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(maxUsage)} ${\n          maxUsage.currency\n        }`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Reserved funds</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(\n          reservedFunds\n        )} ${maxUsage.currency}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total finished deals</div>\n        <div className=\"BotInfoTableRow\">{deals.length}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Avg deal duration</div>\n        <div className=\"BotInfoTableRow\">{`${avgDealDuration} hrs`}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { getCurrencyFormat, getReturns } from \"../../../../utils/BotsUtils\";\nimport {\n  getAverageDailyProfit,\n  getAverageProfitFromDeal,\n  getAverageTp,\n  getTotalProfitUsd,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsInfo.css\";\n\nexport const DCABotDetailsProfitsInfo = ({\n  account,\n  bot,\n  deals,\n  fromFilter,\n  toFilter,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    signDisplay: \"always\",\n  });\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const [averageTp, setAverageTp] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageProfitFromDeal, setAverageProfitFromDeal] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageDailyProfit, setAverageDailyProfit] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [returns, setReturns] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [totalProfitUsd, setTotalProfitUsd] = useState(0);\n\n  useEffect(() => {\n    setAverageTp(getAverageTp(deals));\n    setAverageProfitFromDeal(getAverageProfitFromDeal(deals));\n    setAverageDailyProfit(\n      getAverageDailyProfit(bot.created_at, deals, fromFilter, toFilter)\n    );\n    if (bot.maxUsage) {\n      setReturns({ value: getReturns(bot.maxUsage, deals), currency: \"%\" });\n    }\n    setTotalProfitUsd(getTotalProfitUsd(deals));\n  }, [deals, bot]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Today's profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            (bot.todayUsdProfit || 0) < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(bot.todayUsdProfit || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            totalProfitUsd < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(totalProfitUsd)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Current uPnL</div>\n        <div\n          className={`BotInfoTableRow ${\n            parseFloat(bot.active_deals_usd_profit) < 0\n              ? \"showRed\"\n              : \"showGreen\"\n          }`}\n        >\n          {formatter.format(parseFloat(bot.active_deals_usd_profit))}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average TP, %</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageTp.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {`${getCurrencyFormat(averageTp)}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average profit from deal</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageProfitFromDeal.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageProfitFromDeal.value || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average daily profit</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageDailyProfit.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageDailyProfit.value)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Returns</div>\n        <div\n          className={`BotInfoTableRow ${\n            returns.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {percentFormatter.format(returns.value)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport {\n  getBaseOrderSize,\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSettingsInfo.css\";\n\nexport const DCABotDetailsSettingsInfo = ({\n  account,\n  bot,\n}: {\n  account: any;\n  bot: IBot;\n}) => {\n  const [baseOrderSize, setBaseOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setBaseOrderSize(getBaseOrderSize(bot, account));\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n    }\n  }, [bot, account]);\n\n  const leverage = bot.leverage_custom_value\n    ? parseInt(bot.leverage_custom_value)\n    : \"\";\n  const leverageType =\n    bot.leverage_type !== \"not_specified\" ? bot.leverage_type : \"\";\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Profit currency</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.profit_currency === \"quote_currency\" ? \"Quote\" : \"Base\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Take profit (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            {`${getCurrencyFormat({\n              value: parseFloat(bot.take_profit),\n              currency: \"%\",\n            })}%`}\n          </div>\n          <div>\n            {bot.take_profit_type === \"total\"\n              ? \"(from total volume)\"\n              : \"(from base volume)\"}\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Trailing</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.trailing_enabled &&\n            `${getCurrencyFormat({\n              value: parseFloat(bot.trailing_deviation),\n              currency: \"%\",\n            })}%`}\n          {!bot.trailing_enabled && \"OFF\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Stop loss (timeout)</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat({\n          value: parseFloat(bot.stop_loss_percentage),\n          currency: \"%\",\n        })}% (${bot.stop_loss_timeout_in_seconds} s)`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Base order size (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            <div>{`${getCurrencyFormat(baseOrderSize)} ${\n              baseOrderSize.currency\n            }${\n              baseOrderSize.additionalCurrency\n                ? ` (${baseOrderSize.additionalCurrency})`\n                : \"\"\n            }`}</div>\n            <div>{`(${bot.start_order_type})`}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Leverage (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{leverage || \"0\"}</div>\n          <div>{leverageType}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max safety trades (active)</div>\n        <div className=\"BotInfoTableRow\">{`${bot.max_safety_orders} (${bot.active_safety_orders_count})`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Price devition to open SO</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: parseFloat(bot.safety_order_step_percentage),\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO size</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat(safetyOrderSize)} ${safetyOrderSize.currency}${\n            safetyOrderSize.additionalCurrency\n              ? ` (${safetyOrderSize.additionalCurrency})`\n              : \"\"\n          }`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO volume scale</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.martingale_volume_coefficient}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO step scale</div>\n        <div className=\"BotInfoTableRow\">{bot.martingale_step_coefficient}</div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { BotInfo, IconsSet } from \"../../BotsList/BotPreview/BotPreview\";\nimport { DCABotDetailsMainInfo } from \"../DCABotDetailsMain/DCABotDetailsMainInfo\";\nimport { DCABotDetailsProfitsInfo } from \"../DCABotDetailsProfits/DCABotDetailsProfitsInfo\";\nimport { DCABotDetailsSettingsInfo } from \"../DCABotDetailsSettings/DCABotDetailsSettingsInfo\";\nimport moment from \"moment\";\nimport \"./DCABotDetailsInfo.css\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\n\nexport const DCABotDetailsInfo = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  setInfoKey,\n  fromFilter,\n  toFilter,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  account: any;\n  infoKey: string;\n  setInfoKey: any;\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const age = differenceInDays(moment(), moment(bot.created_at));\n  return (\n    <div className=\"DCABotDetailsInfo\">\n      <div className=\"DCABotDetailsInfoLogo\">\n        <IconsSet\n          botType={bot.type}\n          strategy={bot.strategy}\n          botId={bot.id}\n          marketIcon={account.market_icon}\n        ></IconsSet>\n        <BotInfo\n          strategy={bot.strategy}\n          age={age}\n          is_enabled={bot.is_enabled}\n        />\n      </div>\n      <div className=\"DCABotDetailsInfoTable\">\n        <Tabs activeKey={infoKey} onSelect={(k) => setInfoKey(k)}>\n          <Tab eventKey=\"main\" title=\"Main\" tabClassName=\"InfoTab\">\n            <DCABotDetailsMainInfo account={account} bot={bot} deals={deals} />\n          </Tab>\n          <Tab eventKey=\"settings\" title=\"Settings\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSettingsInfo account={account} bot={bot} />\n          </Tab>\n          <Tab eventKey=\"profits\" title=\"Profits\" tabClassName=\"InfoTab\">\n            <DCABotDetailsProfitsInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n              fromFilter={fromFilter}\n              toFilter={toFilter}\n            />\n          </Tab>\n          {/* <Tab eventKey=\"safeties\" title=\"Safeties\" disabled></Tab>\n          <Tab eventKey=\"insights\" title=\"Insights\" disabled></Tab> */}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n","import moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  ProgressBar,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  AccountsContext,\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n} from \"../../../App\";\nimport { IBot } from \"../../../interfaces/Bot\";\nimport { IDeal } from \"../../../interfaces/Deal\";\nimport { fetchBot } from \"../../../state/bots/BotsEffects\";\nimport { fetchAllDealsForBot } from \"../../../state/deals/DealsEffects\";\nimport {\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n  selectAllDeals,\n  selectAllDealsWithin30Days,\n} from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\nimport \"./DCABotDetails.css\";\nimport { DCABotDetailsCharts } from \"./DCABotDetailsCharts/DCABotDetailsCharts\";\nimport { DCABotDetailsDealsTable } from \"./DCABotDetailsDealsTable/DCABotDetailsDealsTable\";\nimport { DCABotDetailsInfo } from \"./DCABotDetailsInfo/DCABotDetailsInfo\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst statusFilterOptions: any = [\n  { value: \"all\", label: \"All\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"StopLoss\", label: \"StopLoss\" },\n  { value: \"Failed\", label: \"Failed\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Closed at Market Price\", label: \"Closed at Market Price\" },\n  { value: \"Liquidated\", label: \"Liquidated\" },\n  { value: \"Switched\", label: \"Switched\" },\n];\n\nconst filterByStatus = (deals: IDeal[], status: string) => {\n  return status === \"all\"\n    ? deals\n    : deals.filter((deal) => deal.localized_status === status);\n};\n\nconst filterByPair = (deals: IDeal[], pair: string) => {\n  return pair === \"all\" ? deals : deals.filter((deal) => deal.pair === pair);\n};\n\nconst filterFrom = (deals: IDeal[], dateFrom: any) => {\n  return !dateFrom ||\n    moment(\"01-04-2018\", \"MM-DD-YYYY\").isAfter(dateFrom, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateFrom, \"day\") ||\n          moment(deal.closed_at).isAfter(dateFrom)\n      );\n};\n\nconst filterTo = (deals: IDeal[], dateTo: any) => {\n  return !dateTo || moment().isSame(dateTo, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateTo, \"day\") ||\n          moment(deal.closed_at).isBefore(dateTo)\n      );\n};\n\nexport const DCABotDetails = () => {\n  let params = useParams();\n  let navigate = useNavigate();\n\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const {\n    botsState: { bots },\n  } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n  const [botId, setBotId] = useState(NaN);\n  const previousBotId = usePrevious(botId);\n  const [bot, setBot] = useState<IBot | null>(null);\n  const [botsDeals, setBotsDeals] = useState<IDeal[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(false);\n  const [isAllDataLoading, setIsAllDataLoading] = useState(false);\n  const [account, setAccount] = useState({});\n  const [infoKey, setInfoKey] = useState(\"main\");\n  const [percentLoadedDeals, setPercentLoadedDeals] = useState(0);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [pairFilter, setPairFilter] = useState(\"all\");\n  const [pairFilterOptions, setPairFilterOptions] = useState([] as any);\n  const [fromFilter, setFromFilter] = useState(new Date(\"2018-04-02\"));\n  const [toFilter, setToFilter] = useState(new Date());\n\n  const clearFilters = () => {\n    setStatusFilter(\"all\");\n    setPairFilter(\"all\");\n    setFromFilter(new Date(\"2018-04-02\"));\n    setToFilter(new Date());\n  };\n\n  const timeRangeRadios = [\n    { name: \"30 days\", value: \"30d\" },\n    { name: \"All time\", value: \"allTime\" },\n  ];\n\n  const getAccountById = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const refreshData = () => {\n    setDealsLimiter(Math.random());\n    fetchBot(botsDispatch, botsState, errorsDispatch, botId);\n    fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId, true);\n  };\n\n  useEffect(() => {\n    if (params.botId) {\n      setBotId(parseInt(params.botId));\n    }\n  }, [params]);\n\n  useEffect(() => {\n    setDealsLimiter(Math.random());\n    if (botId && !previousBotId) {\n      fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId);\n    }\n  }, [botId]);\n\n  useEffect(() => {\n    if (bot && accounts.length > 0) {\n      setAccount(getAccountById(bot.account_id));\n    }\n  }, [bot, accounts]);\n\n  useEffect(() => {\n    if (botId) {\n      setBot(bots[botId]);\n    }\n  }, [botId, bots]);\n\n  useEffect(() => {\n    if (botId) {\n      if (timeRangeValue === \"30d\") {\n        setIsDataLoading(!is30daysDealsLoaded(dealsState, botId));\n      } else if (timeRangeValue === \"allTime\") {\n        setIsDataLoading(!isAllDealsLoaded(dealsState, botId));\n      }\n      setIsAllDataLoading(!isAllDealsLoaded(dealsState, botId));\n    }\n  }, [dealsState, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      clearFilters();\n      setBotsDeals(deals);\n    }\n  }, [isDataLoading, isAllDataLoading, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      deals = filterByPair(deals, pairFilter);\n      deals = filterByStatus(deals, statusFilter);\n      deals = filterTo(deals, toFilter);\n      deals = filterFrom(deals, fromFilter);\n      setBotsDeals(deals);\n    }\n  }, [pairFilter, statusFilter, fromFilter, toFilter]);\n\n  useEffect(() => {\n    if (\n      botId &&\n      bot &&\n      dealsState.deals[botId] &&\n      dealsState.deals[botId].offset\n    ) {\n      const loadedDeals = dealsState.deals[botId].offset || 0;\n      setPercentLoadedDeals(\n        Math.ceil((loadedDeals * 100) / parseFloat(bot.finished_deals_count))\n      );\n    }\n  }, [dealsState, botId, bot]);\n\n  useEffect(() => {\n    if (bot) {\n      setPairFilterOptions([\n        { value: \"all\", label: \"All\" },\n        ...bot.pairs.map((pair) => ({\n          value: pair,\n          label: pair.split(\"_\").reverse().join(\"/\"),\n        })),\n      ]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    return () => {\n      // reset limiter everytime to stop all the jobs\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  return (\n    <div className=\"DCABotDetails\">\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        className=\"DCABotDetailsGetBackButton\"\n        onClick={() => {\n          navigate(-1);\n        }}\n      >\n        {`< Back to bots list`}\n      </Button>\n      {!isAllDataLoading && (\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            refreshData();\n          }}\n        >\n          {`Refresh data`}\n        </Button>\n      )}\n      {isDataLoading && !percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar now={100} animated className=\"BotDetailsProgressBar\" />\n          </div>\n        </>\n      )}\n      {isDataLoading && !!percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar\n              now={percentLoadedDeals}\n              label={`${percentLoadedDeals}%`}\n              className=\"BotDetailsProgressBar\"\n            />\n          </div>\n        </>\n      )}\n      {!isDataLoading && bot && account && (\n        <>\n          <DCABotDetailsCharts\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          <div className=\"BotDetailsControlsContainer\">\n            <div className=\"BotDetailsControl\">\n              <ButtonGroup>\n                {timeRangeRadios.map((radio, idx) => (\n                  <ToggleButton\n                    key={idx}\n                    id={`radio-${idx}`}\n                    type=\"radio\"\n                    variant=\"outline-primary\"\n                    name=\"radio\"\n                    value={radio.value}\n                    checked={timeRangeValue === radio.value}\n                    onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                  >\n                    {radio.name}\n                  </ToggleButton>\n                ))}\n              </ButtonGroup>\n            </div>\n            <div className=\"BotDetailsControl\">\n              <div className=\"BotDetailsFilterTitle\">Status:</div>\n              <Select\n                onChange={(option: any): void => {\n                  setStatusFilter(option.value);\n                }}\n                value={\n                  statusFilterOptions.find(\n                    (option: any) => option.value === statusFilter\n                  ) as any\n                }\n                className=\"BotDetailsStatusFilter\"\n                theme={(theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary25: \"#00a59a\",\n                    primary: \"#00a59a\",\n                  },\n                })}\n                options={statusFilterOptions as any}\n              />\n            </div>\n            {bot && bot.pairs.length > 1 && (\n              <div className=\"BotDetailsControl\">\n                <div className=\"BotDetailsFilterTitle\">Pair:</div>\n                <Select\n                  onChange={(option: any): void => {\n                    setPairFilter(option.value);\n                  }}\n                  value={\n                    pairFilterOptions.find(\n                      (option: any) => option.value === pairFilter\n                    ) as any\n                  }\n                  className=\"BotDetailsPairFilter\"\n                  options={pairFilterOptions as any}\n                  theme={(theme) => ({\n                    ...theme,\n                    colors: {\n                      ...theme.colors,\n                      primary25: \"#00a59a\",\n                      primary: \"#00a59a\",\n                    },\n                  })}\n                />\n              </div>\n            )}\n            {timeRangeValue === \"allTime\" && (\n              <>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">From:</div>\n                  <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={fromFilter}\n                    onChange={(date) => {\n                      setFromFilter(date as any);\n                    }}\n                    selectsStart\n                    startDate={fromFilter}\n                    endDate={toFilter}\n                    className=\"BotDetailsDateFilter\"\n                    strictParsing\n                  />\n                </div>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">To:</div>\n                  <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={toFilter}\n                    onChange={(date) => setToFilter(date as any)}\n                    selectsEnd\n                    startDate={fromFilter}\n                    endDate={toFilter}\n                    minDate={fromFilter}\n                    className=\"BotDetailsDateFilter\"\n                    strictParsing\n                  />\n                </div>\n              </>\n            )}\n            <div className=\"BotDetailsControl\">\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  clearFilters();\n                }}\n              >\n                {`Clear filters`}\n              </Button>\n            </div>\n          </div>\n          <div className=\"DCABotInfoGroup\">\n            <div className=\"DCABotName\">{bot.name}</div>\n            <div className=\"DCABotId\">{`(Bot ID: ${bot.id})`}</div>\n            <div className=\"DCABotLinkTo3Commas\">\n              <Button\n                onClick={() => {\n                  window.open(`https://3commas.io/bots/${botId}`, \"_blank\");\n                }}\n                variant=\"link\"\n                size=\"sm\"\n                active\n              >\n                Open in 3Commas\n              </Button>\n            </div>\n          </div>\n          <DCABotDetailsInfo\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            setInfoKey={setInfoKey}\n            fromFilter={fromFilter}\n            toFilter={toFilter}\n          />\n          {botsDeals.length > 0 && (\n            <DCABotDetailsDealsTable bot={bot} deals={botsDeals} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, BotsContext } from \"../../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\nimport { setBotsFilters } from \"../../../state/bots/BotsActions\";\n\nconst BotsFilters = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const { filters } = botsState;\n\n  const updateFilter = async (filterItem: any) => {\n    botsDispatch(\n      setBotsFilters({\n        ...botsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accounts.map((account: any) => ({\n      value: account.id,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${account.market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{account.name}</span>\n        </div>\n      ),\n      label_id: account.name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ account: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filters.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ scope: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filters.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ type: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filters.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ sorting: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filters.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { BotsContext, DealsContext, ErrorsContext } from \"../../../../App\";\nimport { fetchBots } from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport \"./BotsListCharts.css\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  calculateProfitPerDayForListOfBots,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"../../../../utils/DealsUtils\";\nimport { getBotsLeaderboardChartData } from \"../../../../utils/BotsUtils\";\n\nconst BotsListCharts = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { deals } = dealsState;\n  const { list, hasMore, offset, bots } = botsState;\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [dealsLoaded, setDealsLoaded] = useState(false);\n  const [botsLoaded, setBotsLoaded] = useState(false);\n\n  const [numberHandled, setNumberHandled] = useState(0);\n  const [profitsChartData, setProfitsChartData] = useState<any>([[], []]);\n  const [accumulativeProfitsChartData, setAccumulativeProfitsChartData] =\n    useState<any>([[], []]);\n  const [botsLeaderboardChartData, setBotsLeaderboardChartData] = useState<any>(\n    [[], [], []]\n  );\n\n  //first get all bots\n  const getBotsList = async () => {\n    if (hasMore && offset !== 0) {\n      await fetchBots(botsDispatch, botsState, errorsDispatch, false, 100);\n    }\n  };\n\n  useEffect(() => {\n    getBotsList().then(() => {\n      if (!hasMore) {\n        setBotsLoaded(true);\n      }\n    });\n  }, [offset]);\n\n  // get deals\n  const getBoatsDeals = async () => {\n    setDealsLimiter(Math.random());\n\n    for (const botId of list) {\n      if (!is30daysDealsLoaded(dealsState, botId)) {\n        await fetchDealsForBotFor30Days(\n          dealsState,\n          dealsDispatch,\n          errorsDispatch,\n          botId\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (botsLoaded) {\n      getBoatsDeals().then(() => {\n        setDealsLoaded(true);\n      });\n    }\n  }, [botsLoaded]);\n\n  // then calculate data for charts\n  useEffect(() => {\n    if (dealsLoaded) {\n      const profitsObject = calculateProfitPerDayForListOfBots(\n        dealsState,\n        list\n      );\n      setProfitsChartData(getProfitChartData(profitsObject));\n      setAccumulativeProfitsChartData(\n        getAccumulativeProfitChartData(profitsObject)\n      );\n      setBotsLeaderboardChartData(getBotsLeaderboardChartData(botsState));\n    }\n  }, [dealsLoaded, bots]);\n\n  // reset limiter everytime to stop all the jobs\n  useEffect(() => {\n    return () => {\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  // update data for loader\n  useEffect(() => {\n    const botsWithLoadedDeals = list.filter((botId: number) =>\n      is30daysDealsLoaded(dealsState, botId)\n    );\n    setNumberHandled((botsWithLoadedDeals.length / list.length) * 100);\n  }, [deals]);\n\n  return (\n    <div className=\"BotsListCharts\">\n      {!dealsLoaded && (\n        <div className=\"ProgressBar\">\n          {!botsLoaded ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <ProgressBar\n              now={Math.ceil(numberHandled)}\n              label={`${Math.ceil(numberHandled)}%`}\n            />\n          )}\n        </div>\n      )}\n      {dealsLoaded && (\n        <>\n          <div className=\"ChartContainer\">\n            <Line\n              options={\n                AccumulativeChartOptions(\n                  \"Total Accumulative Profit (30 days), $\"\n                ) as any\n              }\n              data={{\n                labels: accumulativeProfitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Accumulative Profit, $\",\n                    data: accumulativeProfitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    fill: { value: 0 },\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={ProfitChartOptions(\"Total Profit (30 days), $\") as any}\n              data={{\n                labels: profitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Profit, $\",\n                    data: profitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={\n                LeaderbordChartOptions(\n                  \"Funds locked/Max usage, $\",\n                  botsLeaderboardChartData[0]\n                ) as any\n              }\n              data={{\n                labels: botsLeaderboardChartData[0],\n                datasets: [\n                  {\n                    label: \"Funds locked, $\",\n                    data: botsLeaderboardChartData[1],\n                    borderColor: \"rgb(255, 99, 132)\",\n                    backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                  },\n                  {\n                    label: \"Max usage, $\",\n                    data: botsLeaderboardChartData[2],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BotsListCharts;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  BotsContext,\n  DealsContext,\n} from \"../../../App\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { fetchBots } from \"../../../state/bots/BotsEffects\";\nimport BotsListCharts from \"./BotsListCharts/BotsListCharts\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\n\nconst haveAllBotsDealsFor30Days = (botsList: any, deals: any) =>\n  botsList.every((botId: any) => botId in deals);\n\nexport const BotsList = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    dealsState: { deals },\n  } = useContext(DealsContext);\n  const { list, hasMore, filters, bots } = botsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [showCharts, setShowCharts] = useState(false);\n\n  const getAccountByBotId = (accountId: any) =>\n    accounts.find((account: any) => account.id === accountId);\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const previousFilters = usePrevious(filters);\n\n  useEffect(() => {\n    if (!previousFilters && list.length) {\n      setShowCharts(haveAllBotsDealsFor30Days(list, deals));\n    } else {\n      setShowCharts(false);\n      fetchBots(botsDispatch, botsState, errorsDispatch, true).then();\n    }\n  }, [filters]);\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={list.length}\n      next={async () => {\n        if (list.length) {\n          await fetchBots(botsDispatch, botsState, errorsDispatch, false);\n        }\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      {showCharts ? (\n        <BotsListCharts />\n      ) : (\n        <div className=\"ShowChartsButtonContainer\">\n          <Button\n            className=\"ShowChartsButton\"\n            onClick={() => {\n              setShowCharts(true);\n            }}\n          >\n            Calculate profits\n          </Button>\n        </div>\n      )}\n      <div className=\"BotsList\">\n        {accounts.length > 0 &&\n          list.map((botId: number) => (\n            <BotPreview\n              botItem={bots[botId]}\n              key={botId}\n              account={getAccountByBotId(bots[botId].account_id)}\n            />\n          ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n","import React from \"react\";\nimport BotsFilters from \"./BotsFilters/BotsFilters\";\nimport { BotsList } from \"./BotsList/BotsList\";\nimport \"./DCABots.css\";\n\nexport const DCABots = () => (\n  <>\n    <BotsFilters />\n    <BotsList />\n  </>\n);\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { IGridBot } from \"../interfaces/GridBot\";\nimport {\n  differenceInDays,\n  differenceInHours,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\n\nconst cryptoCoins: any = {\n  BTC: \"bitcoin\",\n  ETH: \"ethereum\",\n  BNB: \"binancecoin\",\n  USDT: \"tether\",\n  USDC: \"usd-coin\",\n  XRP: \"ripple\",\n  TRX: \"tron\",\n  BUSD: \"binance-usd\",\n  DOGE: \"dogecoin\",\n};\n\nexport const getInitialInvestment = async (gridBot: IGridBot) => {\n  const startPrice = parseFloat(gridBot.start_price);\n  const quantityPerGrid = parseFloat(gridBot.quantity_per_grid);\n\n  const pureInitialGrids = gridBot.grid_lines\n    .slice()\n    .sort((a: any, b: any) => {\n      return (\n        Math.abs(startPrice - parseFloat(a.price)) -\n        Math.abs(startPrice - parseFloat(b.price))\n      );\n    })\n    .slice();\n\n  pureInitialGrids.shift();\n\n  const baseInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) > startPrice)\n      .map((gridLine: any) => quantityPerGrid)\n  );\n\n  const quoteInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) < startPrice)\n      .map((gridLine: any) => parseFloat(gridLine.price) * quantityPerGrid)\n  );\n\n  const allInQuote = quoteInvestment + baseInvestment * startPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const createdOnDay = moment.utc(gridBot.updated_at);\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins) {\n    const marketData: any = await fetch(\n      `https://api.coingecko.com/api/v3/coins/${\n        cryptoCoins[quoteCurrency]\n      }/history?date=${createdOnDay.format(\"DD-MM-YYYY\")}&localization=false`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * marketData.market_data.current_price.usd;\n  } else {\n    if (moment().utc().diff(createdOnDay, \"days\") < 366) {\n      const marketData: any = await fetch(\n        `https://api.currconv.com/api/v7/convert?apiKey=8ae78b023a9240049d4d56f97c81020a&q=${quoteCurrency}_USD&compact=ultra&date=${createdOnDay.format(\n          \"YYYY-MM-DD\"\n        )}&apiKey=e4dcebf8eb9df2180846`\n      ).then((response: any) => response.json());\n\n      allInUsd =\n        allInQuote *\n        marketData[`${quoteCurrency}_USD`][createdOnDay.format(\"YYYY-MM-DD\")];\n    }\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nexport const getCurrentInvestment = async (gridBot: IGridBot) => {\n  const currentPrice = parseFloat(gridBot.current_price);\n\n  const baseInvestment = parseFloat(gridBot.investment_base_currency);\n\n  const quoteInvestment = parseFloat(gridBot.investment_quote_currency);\n\n  const allInQuote = quoteInvestment + baseInvestment * currentPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins || quoteCurrency === \"EUR\") {\n    const marketData: any = await fetch(\n      `https://api.3commas.io/public/api/ver1/accounts/currency_rates?market_code=binance&pair=USDT_${quoteCurrency}`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * parseFloat(marketData.last);\n  } else {\n    const marketData: any = await fetch(\n      `https://api.3commas.io/public/api/ver1/accounts/currency_rates?market_code=binance&pair=${quoteCurrency}_USDT`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote / parseFloat(marketData.last);\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nconst hoursWithin30Days = 24 * 30;\n\nexport const getProfitAgeInHours = (profit: any) =>\n  differenceInHours(moment(), moment(profit.created_at));\n\nexport const getProfitsWithin30days = (profits: any) =>\n  profits.filter(\n    (profit: any) => getProfitAgeInHours(profit) <= hoursWithin30Days\n  );\n\nexport const getMarketOrderAgeInHours = (marketOrder: any) =>\n  differenceInHours(moment(), moment(marketOrder.created_at));\n\nexport const getMarketOrdersWithin30days = (marketOrders: any) =>\n  marketOrders.grid_lines_orders.filter(\n    (marketOrder: any) =>\n      getMarketOrderAgeInHours(marketOrder) <= hoursWithin30Days\n  );\n\nexport const getObjectOfProfitPerDay = (\n  profits: Array<any>,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const dateStringProfits = (item: any) =>\n    moment(item.created_at).format(\"YYYY-MM-DD\");\n  let resultProfits = _.groupBy(profits, dateStringProfits);\n\n  const dateStringMarketOrders = (item: any) =>\n    moment(item.updated_at).format(\"YYYY-MM-DD\");\n  let resultMarketOrders = _.groupBy(marketOrders, dateStringMarketOrders);\n\n  const objectProfits = _.mapValues(resultProfits, (profits: Array<any>) =>\n    _.sum(profits.map((profit: any) => parseFloat(profit.profit)))\n  );\n\n  const objectMarketOrders = _.mapValues(\n    resultMarketOrders,\n    (marketOrders: Array<any>) =>\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01 *\n      -1\n  );\n\n  return _.mergeWith({}, objectProfits, objectMarketOrders, _.add);\n};\n\nexport const getOneGridBotAccumulativeProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getAccumulativeProfitChartData(botsProfits, difference);\n};\n\nexport const getOneGridBotProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getProfitChartData(botsProfits, difference);\n};\n","import { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\n\ninterface ISetNewGridBotsList {\n  type: \"setNewGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const setNewGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): ISetNewGridBotsList => ({\n  type: \"setNewGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToGridBotsList {\n  type: \"addToGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const addToGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): IAddToGridBotsList => ({\n  type: \"addToGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetGridBotsOffset {\n  type: \"setGridBotsOffset\";\n  payload: number;\n}\n\nexport const setGridBotsOffset = (offset: number): ISetGridBotsOffset => ({\n  type: \"setGridBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetGridBotsFilters {\n  type: \"setGridBotsFilters\";\n  payload: IGridBotFilters;\n}\n\nexport const setGridBotsFilters = (\n  gridBotsFilter: IGridBotFilters\n): ISetGridBotsFilters => ({\n  type: \"setGridBotsFilters\",\n  payload: gridBotsFilter,\n});\n\ninterface ISetGridBot {\n  type: \"setGridBot\";\n  payload: { gridBotId: number; gridBot: IGridBot };\n}\n\nexport const setGridBot = (\n  gridBotId: number,\n  gridBot: IGridBot\n): ISetGridBot => ({\n  type: \"setGridBot\",\n  payload: { gridBotId, gridBot },\n});\n\nexport type GridBotsAction =\n  | ISetNewGridBotsList\n  | ISetHasMore\n  | IAddToGridBotsList\n  | ISetGridBotsOffset\n  | ISetGridBotsFilters\n  | ISetGridBot;\n","import {\n  getGridBot,\n  getGridBots,\n  getGridBotsMarketOrders,\n  getGridBotsProfits,\n} from \"../../utils/ApiUtils\";\nimport {\n  getCurrentInvestment,\n  getInitialInvestment,\n} from \"../../utils/GridBotsUtils\";\nimport {\n  addToGridBotsList,\n  setHasMore,\n  setNewGridBotsList,\n  setGridBot,\n} from \"./GridBotsActions\";\nimport { IGridBotsState } from \"./GridBotsReducer\";\n\nconst spotAccountsTypes = [\n  \"Account::BinanceAccount\",\n  \"Accounts::Ftx\",\n  \"Account::HuobiAccount\",\n  \"Account::OkexAccount\",\n  \"Account::KucoinAccount\",\n  \"Account::GateIoAccount\",\n  \"Account::KrakenAccount\",\n  \"Account::BitfinexAccount\",\n  \"Account::BinanceUsAccount\",\n  \"Account::BitstampAccount\",\n  \"Accounts::GeminiAccount\",\n  \"Account::BittrexAccount\",\n  \"Account::GdaxAccount\",\n  \"Account::PaperTradingAccount\",\n];\n\nexport async function fetchGridBots(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  gridBotsDispatch(setHasMore(true));\n  gridBotsDispatch(setNewGridBotsList([]));\n  const {\n    limit,\n    filters: { sorting, account },\n  } = gridBotsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    let offset = 0;\n    let hasMore = true;\n\n    while (hasMore) {\n      const data: any = await getGridBots(\n        offset,\n        offsetLimit,\n        sorting,\n        account,\n        spotAccountsTypes\n      );\n      if (data.error) {\n        break;\n      }\n      gridBotsDispatch(addToGridBotsList(data));\n      offset = offset + offsetLimit;\n      if (data.length < offsetLimit) {\n        hasMore = false;\n      }\n    }\n    gridBotsDispatch(setHasMore(false));\n  } catch {\n    gridBotsDispatch(setNewGridBotsList([]));\n    gridBotsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching grid bots list\",\n    });\n  }\n}\n\nexport async function fetchGridBot(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  try {\n    const gridBot = await getGridBot(gridBotId);\n    gridBotsDispatch(setGridBot(gridBotId, gridBot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching grid bot ${gridBotId}`,\n    });\n  }\n}\n\nexport async function fetchInitialInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"initialInvestments\" in gridBotItem) ||\n      !gridBotItem.initialInvestments\n    ) {\n      const initialInvestments = await getInitialInvestment(gridBotItem);\n      return initialInvestments;\n    } else {\n      return gridBotItem.initialInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching initial investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchCurrentInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"currentInvestments\" in gridBotItem) ||\n      !gridBotItem.currentInvestments\n    ) {\n      const currentInvestments = await getCurrentInvestment(gridBotItem);\n      return currentInvestments;\n    } else {\n      return gridBotItem.currentInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching current investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchProfits(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"profits\" in gridBotItem) || !gridBotItem.profits) {\n      const profits = await getGridBotsProfits(gridBotId);\n      return profits;\n    } else {\n      return gridBotItem.profits;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching profits for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchMarketOrders(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"marketOrders\" in gridBotItem) || !gridBotItem.marketOrders) {\n      const marketOrders = await getGridBotsMarketOrders(gridBotId);\n      return marketOrders;\n    } else {\n      return gridBotItem.marketOrders;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchGridBotsMetrics(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const initialInvestments = await fetchInitialInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const currentInvestments = await fetchCurrentInvestments(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n  const profits = await fetchProfits(gridBotsState, errorsDispatch, gridBotId);\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    initialInvestments,\n    currentInvestments,\n    profits,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n\nexport async function fetchDetails(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const marketOrders = await fetchMarketOrders(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    marketOrders,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n","import React from \"react\";\nimport \"./CurrencyIcon.css\";\n\nconst CurrencyIcon = ({ currency, size = 15 }: any) => {\n  const formattedCurrency =\n    currency.length > 5\n      ? currency\n          .replace(\"USDT\", \"\")\n          .replace(\"BUSD\", \"\")\n          .replace(\"-PERP\", \"\")\n          .replace(\"USD\", \"\")\n      : currency;\n\n  return (\n    <div\n      className=\"CurrencyIcon\"\n      style={{\n        width: size,\n        height: size,\n        borderRadius: size,\n        backgroundSize: size,\n        backgroundImage: `url(https://3commas.io/currency/icon/${formattedCurrency.toLowerCase()}.png)`,\n      }}\n    ></div>\n  );\n};\n\nexport default CurrencyIcon;\n","import React, { useContext } from \"react\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\n\nimport \"./GridBotsListTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\n\nconst GridBotsListTable = ({\n  accounts,\n  values,\n  investment,\n  setModalGridBotId,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n  const { list, gridBots } = gridBotsState;\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account_id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const account = accounts.filter(\n              (account: any) => account.id === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${account.market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{account.name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Price range\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return `${originalRow.upper_price}_${originalRow.lower_price}_${originalRow.grids_quantity} levels`;\n          },\n          id: \"price_range\",\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const range = value.split(\"_\");\n            return (\n              <div>\n                <div\n                  style={{\n                    color: \"#00A59A\",\n                  }}\n                >\n                  {range[0]}\n                </div>\n                <div\n                  style={{\n                    color: \"#EE7D8B\",\n                  }}\n                >\n                  {range[1]}\n                </div>\n                <div\n                  style={{\n                    fontSize: \"12px\",\n                  }}\n                >\n                  {range[2]}\n                </div>\n              </div>\n            );\n          },\n        },\n        {\n          Header: \"Start price\",\n          accessor: \"start_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current price\",\n          accessor: \"current_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Active orders\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const grigLinesNumber = originalRow.grid_lines.length;\n            const sellOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"sell\"\n            ).length;\n            const buyOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"buy\"\n            ).length;\n\n            return (\n              <>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"danger\">\n                    {sellOrdersNumber}\n                  </Badge>\n                </div>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"success\">\n                    {buyOrdersNumber}\n                  </Badge>\n                </div>\n                {sellOrdersNumber + buyOrdersNumber !== grigLinesNumber - 1 && (\n                  <div style={{ marginBottom: \"3px\" }}>\n                    <OverlayTrigger\n                      key=\"right\"\n                      placement=\"right\"\n                      overlay={\n                        <Tooltip id={`tooltip-${originalRow.id}`}>\n                          Bot was unable to place all orders on the exchange.\n                          This may heavily impact your trading results and PnL\n                          reports on this page. Please contact 3commas support\n                          to check the error details.\n                        </Tooltip>\n                      }\n                    >\n                      <Badge style={{ fontSize: \"16px\" }} bg=\"warning\">\n                        {\"\\u26A0\"}\n                      </Badge>\n                    </OverlayTrigger>\n                  </div>\n                )}\n              </>\n            );\n          },\n          id: \"activeOrder\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Initial investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.initialInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.initialInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.initialInvestments.allInUsd\n                  : originalRow.initialInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"initial_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current investment\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.currentInvestments) {\n              return \"\";\n            } else if (investment === \"balances\") {\n              return (\n                <>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={baseCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.baseInvestment,\n                      currency: baseCurrency,\n                    })} ${baseCurrency}`}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                    <CurrencyIcon currency={quoteCurrency} />\n                    <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                      value: originalRow.currentInvestments.quoteInvestment,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                </>\n              );\n            } else {\n              const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n              const val =\n                values === \"usd\"\n                  ? originalRow.currentInvestments.allInUsd\n                  : originalRow.currentInvestments.allInQuote;\n              return (\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={cur} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: val,\n                    currency: cur,\n                  })} ${cur}`}</div>\n                </div>\n              );\n            }\n          },\n          id: \"current_investment\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Investment change\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const invesmentChange =\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.currentInvestments.allInQuote\n                      ? (invesmentChange /\n                          originalRow.currentInvestments.allInQuote) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const invesmentChange =\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              return (\n                <>\n                  <div>\n                    <div>{`${getCurrencyFormat({\n                      value: invesmentChange,\n                      currency: \"USD\",\n                    })} USD`}</div>\n                  </div>\n                  <div\n                    className={\n                      invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: originalRow.currentInvestments.allInUsd\n                      ? (invesmentChange /\n                          originalRow.currentInvestments.allInUsd) *\n                        100\n                      : 0,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"investment_change\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Bot profit\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (!originalRow.profits) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const profitPercent =\n                (quoteProfit / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: quoteProfit,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const profitPercent =\n                (usdProfit / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>{`${getCurrencyFormat({\n                    value: usdProfit,\n                    currency: \"USD\",\n                  })} USD`}</div>\n                  <div\n                    className={\n                      profitPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: profitPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"bot_profit\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Total PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            if (\n              !originalRow.profits ||\n              !originalRow.currentInvestments ||\n              !originalRow.initialInvestments\n            ) {\n              return \"\";\n            } else if (investment === \"balances\" || values === \"quote\") {\n              const quoteProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const pnl =\n                quoteProfit +\n                originalRow.currentInvestments.allInQuote -\n                originalRow.initialInvestments.allInQuote;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInQuote) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: quoteCurrency,\n                    })} ${quoteCurrency}`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            } else {\n              const usdProfit = _.sum(\n                originalRow.profits.map((profit: any) =>\n                  parseFloat(profit.usd_profit)\n                )\n              );\n              const pnl =\n                usdProfit +\n                originalRow.currentInvestments.allInUsd -\n                originalRow.initialInvestments.allInUsd;\n              const pnlPercent =\n                (pnl / originalRow.initialInvestments.allInUsd) * 100;\n              return (\n                <>\n                  <div>\n                    {`${getCurrencyFormat({\n                      value: pnl,\n                      currency: \"USD\",\n                    })} USD`}\n                  </div>\n                  <div\n                    className={\n                      pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value: pnlPercent,\n                    currency: \"USD\",\n                  })} %`}</div>\n                </>\n              );\n            }\n          },\n          id: \"total_PnL\",\n          disableSortBy: true,\n        },\n\n        {\n          Header: \"Stats\",\n          Cell: ({ cell: { value } }: any) => {\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <img className=\"stats\" src={`stats.png`} alt=\"stats\" />\n              </div>\n            );\n          },\n          id: \"stats\",\n          disableSortBy: true,\n        },\n      ] as any,\n    [investment, values]\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((gridBotId: number) => gridBots[gridBotId]),\n    });\n\n  return (\n    <div className=\"GridBotsListTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalGridBotId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default GridBotsListTable;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneGridBotAccumulativeProfitsChartData,\n  getOneGridBotProfitsChartData,\n} from \"../../../../utils/GridBotsUtils\";\nimport \"./GridBotDetailsCharts.css\";\n\nconst GridBotDetailsCharts = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getOneGridBotAccumulativeProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n    setProfitsData(\n      getOneGridBotProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n  }, [profits, marketOrders, tradingFee]);\n\n  return (\n    <div className=\"GridBotDetailsCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, ${quoteCurrency}`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, ${quoteCurrency}`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GridBotDetailsCharts;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotDetailsTable.css\";\n\nconst GridBotDetailsTable = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [profit, setProfit] = useState(0);\n  const [avgProfit, setAvgProfit] = useState(0);\n  const [returns, setReturns] = useState(0);\n  const [running, setRunning] = useState(0);\n\n  useEffect(() => {\n    const summarizedProfits = _.sum(\n      profits.map((profit: any) => parseFloat(profit.profit))\n    );\n    const summarizedMarketOrders =\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01;\n    const realProfit = summarizedProfits - summarizedMarketOrders;\n\n    let period = 1;\n\n    if (timeRangeValue === \"30d\") {\n      period = running > 30 ? 30 : running;\n    } else {\n      period = running;\n    }\n\n    const realAvgProfit = period ? realProfit / period : 0;\n    const quoteInvestment = gridBot.initialInvestments\n      ? gridBot.initialInvestments.allInQuote\n      : 0;\n    const realReturns = quoteInvestment\n      ? (realProfit * 100) / quoteInvestment\n      : 0;\n\n    const start = moment.utc(gridBot.created_at);\n    const end = gridBot.closed_at\n      ? moment.utc(gridBot.closed_at)\n      : moment.utc();\n\n    setProfit(realProfit);\n    setAvgProfit(realAvgProfit);\n    setReturns(realReturns);\n    setRunning(end.diff(start, \"days\"));\n  }, [gridBot, profits, marketOrders, tradingFee, timeRangeValue]);\n\n  return (\n    profits &&\n    marketOrders && (\n      <Table hover>\n        <thead>\n          <tr>\n            <th>Days running</th>\n            <th>Transactions</th>\n            <th>Avg. daily</th>\n            <th>Bot profit</th>\n            <th>Returns</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{running}</td>\n            <td>{profits ? profits.length : \"\"}</td>\n            <td>{`${getCurrencyFormat({\n              value: avgProfit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: profit,\n              currency: quoteCurrency,\n            })} ${quoteCurrency}`}</td>\n            <td>{`${getCurrencyFormat({\n              value: returns,\n              currency: \"USD\",\n            })} %`}</td>\n          </tr>\n        </tbody>\n      </Table>\n    )\n  );\n};\n\nexport default GridBotDetailsTable;\n","import React, { useEffect, useContext, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  FormControl,\n  InputGroup,\n  Modal,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { ErrorsContext, GridBotsContext } from \"../../../App\";\nimport { fetchDetails } from \"../../../state/gridBots/GridBotsEffects\";\nimport {\n  getMarketOrdersWithin30days,\n  getProfitsWithin30days,\n} from \"../../../utils/GridBotsUtils\";\nimport \"./GridBotDetails.css\";\nimport GridBotDetailsCharts from \"./GridBotDetailsCharts/GridBotDetailsCharts\";\nimport GridBotDetailsTable from \"./GridBotDetailsTable/GridBotDetailsTable\";\n\nconst timeRangeRadios = [\n  { name: \"30 days\", value: \"30d\" },\n  { name: \"All time\", value: \"allTime\" },\n];\n\nconst GridBotDetails = ({ modalIsOpen, setModalIsOpen, gridBotId }: any) => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const [tradingFee, setTradingFee] = useState(0);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n\n  const [marketOrders, setMarketOrders] = useState([]);\n  const [profits, setProfits] = useState([]);\n\n  const inputTradingFee = (e: any) => {\n    if (e.target.value >= 0 && e.target.value <= 100) {\n      setTradingFee(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && !gridBot.marketOrders) {\n      fetchDetails(\n        gridBotsDispatch,\n        gridBotsState,\n        errorsDispatch,\n        gridBotId\n      ).then();\n    }\n  }, [gridBot]);\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && gridBot.marketOrders) {\n      if (timeRangeValue === \"30d\") {\n        setMarketOrders(\n          getMarketOrdersWithin30days(gridBot.marketOrders).filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(getProfitsWithin30days(gridBot.profits));\n      } else {\n        setMarketOrders(\n          gridBot.marketOrders.grid_lines_orders.filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(gridBot.profits);\n      }\n    }\n  }, [gridBot, timeRangeValue]);\n\n  return (\n    <>\n      {gridBot && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{`GridBot: ${gridBot.pair\n              .split(\"_\")\n              .reverse()\n              .join(\"/\")} (ID: ${gridBotId})`}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"GridBotsDetailsFilters\">\n              <div className=\"GridBotListControl\">\n                <div className=\"FilterTitle\">Time range</div>\n                <ButtonGroup>\n                  {timeRangeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio\"\n                      value={radio.value}\n                      checked={timeRangeValue === radio.value}\n                      onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n              <div\n                className=\"GridBotListControl\"\n                style={{ width: \"150px\", marginLeft: \"auto\" }}\n              >\n                <div className=\"FilterTitle\">Trading fee</div>\n                <InputGroup>\n                  <FormControl\n                    onChange={inputTradingFee}\n                    value={tradingFee}\n                    type=\"number\"\n                  />\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup>\n              </div>\n            </div>\n            <GridBotDetailsTable\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n            <GridBotDetailsCharts\n              gridBotId={gridBotId}\n              profits={profits}\n              marketOrders={marketOrders}\n              tradingFee={tradingFee}\n              timeRangeValue={timeRangeValue}\n            />\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default GridBotDetails;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotListMetrics.css\";\n\nconst GridBotListMetrics = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, gridBots } = gridBotsState;\n\n  const [totalInvestments, setTotalInvestments] = useState(0);\n  const [totalProfits, setTotalProfits] = useState(0);\n  const [totaPnL, setTotalPnL] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!hasMore) {\n      const allHaveInvestments = list.every(\n        (id: any) => gridBots[id].initialInvestments\n      );\n      const allHaveCurrentInvestments = list.every(\n        (id: any) => gridBots[id].currentInvestments\n      );\n      const allHaveProfits = list.every((id: any) => gridBots[id].profits);\n      if (\n        list &&\n        allHaveInvestments &&\n        allHaveProfits &&\n        allHaveCurrentInvestments\n      ) {\n        const calculatedInitialInvestments = _.sum(\n          list.map((id: any) => gridBots[id].initialInvestments.allInUsd)\n        );\n        const calculatedCurrentInvestments = _.sum(\n          list.map((id: any) => gridBots[id].currentInvestments.allInUsd)\n        );\n        const calculatedProfits = _.sum(\n          list.map((id: any) =>\n            _.sum(\n              gridBots[id].profits.map((profit: any) =>\n                parseFloat(profit.usd_profit)\n              )\n            )\n          )\n        );\n\n        setIsLoading(false);\n        setTotalInvestments(calculatedInitialInvestments);\n        setTotalProfits(calculatedProfits);\n        setTotalPnL(\n          calculatedProfits +\n            calculatedCurrentInvestments -\n            calculatedInitialInvestments\n        );\n      }\n    }\n  }, [list, hasMore, gridBots]);\n\n  return !isLoading ? (\n    <div className=\"GridBotListMetrics\">\n      <div className=\"GridBotListMetricsContainer\">\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Investment</div>\n          <div className=\"GridBotListMetricBody\">{`${getCurrencyFormat({\n            value: totalInvestments,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total Bot Profits</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totalProfits >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totalProfits,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n        <div className=\"GridBotListMetric\">\n          <div className=\"GridBotListMetricHeader\">Total PnL</div>\n          <div\n            className={`GridBotListMetricBody ${\n              totaPnL >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n            }`}\n          >{`${getCurrencyFormat({\n            value: totaPnL,\n            currency: \"USD\",\n          })} $`}</div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"SpinnerContainer\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default GridBotListMetrics;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport {\n  fetchGridBotsMetrics,\n  fetchGridBots,\n} from \"../../../state/gridBots/GridBotsEffects\";\nimport Select from \"react-select\";\n\nimport \"./GridBotsList.css\";\nimport GridBotsListTable from \"./GridBotsListTable/GridBotsListTable\";\nimport { setGridBotsFilters } from \"../../../state/gridBots/GridBotsActions\";\nimport { isSpotAccount } from \"../../../utils/BotsUtils\";\nimport GridBotDetails from \"../GridBotDetails/GridBotDetails\";\nimport GridBotListMetrics from \"./GridBotListMetrics/GridBotListMetrics\";\n\nexport const investmentRadios = [\n  { name: \"Value\", value: \"value\" },\n  { name: \"Balances\", value: \"balances\" },\n];\nexport const valuesRadios = [\n  { name: \"USD\", value: \"usd\" },\n  { name: \"Quote\", value: \"quote\" },\n];\n\nconst GridBotsList = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, filters } = gridBotsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [investment, setInvestment] = useState(\"value\");\n  const [values, setValues] = useState(\"usd\");\n  const [modalGridBotId, setModalGridBotId] = useState(\"\");\n\n  const updateFilter = async (filterItem: any) => {\n    gridBotsDispatch(\n      setGridBotsFilters({\n        ...gridBotsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const accountsOptions = [\n    { value: \"\", label: \"All spot accounts\", label_id: \"All\" },\n    ...accounts\n      .filter((account: any) => isSpotAccount(account.market_code))\n      .map((account: any) => ({\n        value: account.id,\n        label: (\n          <div className=\"AccountFilterItem\">\n            <div>\n              <div\n                className=\"AccountMarketIcon\"\n                style={{\n                  backgroundImage: `url(${account.market_icon})`,\n                }}\n              ></div>\n            </div>\n            <span>{account.name}</span>\n          </div>\n        ),\n        label_id: account.name,\n      })),\n  ];\n\n  useEffect(() => {\n    fetchGridBots(gridBotsDispatch, gridBotsState, errorsDispatch).then();\n  }, [filters]);\n\n  useEffect(() => {\n    if (!hasMore) {\n      for (const gridBotId of list) {\n        fetchGridBotsMetrics(\n          gridBotsDispatch,\n          gridBotsState,\n          errorsDispatch,\n          gridBotId\n        ).then();\n      }\n    }\n  }, [hasMore, list]);\n\n  return (\n    <>\n      <GridBotListMetrics />\n      <div className=\"GridBotsFilters\">\n        <div className=\"GridBotsFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            onChange={(option: any) => {\n              updateFilter({ account: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.account\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"GridBotListControl\">\n          <div className=\"FilterTitle\">Investment</div>\n          <ButtonGroup id=\"foo\">\n            {investmentRadios.map((radio, idx) => (\n              <ToggleButton\n                key={radio.value}\n                id={`radio-${radio.value}`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioInvestment\"\n                value={radio.value}\n                checked={investment === radio.value}\n                onChange={(e) => {\n                  setInvestment(e.currentTarget.value);\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {investment === \"value\" && (\n          <div className=\"GridBotListControl\">\n            <div className=\"FilterTitle\">Show values in</div>\n            <ButtonGroup id=\"bar\">\n              {valuesRadios.map((radio, idx) => (\n                <ToggleButton\n                  key={radio.value}\n                  id={`radio-${radio.value}`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radioValues\"\n                  value={radio.value}\n                  checked={values === radio.value}\n                  onChange={(e) => setValues(e.currentTarget.value)}\n                >\n                  {radio.name}\n                </ToggleButton>\n              ))}\n            </ButtonGroup>\n          </div>\n        )}\n      </div>\n      {isNothingFound ? (\n        <div className=\"FallbackContainer\">\n          <p style={{ textAlign: \"center\" }}>\n            <b>No results found =(</b>\n          </p>\n        </div>\n      ) : (\n        <div className=\"GridBotsList\">\n          {accounts.length > 0 && (\n            <GridBotsListTable\n              accounts={accounts}\n              values={values}\n              investment={investment}\n              setModalGridBotId={setModalGridBotId}\n            />\n          )}\n          {!!modalGridBotId && (\n            <GridBotDetails\n              modalIsOpen={!!modalGridBotId}\n              setModalIsOpen={setModalGridBotId}\n              gridBotId={modalGridBotId}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GridBotsList;\n","import React from \"react\";\nimport \"./GridBots.css\";\nimport GridBotsList from \"./GridBotsList/GridBotsList\";\n\nconst GridBots = () => (\n  <>\n    {/* <BotsFilters /> */}\n    <GridBotsList />\n  </>\n);\n\nexport default GridBots;\n","import { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\n\ninterface ISetNewSmartTradesList {\n  type: \"setNewSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const setNewSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): ISetNewSmartTradesList => ({\n  type: \"setNewSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToSmartTradesList {\n  type: \"addToSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const addToSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): IAddToSmartTradesList => ({\n  type: \"addToSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetSmartTradesOffset {\n  type: \"setSmartTradesOffset\";\n  payload: number;\n}\n\nexport const setSmartTradesOffset = (\n  offset: number\n): ISetSmartTradesOffset => ({\n  type: \"setSmartTradesOffset\",\n  payload: offset,\n});\n\ninterface ISetSmartTradesFilters {\n  type: \"setSmartTradesFilters\";\n  payload: ISmartTradeFilters;\n}\n\nexport const setSmartTradesFilters = (\n  smartTradesFilter: ISmartTradeFilters\n): ISetSmartTradesFilters => ({\n  type: \"setSmartTradesFilters\",\n  payload: smartTradesFilter,\n});\n\ninterface ISetSmartTrade {\n  type: \"setSmartTrade\";\n  payload: { smartTradeId: number; smartTrade: ISmartTrade };\n}\n\nexport const setSmartTrade = (\n  smartTradeId: number,\n  smartTrade: ISmartTrade\n): ISetSmartTrade => ({\n  type: \"setSmartTrade\",\n  payload: { smartTradeId, smartTrade },\n});\n\nexport type SmartTradesAction =\n  | ISetNewSmartTradesList\n  | ISetHasMore\n  | IAddToSmartTradesList\n  | ISetSmartTradesOffset\n  | ISetSmartTradesFilters\n  | ISetSmartTrade;\n","import { getSmartTrades, getSmartTradeTrades } from \"../../utils/ApiUtils\";\nimport { convertFilterValueToDate } from \"../../utils/GeneralUtils\";\nimport {\n  addToSmartTradesList,\n  setHasMore,\n  setNewSmartTradesList,\n  setSmartTrade,\n} from \"./SmartTradesActions\";\nimport { ISmartTradesState } from \"./SmartTradesReducer\";\n\nexport async function fetchSmartTrades(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  smartTradesDispatch(setHasMore(true));\n  smartTradesDispatch(setNewSmartTradesList([]));\n  const {\n    limit,\n    filters: { sorting, accountId, type, pair, status, from },\n  } = smartTradesState;\n\n  const perPage = customLimit ? customLimit : limit;\n  const fromDate = convertFilterValueToDate(from);\n  try {\n    let hasMore = true;\n    let page = 1;\n\n    while (hasMore) {\n      const data: any = await getSmartTrades(\n        page,\n        perPage,\n        sorting,\n        accountId,\n        type,\n        pair,\n        status,\n        fromDate\n      );\n      if (data.error) {\n        break;\n      }\n      smartTradesDispatch(addToSmartTradesList(data));\n      page = page + 1;\n      if (data.length < perPage) {\n        hasMore = false;\n      }\n    }\n    smartTradesDispatch(setHasMore(false));\n  } catch {\n    smartTradesDispatch(setNewSmartTradesList([]));\n    smartTradesDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching grid bots list\",\n    });\n  }\n}\n\nexport async function fetchTrades(\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n  try {\n    if (!(\"trades\" in smartTradeItem) || !smartTradeItem.trades) {\n      const smartTradeTrades = await getSmartTradeTrades(smartTradeId);\n      return smartTradeTrades;\n    } else {\n      return smartTradeItem.trades;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${smartTradeItem.id}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchDetails(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const trades = await fetchTrades(\n    smartTradesState,\n    errorsDispatch,\n    smartTradeId\n  );\n\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n\n  const smartTrade = {\n    ...smartTradeItem,\n    trades,\n  };\n  await smartTradesDispatch(setSmartTrade(smartTradeId, smartTrade));\n}\n","import React, { useContext } from \"react\";\nimport { Badge, Table } from \"react-bootstrap\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./SmartTradeDetailsStatusTable.css\";\n\nconst SmartTradeDetailsStatusTable = ({ smartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n\n  const { smartTrades } = smartTradesState;\n\n  const smartTrade = smartTrades[smartTradeId];\n\n  return (\n    <div className=\"SmartTradeDetailsStatusTable\">\n      {smartTrade && (\n        <Table striped>\n          <thead>\n            <tr>\n              <th>Average entry</th>\n              <th>Average close</th>\n              <th>Current price</th>\n              <th>PnL, $</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr style={{ fontSize: \"14px\" }}>\n              <td>{`${\n                smartTrade.data.type === \"smart_sell\" ||\n                smartTrade.data.type === \"smart_buy\"\n                  ? smartTrade.position.price.value\n                  : smartTrade.data.average_enter_price\n              }`}</td>\n              <td>{`${\n                smartTrade.data.average_close_price\n                  ? smartTrade.data.average_close_price\n                  : \"\"\n              }`}</td>\n              <td>{`${\n                smartTrade.data.current_price\n                  ? smartTrade.data.current_price.last\n                  : \"\"\n              }`}</td>\n              <td>\n                {smartTrade.profit.usd ? (\n                  <Badge\n                    bg={smartTrade.profit.usd >= 0 ? \"success\" : \"danger\"}\n                    style={{ fontSize: \"13px\" }}\n                  >{`${getCurrencyFormat({\n                    value: smartTrade.profit.usd,\n                    currency: \"USD\",\n                  })}$`}</Badge>\n                ) : (\n                  \"\"\n                )}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradeDetailsStatusTable;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport \"./SmartTradeDetailsTable.css\";\n\nconst SmartTradeDetailsTable = ({ smartTradeId, trades }: any) => {\n  const triggerSignMap: any = {\n    less: \"<\",\n    less_or_equal: \"<=\",\n    greater_or_equal: \">=\",\n    greater: \">\",\n  };\n\n  return (\n    trades && (\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Order</th>\n            <th>Price</th>\n            <th>Amount</th>\n            <th>Total</th>\n            <th>Trigger</th>\n            <th>Trailing</th>\n            <th>Status</th>\n            <th>Created</th>\n            <th>Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n          {trades.map((trade: any) => (\n            <tr style={{ fontSize: \"14px\" }} key={trade.id}>\n              <td>{`${trade.order_type} ${trade.order_side}`}</td>\n              <td>\n                <div>{`Desired: ${\n                  trade.initial_price ? trade.initial_price : \"\"\n                }`}</div>\n                <div>{`Real: ${\n                  trade.realised_price ? trade.realised_price : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`Desired: ${\n                  trade.initial_amount ? trade.initial_amount : \"\"\n                }`}</div>\n                <div>{`Real: ${\n                  trade.realised_amount ? trade.realised_amount : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`Desired: ${\n                  trade.initial_total ? trade.initial_total : \"\"\n                }`}</div>\n                <div>{`Real: ${\n                  trade.realised_total ? trade.realised_total : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`${\n                  trade.trigger_condition\n                    ? triggerSignMap[trade.trigger_condition]\n                    : \"\"\n                } ${trade.trigger_price ? trade.trigger_price : \"\"}`}</div>\n              </td>\n              <td>\n                <div>{`${trade.trail_value ? trade.trail_value : \"\"} ${\n                  trade.trail_percentage ? `(${trade.trail_percentage}%)` : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`${trade.status ? trade.status : \"\"}`}</div>\n              </td>\n              <td>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.created_at).format(\"DD/MM/YYYY\")\n                    : \"\"\n                }`}</div>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.created_at).format(\"HH:mm\")\n                    : \"\"\n                }`}</div>\n              </td>\n              <td>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.updated_at).format(\"DD/MM/YYYY\")\n                    : \"\"\n                }`}</div>\n                <div>{`${\n                  trade.updated_at\n                    ? moment(trade.updated_at).format(\"HH:mm\")\n                    : \"\"\n                }`}</div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    )\n  );\n};\n\nexport default SmartTradeDetailsTable;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, Modal, ToggleButton } from \"react-bootstrap\";\nimport { ErrorsContext, SmartTradesContext } from \"../../../App\";\nimport { fetchDetails } from \"../../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTradeDetails.css\";\nimport SmartTradeDetailsStatusTable from \"./SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable\";\nimport SmartTradeDetailsTable from \"./SmartTradeDetailsTable/SmartTradeDetailsTable\";\n\nconst purposeRadios = [\n  { name: \"Position\", value: \"position\" },\n  { name: \"Take profit\", value: \"take_profit\" },\n  { name: \"Reduce funds\", value: \"reduce_funds\" },\n  { name: \"Stop loss\", value: \"stop_loss\" },\n  { name: \"Panic\", value: \"panic\" },\n  { name: \"All\", value: \"\" },\n];\n\nconst SmartTradeDetails = ({\n  modalIsOpen,\n  setModalIsOpen,\n  smartTradeId,\n}: any) => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { smartTrades } = smartTradesState;\n  const smartTrade = smartTrades[smartTradeId];\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [purpose, setPurpose] = useState(\"\");\n  const [trades, setTrades] = useState([]);\n\n  useEffect(() => {\n    if (smartTradeId) {\n      fetchDetails(\n        smartTradesDispatch,\n        smartTradesState,\n        errorsDispatch,\n        smartTradeId\n      ).then();\n    }\n  }, [smartTradeId]);\n\n  useEffect(() => {\n    if (smartTrade && smartTrade.trades) {\n      setTrades(smartTrade.trades);\n    }\n  }, [smartTrade]);\n\n  useEffect(() => {\n    if (purpose) {\n      setTrades(\n        smartTrade.trades.filter(\n          (trade: any) => trade.trade_purpose === purpose\n        )\n      );\n    } else {\n      if (smartTrade && smartTrade.trades) {\n        setTrades(smartTrade.trades);\n      }\n    }\n  }, [purpose]);\n\n  return (\n    <>\n      {smartTrade && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{`${smartTrade.pair\n              .split(\"_\")\n              .reverse()\n              .join(\"/\")} (Trade ID: ${smartTradeId})`}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div>\n              <div className=\"SmartTradeDetailsControl\">\n                <SmartTradeDetailsStatusTable smartTradeId={smartTradeId} />\n              </div>\n              <div className=\"SmartTradeDetailsControl\">\n                <ButtonGroup>\n                  {purposeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-position-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio-detail-position\"\n                      value={radio.value}\n                      checked={purpose === radio.value}\n                      onChange={(e) => setPurpose(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n            </div>\n            {trades && (\n              <SmartTradeDetailsTable\n                smartTradeId={smartTradeId}\n                trades={trades}\n              />\n            )}\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradeDetails;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { ISmartTrade } from \"../interfaces/SmartTrade\";\nimport {\n  differenceInDays,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\nimport { convertFilterValueToDate } from \"./GeneralUtils\";\n\nexport const getObjectOfSmartTradesProfitsPerDay = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n  const dateStringProfits = (item: any) =>\n    moment(item.data.closed_at).format(\"YYYY-MM-DD\");\n\n  let resultProfits = _.groupBy(filteredSmartTrades, dateStringProfits);\n\n  return _.mapValues(resultProfits, (smartTrades: Array<any>) =>\n    _.sum(\n      smartTrades.map((smartTrade: any) => parseFloat(smartTrade.profit.usd))\n    )\n  );\n};\n\nexport const getSmartTradesProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\nexport const getSmartTradesAccumulativeProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\n\nexport const getSmartTradesPairsLeaderboardChartData = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n\n  const groupedResultProfits = _.groupBy(filteredSmartTrades, \"pair\");\n\n  const resultProfits = _.mapValues(\n    groupedResultProfits,\n    (groupedSmartTrades: any) =>\n      _.sum(\n        groupedSmartTrades.map((smartTrade: any) =>\n          parseFloat(smartTrade.profit.usd)\n        )\n      )\n  );\n\n  const sortedProfits = _(resultProfits)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n","import React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getSmartTradesAccumulativeProfitsChartData,\n  getSmartTradesPairsLeaderboardChartData,\n  getSmartTradesProfitsChartData,\n} from \"../../../../utils/SmartTradesUtil\";\nimport \"./SmartTradesCharts.css\";\n\ninterface SmartTradesChartsProps {}\n\nconst SmartTradesCharts: FC<SmartTradesChartsProps> = () => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, hasMore, smartTrades, filters } = smartTradesState;\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairProfitsLeaderboardData, setPairProfitsLeaderboardData] =\n    useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: \"USD\",\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getSmartTradesAccumulativeProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setProfitsData(\n      getSmartTradesProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setPairProfitsLeaderboardData(\n      getSmartTradesPairsLeaderboardChartData(\n        list.map((id: any) => smartTrades[id])\n      )\n    );\n  }, [list]);\n\n  return !hasMore ? (\n    <div className=\"SmartTradesCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, $`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, $`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs leaderboard by profit\",\n              pairProfitsLeaderboardData[0]\n            ) as any\n          }\n          data={{\n            labels: pairProfitsLeaderboardData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: pairProfitsLeaderboardData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <div className=\"SmartTradesChartsSpiner\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default SmartTradesCharts;\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, SmartTradesContext } from \"../../../../App\";\nimport Select from \"react-select\";\nimport \"./SmartTradesFilters.css\";\nimport DatePicker from \"react-datepicker\";\nimport { setSmartTradesFilters } from \"../../../../state/smartTrades/SmartTradesActions\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst timeRangeRadios = [\n  { name: \"Today\", value: \"today\" },\n  { name: \"Week\", value: \"week\" },\n  { name: \"Month\", value: \"month\" },\n  { name: \"All time\", value: \"allTime\" },\n  { name: \"Custom\", value: \"custom\" },\n];\n\nconst SmartTradesFilters = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const { filters, hasMore, list } = smartTradesState;\n\n  const updateFilter = async (filterItem: any) => {\n    smartTradesDispatch(\n      setSmartTradesFilters({\n        ...smartTradesState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accounts.map((account: any) => ({\n      value: account.id,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${account.market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{account.name}</span>\n        </div>\n      ),\n      label_id: account.name,\n    })),\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"simple_buy\", label: \"Simple buy\" },\n    { value: \"simple_sell\", label: \"Simple sell\" },\n    { value: \"smart_sell\", label: \"Smart sell\" },\n    { value: \"smart_cover\", label: \"Smart cover\" },\n    { value: \"smart_buy\", label: \"Smart buy\" },\n  ];\n\n  const statusOptions: any = [\n    { value: \"all\", label: \"All\" },\n    { value: \"active\", label: \"Active\" },\n    { value: \"finished\", label: \"Finished\" },\n    { value: \"successfully_finished\", label: \"Successfully finished\" },\n    { value: \"cancelled\", label: \"Cancelled\" },\n    { value: \"failed\", label: \"Failed\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    {\n      value: \"profit_percentage-desc\",\n      label: \"Profit percentage (Highest First)\",\n    },\n    {\n      value: \"profit_percentage-asc\",\n      label: \"Profit percentage (Lowest First)\",\n    },\n    { value: \"created_at-desc\", label: \"Opened (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Opened (Oldest first)\" },\n    { value: \"closed_at-desc\", label: \"Closed (Youngest first)\" },\n    { value: \"closed_at-asc\", label: \"Closed (Oldest first)\" },\n    { value: \"status-desc\", label: \"Status (Highest First)\" },\n    { value: \"status-asc\", label: \"Status (Lowest First)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"smartTradesFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <>\n      <div className=\"SmartTradesFilters\">\n        <div className=\"SmartTradesTimeRangeContainer\">\n          <ButtonGroup>\n            {timeRangeRadios.map((radio, idx) => (\n              <ToggleButton\n                key={idx}\n                id={`radio-${idx}`}\n                type=\"radio\"\n                disabled={hasMore}\n                variant=\"outline-primary\"\n                name=\"radio\"\n                value={radio.value}\n                checked={filters.from.label === radio.value}\n                onChange={(e) => {\n                  updateFilter({\n                    from: { ...filters.from, label: e.currentTarget.value },\n                  });\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {filters.from.label === \"custom\" && (\n          <div className=\"SmartTradesTimeRangeContainer\">\n            <div className=\"FilterTitle\">From</div>\n            <DatePicker\n              dateFormat=\"yyyy-MM-dd\"\n              disabled={hasMore}\n              selected={\n                filters.from.from\n                  ? moment(filters.from.from).toDate()\n                  : moment().toDate()\n              }\n              onChange={(date: any) => {\n                updateFilter({\n                  from: {\n                    label: \"custom\",\n                    from: moment(date).format(\"YYYY-MM-DD\"),\n                  },\n                });\n              }}\n              selectsStart\n              className=\"SmartTradesDateFilter\"\n              strictParsing\n            />\n          </div>\n        )}\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ accountId: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.accountId\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Status</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ status: option.value });\n            }}\n            value={statusOptions.find(\n              (option: any) => option.value === filters.status\n            )}\n            options={statusOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Type</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ type: option.value });\n            }}\n            value={typeOptions.find(\n              (option: any) => option.value === filters.type\n            )}\n            options={typeOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Sort by</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ sorting: option.value });\n            }}\n            value={sortingOptions.find(\n              (option: any) => option.value === filters.sorting\n            )}\n            options={sortingOptions}\n            className=\"Sorting\"\n          />\n        </div>\n      </div>\n      {!hasMore && (\n        <div className=\"SmartTradesFilters\">{`Total: ${list.length}`}</div>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradesFilters;\n","import React, { useContext } from \"react\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, Table } from \"react-bootstrap\";\n\nimport \"./SmartTradesTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nconst smartTradeTypes: any = {\n  simple_buy: \"Simple Buy\",\n  simple_sell: \"Simple Sell\",\n  smart_sell: \"Smart Sell\",\n  smart_trade: \"Smart Trade\",\n  smart_cover: \"Smart Cover\",\n  smart_buy: \"Smart Buy\",\n};\n\nconst SmartTradesTable = ({ accounts, setModalSmartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, smartTrades } = smartTradesState;\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account.id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const account = accounts.filter(\n              (account: any) => account.id === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${account.market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{account.name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Side\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const side = originalRow.position.type === \"buy\" ? \"LONG\" : \"SHORT\";\n            return side;\n          },\n          id: \"side\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Type\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            smartTradeTypes[originalRow.data.type],\n\n          id: \"type\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.status.title,\n\n          id: \"status\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, %\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_percent = parseFloat(originalRow.profit.percent);\n            return pnl_percent ? (\n              <div\n                className={\n                  pnl_percent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                }\n              >{`${getCurrencyFormat({\n                value: pnl_percent,\n                currency: \"USD\",\n              })}%`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_percent\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            const pnl = parseFloat(originalRow.profit.volume);\n            return pnl ? (\n              <div\n                className={pnl >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"}\n              >{`${getCurrencyFormat({\n                value: pnl,\n                currency: quoteCurrency,\n              })} ${quoteCurrency}`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_quote\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, $\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_usd = parseFloat(originalRow.profit.usd);\n            return pnl_usd ? (\n              <Badge\n                bg={pnl_usd >= 0 ? \"success\" : \"danger\"}\n                style={{ fontSize: \"13px\" }}\n              >{`${getCurrencyFormat({\n                value: pnl_usd,\n                currency: \"USD\",\n              })}$`}</Badge>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_usd\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={baseCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.units.value,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={quoteCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.total.value,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                </div>\n              </>\n            );\n          },\n\n          id: \"volume\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Margin and Leverage\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return originalRow.leverage.enabled ? (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <div>{`${getCurrencyFormat({\n                    value: originalRow.margin.total,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  {originalRow.leverage && (\n                    <div>\n                      {`x${Math.floor(originalRow.leverage.value)} ${\n                        originalRow.leverage.type\n                      }`}\n                    </div>\n                  )}\n                </div>\n              </>\n            ) : (\n              \"\"\n            );\n          },\n\n          id: \"margin\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Created at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.created_at);\n            return (\n              <>\n                <div>{date.format(\"DD/MM/YYYY\")}</div>\n                <div>{date.format(\"HH:mm\")}</div>\n              </>\n            );\n          },\n\n          id: \"created_at\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Closed at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.closed_at);\n            return (\n              originalRow.data.closed_at && (\n                <>\n                  <div>{date.format(\"DD/MM/YYYY\")}</div>\n                  <div>{date.format(\"HH:mm\")}</div>\n                </>\n              )\n            );\n          },\n\n          id: \"closed_at\",\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((smartTradeId: number) => smartTrades[smartTradeId]),\n    });\n\n  return (\n    <div className=\"SmartTradesTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalSmartTradeId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default SmartTradesTable;\n","import React, { FC, useContext, useState } from \"react\";\nimport { AccountsContext } from \"../../../App\";\nimport SmartTradeDetails from \"../SmartTradeDetails/SmartTradeDetails\";\nimport SmartTradesCharts from \"./SmartTradesCharts/SmartTradesCharts\";\nimport SmartTradesFilters from \"./SmartTradesFilters/SmartTradesFilters\";\nimport \"./SmartTradesList.css\";\nimport SmartTradesTable from \"./SmartTradesTable/SmartTradesTable\";\n\ninterface SmartTradesListProps {}\n\nconst SmartTradesList: FC<SmartTradesListProps> = () => {\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const [modalSmartTradeId, setModalSmartTradeId] = useState(\"\");\n\n  return (\n    <div className=\"SmartTradesList\">\n      <SmartTradesCharts />\n      <SmartTradesFilters />\n      {accounts.length > 0 && (\n        <SmartTradesTable\n          accounts={accounts}\n          setModalSmartTradeId={setModalSmartTradeId}\n        />\n      )}\n      {!!modalSmartTradeId && (\n        <SmartTradeDetails\n          modalIsOpen={!!modalSmartTradeId}\n          setModalIsOpen={setModalSmartTradeId}\n          smartTradeId={modalSmartTradeId}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradesList;\n","import React, { FC, useContext, useEffect } from \"react\";\nimport { ErrorsContext, SmartTradesContext } from \"../../App\";\nimport { fetchSmartTrades } from \"../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTrades.css\";\nimport SmartTradesList from \"./SmartTradesList/SmartTradesList\";\n\ninterface SmartTradesProps {}\n\nconst SmartTrades: FC<SmartTradesProps> = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { filters } = smartTradesState;\n\n  useEffect(() => {\n    fetchSmartTrades(\n      smartTradesDispatch,\n      smartTradesState,\n      errorsDispatch\n    ).then();\n  }, [filters]);\n\n  return (\n    <div className=\"SmartTrades\">\n      <SmartTradesList />\n    </div>\n  );\n};\n\nexport default SmartTrades;\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport { DCABotDetails } from \"./components/DCABots/DCABotDetails/DCABotDetails\";\nimport { DCABots } from \"./components/DCABots/DCABots\";\nimport GridBots from \"./components/GridBots/GridBots\";\nimport SmartTrades from \"./components/SmartTrades/SmartTrades\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<DCABots />} />\n        <Route path=\":botId\" element={<DCABotDetails />} />\n        <Route path=\"/gridbots\" element={<GridBots />} />\n        <Route path=\"/smarttrades\" element={<SmartTrades />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default Router;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"./Router\";\n\nconst ROUTE_BASENAME = \"/botanstage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <BrowserRouter basename={ROUTE_BASENAME}> */}\n    <BrowserRouter>\n      <Router />\n    </BrowserRouter>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}